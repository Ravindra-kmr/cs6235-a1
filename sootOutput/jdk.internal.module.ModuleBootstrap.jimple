public final class jdk.internal.module.ModuleBootstrap extends java.lang.Object
{
    private static final java.lang.String JAVA_BASE;
    private static final java.lang.String ALL_DEFAULT;
    private static final java.lang.String ALL_UNNAMED;
    private static final java.lang.String ALL_SYSTEM;
    private static final java.lang.String ALL_MODULE_PATH;
    private static final jdk.internal.misc.JavaLangModuleAccess JLMA;
    private static final jdk.internal.module.ModulePatcher patcher;
    private static volatile java.lang.module.ModuleFinder unlimitedFinder;
    private static volatile java.lang.module.ModuleFinder limitedFinder;
    private static final java.lang.String ADD_MODULES;
    private static final java.lang.String ADD_EXPORTS;
    private static final java.lang.String ADD_OPENS;
    private static final java.lang.String ADD_READS;
    private static final java.lang.String PATCH_MODULE;

    private void <init>()
    {
        jdk.internal.module.ModuleBootstrap this;

        this := @this: jdk.internal.module.ModuleBootstrap;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;

        nop;
    }

    public static jdk.internal.module.ModulePatcher patcher()
    {
        jdk.internal.module.ModulePatcher $stack0;

        $stack0 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        return $stack0;
    }

    public static java.lang.module.ModuleFinder unlimitedFinder()
    {
        java.lang.module.ModuleFinder finder, $stack1;

        finder = <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder>;

        if finder != null goto label1;

        $stack1 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder ofSystem()>();

        return $stack1;

     label1:
        return finder;

        nop;
    }

    public static java.lang.module.ModuleFinder limitedFinder()
    {
        java.lang.module.ModuleFinder finder, $stack1;

        finder = <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitedFinder>;

        if finder != null goto label1;

        $stack1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder()>();

        return $stack1;

     label1:
        return finder;

        nop;
    }

    public static java.lang.ModuleLayer boot() throws java.lang.Exception
    {
        jdk.internal.module.ExplodedSystemModules $stack50;
        jdk.internal.module.ModuleBootstrap$SafeModuleFinder $stack78, $stack80;
        java.lang.ModuleLayer $stack70#99, $stack70#100, $stack71#105, $stack71#106, mref#107, $stack81#119, $stack81#120, $stack82#121, $stack82#122, $stack85#129, $stack85#130, $stack77#145, $stack77#146;
        java.util.function.Function $stack67, $stack151, $stack153, $stack160, $stack162, clf#72, $stack92#86, $stack92#87, $stack94#90, $stack94#91, $stack98#103, $stack98#104;
        int $stack175, $stack194, errors#39;
        java.io.PrintStream $stack193, traceOutput#1;
        java.util.function.Consumer $stack131, $stack157, $stack166;
        java.lang.module.ModuleFinder[] $stack187, $stack190;
        java.lang.module.ResolvedModule resolvedModule;
        java.lang.String $stack44, mainModule, $stack47, trace, $stack60, $stack109, $stack117, $stack125, $stack173, mod, $stack189, $stack224, clf#58, name#75, $stack120#78, $stack120#79;
        jdk.internal.misc.JavaLangModuleAccess $stack64, $stack138;
        boolean $stack43, isPatched, haveModulePath, $stack68, extraExportsOrOpens, $stack104, $stack119, $stack135, $stack143, $stack148, $stack176, $stack180, $stack181, $stack209, $stack211, $stack216, $stack217, $stack226, $stack221#9, needResolution#10, canArchive#11, $stack220#13, $stack215#14, $stack215#15, $stack213#16, $stack196#46, $stack196#47, addAllDefaultModules#50, addAllSystemModules#51, addAllApplicationModules#52, $stack142#56, $stack142#57, $stack168#62, $stack168#63, $stack137#69, $stack137#70, $stack113#82, $stack113#83, $stack72#114, $stack72#115, $stack74#123, $stack74#124, $stack86#131, $stack86#132, $stack79#139, $stack79#140;
        java.util.function.Predicate $stack129, $stack155, $stack164;
        byte t6#59, $stack179#60, $stack179#61;
        java.util.Map $stack63, f#68;
        java.util.stream.Stream $stack128, $stack130, $stack150, $stack152, $stack154, $stack156, $stack159, $stack161, $stack163, $stack165;
        java.lang.StringBuilder $stack114, $stack115, $stack116, $stack122, $stack123, $stack124;
        java.lang.ClassLoader cl;
        long $stack39, t0, t1, t2, $stack62, $stack66, $stack133, $stack147, $stack48#2, $stack48#3, $stack201#21, $stack201#22, $stack52#23, $stack52#24, $stack61#40, $stack61#41, errors#42, addAllDefaultModules#66, f#71, $stack96#94, $stack96#95, $stack69#96, $stack69#97, t6#98, $stack100#110, $stack100#111, $stack73#116, $stack73#117, name#118, $stack88#135, $stack88#136, $stack76#143, $stack76#144;
        jdk.internal.module.ArchivedModuleGraph $stack49, archivedModuleGraph, $stack225;
        jdk.internal.module.SystemModules $stack105, $stack207, $stack208, $stack212, $stack218, systemModules#6, $stack210#17, $stack210#18, $stack101#112, $stack101#113, $stack84#127, $stack84#128;
        java.lang.module.Configuration $stack65, $stack90, $stack134, $stack136, $stack139, addAllApplicationModules#67, $stack91#84, $stack91#85, $stack93#88, $stack93#89, $stack97#101, $stack97#102;
        java.lang.module.ModuleDescriptor $stack58, $stack108;
        java.util.HashSet $stack140, $stack171, roots#49;
        java.lang.Object $stack56, $stack106, $stack110, $stack174, $stack54#33, $stack54#34;
        java.lang.module.ModuleReference base, $stack107, $stack205#35, $stack205#36, $stack206#37, $stack206#38, mref#74;
        java.lang.module.ModuleFinder $stack40, upgradeModulePath, $stack41, appModulePath, $stack51, $stack167, $stack169, $stack170, $stack172, $stack188, $stack191, $stack192, $stack199, $stack219, $stack228#7, $stack228#8, systemModuleFinder#12, $stack203#25, $stack203#26, savedModuleFinder#45, finder#48, f#64, f#65, $stack121#76, $stack121#77, $stack83#125, $stack83#126, $stack89#137, $stack89#138;
        java.lang.InternalError $stack197, $stack198;
        java.util.Set $stack45, addModules, $stack46, limitModules, $stack102, $stack127, $stack144, $stack149, $stack158, $stack186;
        jdk.internal.module.ModulePatcher $stack42, $stack126;
        java.net.URI baseUri;
        java.util.Optional $stack55, $stack118, $stack53#29, $stack53#30, $stack112#80, $stack112#81;
        java.util.Iterator $stack103, $stack111, $stack141, f#53, $stack177#54, $stack177#55, t6#73;

        $stack39 = staticinvoke <java.lang.System: long nanoTime()>();

        t0 = $stack39;

        $stack40 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder finderFor(java.lang.String)>("jdk.module.upgrade.path");

        upgradeModulePath = $stack40;

        $stack41 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder finderFor(java.lang.String)>("jdk.module.path");

        appModulePath = $stack41;

        $stack42 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        $stack43 = virtualinvoke $stack42.<jdk.internal.module.ModulePatcher: boolean hasPatches()>();

        isPatched = $stack43;

        $stack44 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jdk.module.main");

        mainModule = $stack44;

        $stack45 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Set addModules()>();

        addModules = $stack45;

        $stack46 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Set limitModules()>();

        limitModules = $stack46;

        traceOutput#1 = null;

        $stack47 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.showModuleResolution");

        trace = $stack47;

        if trace == null goto label01;

        $stack226 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(trace);

        if $stack226 == 0 goto label01;

        traceOutput#1 = <java.lang.System: java.io.PrintStream out>;

     label01:
        $stack48#2 = staticinvoke <java.lang.System: long nanoTime()>();

        $stack48#3 = $stack48#2;

        t1 = $stack48#3;

        systemModules#6 = null;

        $stack228#7 = appModulePath;

        $stack228#8 = $stack228#7;

        if $stack228#8 != null goto label02;

        if upgradeModulePath == null goto label03;

     label02:
        $stack221#9 = 1;

        goto label04;

     label03:
        $stack221#9 = 0;

     label04:
        haveModulePath = $stack221#9;

        needResolution#10 = 1;

        canArchive#11 = 0;

        $stack224 = mainModule;

        $stack49 = staticinvoke <jdk.internal.module.ArchivedModuleGraph: jdk.internal.module.ArchivedModuleGraph get(java.lang.String)>($stack224);

        archivedModuleGraph = $stack49;

        $stack225 = archivedModuleGraph;

        if $stack225 == null goto label07;

        if haveModulePath != 0 goto label07;

        $stack216 = interfaceinvoke addModules.<java.util.Set: boolean isEmpty()>();

        if $stack216 == 0 goto label07;

        $stack217 = interfaceinvoke limitModules.<java.util.Set: boolean isEmpty()>();

        if $stack217 == 0 goto label07;

        if isPatched != 0 goto label07;

        $stack218 = virtualinvoke archivedModuleGraph.<jdk.internal.module.ArchivedModuleGraph: jdk.internal.module.SystemModules systemModules()>();

        systemModules#6 = $stack218;

        $stack219 = virtualinvoke archivedModuleGraph.<jdk.internal.module.ArchivedModuleGraph: java.lang.module.ModuleFinder finder()>();

        systemModuleFinder#12 = $stack219;

        if traceOutput#1 == null goto label05;

        $stack220#13 = 1;

        goto label06;

     label05:
        $stack220#13 = 0;

     label06:
        needResolution#10 = $stack220#13;

        goto label13;

     label07:
        $stack215#14 = haveModulePath;

        $stack215#15 = $stack215#14;

        if $stack215#15 != 0 goto label10;

        $stack209 = interfaceinvoke addModules.<java.util.Set: boolean isEmpty()>();

        if $stack209 == 0 goto label10;

        $stack211 = interfaceinvoke limitModules.<java.util.Set: boolean isEmpty()>();

        if $stack211 == 0 goto label10;

        $stack212 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.SystemModules systemModules(java.lang.String)>(mainModule);

        systemModules#6 = $stack212;

        if systemModules#6 == null goto label10;

        if isPatched != 0 goto label10;

        if traceOutput#1 == null goto label08;

        $stack213#16 = 1;

        goto label09;

     label08:
        $stack213#16 = 0;

     label09:
        needResolution#10 = $stack213#16;

        canArchive#11 = 1;

     label10:
        $stack210#17 = systemModules#6;

        $stack210#18 = $stack210#17;

        if $stack210#18 != null goto label11;

        $stack207 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.SystemModules allSystemModules()>();

        systemModules#6 = $stack207;

     label11:
        $stack208 = systemModules#6;

        if $stack208 == null goto label12;

        $stack199 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder of(jdk.internal.module.SystemModules)>(systemModules#6);

        systemModuleFinder#12 = $stack199;

        goto label13;

     label12:
        $stack50 = new jdk.internal.module.ExplodedSystemModules;

        specialinvoke $stack50.<jdk.internal.module.ExplodedSystemModules: void <init>()>();

        systemModules#6 = $stack50;

        $stack51 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder ofSystem()>();

        systemModuleFinder#12 = $stack51;

     label13:
        $stack201#21 = t1;

        $stack201#22 = $stack201#21;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.1.systemModulesTime", $stack201#22);

        $stack52#23 = staticinvoke <java.lang.System: long nanoTime()>();

        $stack52#24 = $stack52#23;

        t2 = $stack52#24;

        $stack203#25 = systemModuleFinder#12;

        $stack203#26 = $stack203#25;

        $stack53#29 = interfaceinvoke $stack203#26.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>("java.base");

        $stack53#30 = $stack53#29;

        $stack54#33 = virtualinvoke $stack53#30.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $stack54#34 = $stack54#33;

        $stack205#35 = (java.lang.module.ModuleReference) $stack54#34;

        $stack205#36 = $stack205#35;

        base = $stack205#36;

        $stack206#37 = base;

        $stack206#38 = $stack206#37;

        if $stack206#38 != null goto label14;

        $stack198 = new java.lang.InternalError;

        specialinvoke $stack198.<java.lang.InternalError: void <init>(java.lang.String)>("java.base not found");

        throw $stack198;

     label14:
        $stack55 = virtualinvoke base.<java.lang.module.ModuleReference: java.util.Optional location()>();

        $stack56 = virtualinvoke $stack55.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        baseUri = (java.net.URI) $stack56;

        if baseUri != null goto label15;

        $stack197 = new java.lang.InternalError;

        specialinvoke $stack197.<java.lang.InternalError: void <init>(java.lang.String)>("java.base does not have a location");

        throw $stack197;

     label15:
        staticinvoke <jdk.internal.loader.BootLoader: void loadModule(java.lang.module.ModuleReference)>(base);

        $stack58 = virtualinvoke base.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        staticinvoke <jdk.internal.module.Modules: java.lang.Module defineModule(java.lang.ClassLoader,java.lang.module.ModuleDescriptor,java.net.URI)>(null, $stack58, baseUri);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.2.defineBaseTime", t2);

        $stack60 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.validation");

        if $stack60 == null goto label16;

        $stack193 = <java.lang.System: java.io.PrintStream out>;

        $stack194 = staticinvoke <jdk.internal.module.ModulePathValidator: int scanAllModules(java.io.PrintStream)>($stack193);

        errors#39 = $stack194;

        if errors#39 <= 0 goto label16;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>("Validation of module path failed");

     label16:
        $stack61#40 = staticinvoke <java.lang.System: long nanoTime()>();

        $stack61#41 = $stack61#40;

        errors#42 = $stack61#41;

        savedModuleFinder#45 = null;

        $stack196#46 = needResolution#10;

        $stack196#47 = $stack196#46;

        if $stack196#47 == 0 goto label37;

        if upgradeModulePath == null goto label17;

        $stack190 = newarray (java.lang.module.ModuleFinder)[2];

        $stack190[0] = upgradeModulePath;

        $stack190[1] = systemModuleFinder#12;

        $stack191 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder compose(java.lang.module.ModuleFinder[])>($stack190);

        systemModuleFinder#12 = $stack191;

     label17:
        $stack192 = appModulePath;

        if $stack192 == null goto label18;

        $stack187 = newarray (java.lang.module.ModuleFinder)[2];

        $stack187[0] = systemModuleFinder#12;

        $stack187[1] = appModulePath;

        $stack188 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder compose(java.lang.module.ModuleFinder[])>($stack187);

        finder#48 = $stack188;

        goto label19;

     label18:
        finder#48 = systemModuleFinder#12;

     label19:
        $stack140 = new java.util.HashSet;

        specialinvoke $stack140.<java.util.HashSet: void <init>()>();

        roots#49 = $stack140;

        $stack189 = mainModule;

        if $stack189 == null goto label20;

        interfaceinvoke roots#49.<java.util.Set: boolean add(java.lang.Object)>(mainModule);

     label20:
        addAllDefaultModules#50 = 0;

        addAllSystemModules#51 = 0;

        addAllApplicationModules#52 = 0;

        $stack186 = addModules;

        $stack141 = interfaceinvoke $stack186.<java.util.Set: java.util.Iterator iterator()>();

        f#53 = $stack141;

     label21:
        $stack177#54 = f#53;

        $stack177#55 = $stack177#54;

        $stack142#56 = interfaceinvoke $stack177#55.<java.util.Iterator: boolean hasNext()>();

        $stack142#57 = $stack142#56;

        if $stack142#57 == 0 goto label31;

        $stack174 = interfaceinvoke f#53.<java.util.Iterator: java.lang.Object next()>();

        mod = (java.lang.String) $stack174;

        clf#58 = mod;

        t6#59 = -1;

        $stack175 = virtualinvoke clf#58.<java.lang.String: int hashCode()>();

        lookupswitch($stack175)
        {
            case -1057501189: goto label23;
            case 564408789: goto label22;
            case 1070226586: goto label24;
            default: goto label25;
        };

     label22:
        $stack180 = virtualinvoke clf#58.<java.lang.String: boolean equals(java.lang.Object)>("ALL-DEFAULT");

        if $stack180 == 0 goto label25;

        t6#59 = 0;

        goto label25;

     label23:
        $stack181 = virtualinvoke clf#58.<java.lang.String: boolean equals(java.lang.Object)>("ALL-SYSTEM");

        if $stack181 == 0 goto label25;

        t6#59 = 1;

        goto label25;

     label24:
        $stack176 = virtualinvoke clf#58.<java.lang.String: boolean equals(java.lang.Object)>("ALL-MODULE-PATH");

        if $stack176 == 0 goto label25;

        t6#59 = 2;

     label25:
        $stack179#60 = t6#59;

        $stack179#61 = $stack179#60;

        tableswitch($stack179#61)
        {
            case 0: goto label26;
            case 1: goto label27;
            case 2: goto label28;
            default: goto label29;
        };

     label26:
        addAllDefaultModules#50 = 1;

        goto label30;

     label27:
        addAllSystemModules#51 = 1;

        goto label30;

     label28:
        addAllApplicationModules#52 = 1;

        goto label30;

     label29:
        interfaceinvoke roots#49.<java.util.Set: boolean add(java.lang.Object)>(mod);

     label30:
        goto label21;

     label31:
        savedModuleFinder#45 = finder#48;

        $stack143 = interfaceinvoke limitModules.<java.util.Set: boolean isEmpty()>();

        if $stack143 != 0 goto label32;

        $stack172 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitFinder(java.lang.module.ModuleFinder,java.util.Set,java.util.Set)>(finder#48, limitModules, roots#49);

        finder#48 = $stack172;

     label32:
        $stack173 = mainModule;

        if $stack173 == null goto label33;

        if addAllDefaultModules#50 == 0 goto label34;

     label33:
        $stack171 = roots#49;

        $stack169 = systemModuleFinder#12;

        $stack170 = finder#48;

        $stack144 = staticinvoke <jdk.internal.module.DefaultRoots: java.util.Set compute(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder)>($stack169, $stack170);

        interfaceinvoke $stack171.<java.util.Set: boolean addAll(java.util.Collection)>($stack144);

     label34:
        $stack168#62 = addAllSystemModules#51;

        $stack168#63 = $stack168#62;

        if $stack168#63 == 0 goto label35;

        f#64 = finder#48;

        $stack158 = interfaceinvoke systemModuleFinder#12.<java.lang.module.ModuleFinder: java.util.Set findAll()>();

        $stack159 = interfaceinvoke $stack158.<java.util.Set: java.util.stream.Stream stream()>();

        $stack160 = staticinvoke <jdk.internal.module.ModuleBootstrap$descriptor__375: java.util.function.Function bootstrap$()>();

        $stack161 = interfaceinvoke $stack159.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack160);

        $stack162 = staticinvoke <jdk.internal.module.ModuleBootstrap$name__378: java.util.function.Function bootstrap$()>();

        $stack163 = interfaceinvoke $stack161.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack162);

        $stack164 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_0__379: java.util.function.Predicate bootstrap$(java.lang.module.ModuleFinder)>(f#64);

        $stack165 = interfaceinvoke $stack163.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack164);

        $stack166 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_1__386: java.util.function.Consumer bootstrap$(java.util.Set)>(roots#49);

        interfaceinvoke $stack165.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($stack166);

     label35:
        $stack167 = appModulePath;

        if $stack167 == null goto label36;

        if addAllApplicationModules#52 == 0 goto label36;

        f#65 = finder#48;

        $stack149 = interfaceinvoke appModulePath.<java.lang.module.ModuleFinder: java.util.Set findAll()>();

        $stack150 = interfaceinvoke $stack149.<java.util.Set: java.util.stream.Stream stream()>();

        $stack151 = staticinvoke <jdk.internal.module.ModuleBootstrap$descriptor__364: java.util.function.Function bootstrap$()>();

        $stack152 = interfaceinvoke $stack150.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack151);

        $stack153 = staticinvoke <jdk.internal.module.ModuleBootstrap$name__366: java.util.function.Function bootstrap$()>();

        $stack154 = interfaceinvoke $stack152.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack153);

        $stack155 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_2__367: java.util.function.Predicate bootstrap$(java.lang.module.ModuleFinder)>(f#65);

        $stack156 = interfaceinvoke $stack154.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack155);

        $stack157 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_3__373: java.util.function.Consumer bootstrap$(java.util.Set)>(roots#49);

        interfaceinvoke $stack156.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($stack157);

     label36:
        goto label38;

     label37:
        finder#48 = systemModuleFinder#12;

        roots#49 = null;

     label38:
        $stack147 = errors#42;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.3.optionsAndRootsTime", $stack147);

        $stack62 = staticinvoke <java.lang.System: long nanoTime()>();

        addAllDefaultModules#66 = $stack62;

        $stack148 = needResolution#10;

        if $stack148 == 0 goto label39;

        $stack138 = <jdk.internal.module.ModuleBootstrap: jdk.internal.misc.JavaLangModuleAccess JLMA>;

        $stack139 = interfaceinvoke $stack138.<jdk.internal.misc.JavaLangModuleAccess: java.lang.module.Configuration resolveAndBind(java.lang.module.ModuleFinder,java.util.Collection,java.io.PrintStream)>(finder#48, roots#49, traceOutput#1);

        addAllApplicationModules#67 = $stack139;

        goto label41;

     label39:
        if archivedModuleGraph == null goto label40;

        $stack136 = virtualinvoke archivedModuleGraph.<jdk.internal.module.ArchivedModuleGraph: java.lang.module.Configuration configuration()>();

        addAllApplicationModules#67 = $stack136;

        goto label41;

     label40:
        $stack63 = interfaceinvoke systemModules#6.<jdk.internal.module.SystemModules: java.util.Map moduleReads()>();

        f#68 = $stack63;

        $stack64 = <jdk.internal.module.ModuleBootstrap: jdk.internal.misc.JavaLangModuleAccess JLMA>;

        $stack65 = interfaceinvoke $stack64.<jdk.internal.misc.JavaLangModuleAccess: java.lang.module.Configuration newConfiguration(java.lang.module.ModuleFinder,java.util.Map)>(systemModuleFinder#12, f#68);

        addAllApplicationModules#67 = $stack65;

     label41:
        $stack137#69 = isPatched;

        $stack137#70 = $stack137#69;

        if $stack137#70 == 0 goto label42;

        $stack126 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        $stack127 = virtualinvoke $stack126.<jdk.internal.module.ModulePatcher: java.util.Set patchedModules()>();

        $stack128 = interfaceinvoke $stack127.<java.util.Set: java.util.stream.Stream stream()>();

        $stack129 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_4__359: java.util.function.Predicate bootstrap$(java.lang.module.Configuration)>(addAllApplicationModules#67);

        $stack130 = interfaceinvoke $stack128.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($stack129);

        $stack131 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_5__361: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $stack130.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($stack131);

     label42:
        $stack133 = addAllDefaultModules#66;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.4.resolveTime", $stack133);

        $stack66 = staticinvoke <java.lang.System: long nanoTime()>();

        f#71 = $stack66;

        $stack134 = addAllApplicationModules#67;

        $stack67 = staticinvoke <jdk.internal.module.ModuleLoaderMap: java.util.function.Function mappingFunction(java.lang.module.Configuration)>($stack134);

        clf#72 = $stack67;

        $stack135 = haveModulePath;

        if $stack135 == 0 goto label46;

        $stack102 = virtualinvoke addAllApplicationModules#67.<java.lang.module.Configuration: java.util.Set modules()>();

        $stack103 = interfaceinvoke $stack102.<java.util.Set: java.util.Iterator iterator()>();

        t6#73 = $stack103;

     label43:
        $stack111 = t6#73;

        $stack104 = interfaceinvoke $stack111.<java.util.Iterator: boolean hasNext()>();

        if $stack104 == 0 goto label46;

        $stack106 = interfaceinvoke t6#73.<java.util.Iterator: java.lang.Object next()>();

        resolvedModule = (java.lang.module.ResolvedModule) $stack106;

        $stack107 = virtualinvoke resolvedModule.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        mref#74 = $stack107;

        $stack108 = virtualinvoke mref#74.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $stack109 = virtualinvoke $stack108.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        name#75 = $stack109;

        $stack110 = interfaceinvoke clf#72.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(name#75);

        cl = (java.lang.ClassLoader) $stack110;

        if cl != null goto label45;

        if upgradeModulePath == null goto label44;

        $stack118 = interfaceinvoke upgradeModulePath.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(name#75);

        $stack119 = virtualinvoke $stack118.<java.util.Optional: boolean isPresent()>();

        if $stack119 == 0 goto label44;

        $stack122 = new java.lang.StringBuilder;

        specialinvoke $stack122.<java.lang.StringBuilder: void <init>()>();

        $stack123 = virtualinvoke $stack122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name#75);

        $stack124 = virtualinvoke $stack123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cannot be loaded from upgrade module path");

        $stack125 = virtualinvoke $stack124.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack125);

     label44:
        $stack121#76 = systemModuleFinder#12;

        $stack121#77 = $stack121#76;

        $stack120#78 = name#75;

        $stack120#79 = $stack120#78;

        $stack112#80 = interfaceinvoke $stack121#77.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>($stack120#79);

        $stack112#81 = $stack112#80;

        $stack113#82 = virtualinvoke $stack112#81.<java.util.Optional: boolean isPresent()>();

        $stack113#83 = $stack113#82;

        if $stack113#83 != 0 goto label45;

        $stack114 = new java.lang.StringBuilder;

        specialinvoke $stack114.<java.lang.StringBuilder: void <init>()>();

        $stack115 = virtualinvoke $stack114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name#75);

        $stack116 = virtualinvoke $stack115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cannot be loaded from application module path");

        $stack117 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack117);

     label45:
        goto label43;

     label46:
        $stack105 = systemModules#6;

        $stack68 = interfaceinvoke $stack105.<jdk.internal.module.SystemModules: boolean hasSplitPackages()>();

        if $stack68 != 0 goto label47;

        if isPatched != 0 goto label47;

        if haveModulePath == 0 goto label48;

     label47:
        $stack91#84 = addAllApplicationModules#67;

        $stack91#85 = $stack91#84;

        $stack92#86 = clf#72;

        $stack92#87 = $stack92#86;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void checkSplitPackages(java.lang.module.Configuration,java.util.function.Function)>($stack91#85, $stack92#87);

     label48:
        $stack93#88 = addAllApplicationModules#67;

        $stack93#89 = $stack93#88;

        $stack94#90 = clf#72;

        $stack94#91 = $stack94#90;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void loadModules(java.lang.module.Configuration,java.util.function.Function)>($stack93#89, $stack94#91);

        $stack96#94 = f#71;

        $stack96#95 = $stack96#94;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.5.loadModulesTime", $stack96#95);

        $stack69#96 = staticinvoke <java.lang.System: long nanoTime()>();

        $stack69#97 = $stack69#96;

        t6#98 = $stack69#97;

        $stack70#99 = staticinvoke <java.lang.ModuleLayer: java.lang.ModuleLayer empty()>();

        $stack70#100 = $stack70#99;

        $stack97#101 = addAllApplicationModules#67;

        $stack97#102 = $stack97#101;

        $stack98#103 = clf#72;

        $stack98#104 = $stack98#103;

        $stack71#105 = virtualinvoke $stack70#100.<java.lang.ModuleLayer: java.lang.ModuleLayer defineModules(java.lang.module.Configuration,java.util.function.Function)>($stack97#102, $stack98#104);

        $stack71#106 = $stack71#105;

        mref#107 = $stack71#106;

        $stack100#110 = t6#98;

        $stack100#111 = $stack100#110;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.6.layerCreateTime", $stack100#111);

        $stack101#112 = systemModules#6;

        $stack101#113 = $stack101#112;

        $stack72#114 = interfaceinvoke $stack101#113.<jdk.internal.module.SystemModules: boolean hasIncubatorModules()>();

        $stack72#115 = $stack72#114;

        if $stack72#115 != 0 goto label49;

        if haveModulePath == 0 goto label50;

     label49:
        $stack90 = addAllApplicationModules#67;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void checkIncubatingStatus(java.lang.module.Configuration)>($stack90);

     label50:
        $stack73#116 = staticinvoke <java.lang.System: long nanoTime()>();

        $stack73#117 = $stack73#116;

        name#118 = $stack73#117;

        $stack81#119 = mref#107;

        $stack81#120 = $stack81#119;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addExtraReads(java.lang.ModuleLayer)>($stack81#120);

        $stack82#121 = mref#107;

        $stack82#122 = $stack82#121;

        $stack74#123 = staticinvoke <jdk.internal.module.ModuleBootstrap: boolean addExtraExportsAndOpens(java.lang.ModuleLayer)>($stack82#122);

        $stack74#124 = $stack74#123;

        extraExportsOrOpens = $stack74#124;

        $stack83#125 = upgradeModulePath;

        $stack83#126 = $stack83#125;

        $stack84#127 = systemModules#6;

        $stack84#128 = $stack84#127;

        $stack85#129 = mref#107;

        $stack85#130 = $stack85#129;

        $stack86#131 = extraExportsOrOpens;

        $stack86#132 = $stack86#131;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addIllegalAccess(java.lang.module.ModuleFinder,jdk.internal.module.SystemModules,java.lang.ModuleLayer,boolean)>($stack83#126, $stack84#128, $stack85#130, $stack86#132);

        $stack88#135 = name#118;

        $stack88#136 = $stack88#135;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.7.adjustModulesTime", $stack88#136);

        $stack89#137 = savedModuleFinder#45;

        $stack89#138 = $stack89#137;

        if $stack89#138 == null goto label51;

        $stack78 = new jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        specialinvoke $stack78.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: void <init>(java.lang.module.ModuleFinder)>(savedModuleFinder#45);

        <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder> = $stack78;

        if savedModuleFinder#45 == finder#48 goto label51;

        $stack80 = new jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        specialinvoke $stack80.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: void <init>(java.lang.module.ModuleFinder)>(finder#48);

        <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitedFinder> = $stack80;

     label51:
        $stack79#139 = canArchive#11;

        $stack79#140 = $stack79#139;

        if $stack79#140 == 0 goto label52;

        if mainModule != null goto label52;

        staticinvoke <jdk.internal.module.ArchivedModuleGraph: void archive(java.lang.String,jdk.internal.module.SystemModules,java.lang.module.ModuleFinder,java.lang.module.Configuration)>(mainModule, systemModules#6, systemModuleFinder#12, addAllApplicationModules#67);

     label52:
        $stack76#143 = t0;

        $stack76#144 = $stack76#143;

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.totalTime", $stack76#144);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void publish()>();

        $stack77#145 = mref#107;

        $stack77#146 = $stack77#145;

        return $stack77#146;
    }

    private static void loadModules(java.lang.module.Configuration, java.util.function.Function)
    {
        java.lang.module.ModuleReference $stack11, mref;
        java.util.function.Function clf;
        java.lang.module.ResolvedModule resolvedModule;
        java.lang.String $stack12, name;
        boolean $stack9, $stack14, $stack17;
        java.util.Iterator $stack8, l2, $stack15;
        java.util.Set $stack7;
        java.lang.module.Configuration cf;
        jdk.internal.loader.BuiltinClassLoader $stack16;
        java.lang.Object $stack10, $stack13;
        java.lang.ClassLoader loader;

        cf := @parameter0: java.lang.module.Configuration;

        clf := @parameter1: java.util.function.Function;

        $stack7 = virtualinvoke cf.<java.lang.module.Configuration: java.util.Set modules()>();

        $stack8 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

        l2 = $stack8;

     label1:
        $stack15 = l2;

        $stack9 = interfaceinvoke $stack15.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack10 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        resolvedModule = (java.lang.module.ResolvedModule) $stack10;

        $stack11 = virtualinvoke resolvedModule.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        mref = $stack11;

        $stack12 = virtualinvoke resolvedModule.<java.lang.module.ResolvedModule: java.lang.String name()>();

        name = $stack12;

        $stack13 = interfaceinvoke clf.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(name);

        loader = (java.lang.ClassLoader) $stack13;

        if loader != null goto label2;

        $stack17 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("java.base");

        if $stack17 != 0 goto label3;

        staticinvoke <jdk.internal.loader.BootLoader: void loadModule(java.lang.module.ModuleReference)>(mref);

        goto label3;

     label2:
        $stack14 = loader instanceof jdk.internal.loader.BuiltinClassLoader;

        if $stack14 == 0 goto label3;

        $stack16 = (jdk.internal.loader.BuiltinClassLoader) loader;

        virtualinvoke $stack16.<jdk.internal.loader.BuiltinClassLoader: void loadModule(java.lang.module.ModuleReference)>(mref);

     label3:
        goto label1;

     label4:
        return;

        nop;
    }

    private static void checkSplitPackages(java.lang.module.Configuration, java.util.function.Function)
    {
        java.lang.module.ModuleReference $stack17;
        bottom_type $stack23, $stack27;
        boolean $stack15, $stack37, $stack23#3, $stack23#4;
        java.util.Set $stack13, $stack21;
        java.lang.module.Configuration cf;
        java.lang.LayerInstantiationException $stack36;
        java.lang.StringBuilder $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34;
        java.lang.ClassLoader loader;
        java.lang.module.ModuleDescriptor $stack18, descriptor, $stack38;
        java.util.HashMap $stack12, packageToModule;
        java.util.function.Function clf;
        java.lang.module.ResolvedModule resolvedModule;
        java.lang.String $stack19, name, p, other, $stack35, msg;
        java.util.Iterator $stack14, l3, $stack22, l8, $stack24, $stack27#1, $stack27#2;
        java.lang.Object $stack16, $stack20, $stack25, $stack26;

        cf := @parameter0: java.lang.module.Configuration;

        clf := @parameter1: java.util.function.Function;

        $stack12 = new java.util.HashMap;

        specialinvoke $stack12.<java.util.HashMap: void <init>()>();

        packageToModule = $stack12;

        $stack13 = virtualinvoke cf.<java.lang.module.Configuration: java.util.Set modules()>();

        $stack14 = interfaceinvoke $stack13.<java.util.Set: java.util.Iterator iterator()>();

        l3 = $stack14;

     label1:
        $stack24 = l3;

        $stack15 = interfaceinvoke $stack24.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label6;

        $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        resolvedModule = (java.lang.module.ResolvedModule) $stack16;

        $stack17 = virtualinvoke resolvedModule.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        $stack18 = virtualinvoke $stack17.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        descriptor = $stack18;

        $stack19 = virtualinvoke descriptor.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        name = $stack19;

        $stack20 = interfaceinvoke clf.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(name);

        loader = (java.lang.ClassLoader) $stack20;

        if loader == null goto label2;

        $stack37 = loader instanceof jdk.internal.loader.BuiltinClassLoader;

        if $stack37 == 0 goto label5;

     label2:
        $stack38 = descriptor;

        $stack21 = virtualinvoke $stack38.<java.lang.module.ModuleDescriptor: java.util.Set packages()>();

        $stack22 = interfaceinvoke $stack21.<java.util.Set: java.util.Iterator iterator()>();

        l8 = $stack22;

     label3:
        $stack27#1 = l8;

        $stack27#2 = $stack27#1;

        $stack23#3 = interfaceinvoke $stack27#2.<java.util.Iterator: boolean hasNext()>();

        $stack23#4 = $stack23#3;

        if $stack23#4 == 0 goto label5;

        $stack25 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        p = (java.lang.String) $stack25;

        $stack26 = interfaceinvoke packageToModule.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(p, name);

        other = (java.lang.String) $stack26;

        if other == null goto label4;

        $stack28 = new java.lang.StringBuilder;

        specialinvoke $stack28.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(p);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in both module ");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and module ");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(other);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.String toString()>();

        msg = $stack35;

        $stack36 = new java.lang.LayerInstantiationException;

        specialinvoke $stack36.<java.lang.LayerInstantiationException: void <init>(java.lang.String)>(msg);

        throw $stack36;

     label4:
        goto label3;

     label5:
        goto label1;

     label6:
        return;

        nop;
    }

    private static java.lang.module.ModuleFinder limitFinder(java.lang.module.ModuleFinder, java.util.Set, java.util.Set)
    {
        java.util.HashMap $stack10, map;
        jdk.internal.module.ModuleBootstrap$1 $stack25;
        java.util.function.Function $stack13, $stack18, $stack20;
        java.util.HashSet $stack23, mrefs;
        java.lang.module.ModuleFinder finder, $stack8;
        java.util.Collection $stack24;
        java.nio.file.Path[] $stack7;
        java.util.Set roots, $stack11, otherMods;
        java.lang.module.Configuration $stack6, $stack9, cf;
        java.util.function.Consumer $stack15, $stack22;
        java.util.stream.Stream $stack12, $stack14, $stack16, $stack19, $stack21;
        java.lang.Object $stack17;

        finder := @parameter0: java.lang.module.ModuleFinder;

        roots := @parameter1: java.util.Set;

        otherMods := @parameter2: java.util.Set;

        $stack6 = staticinvoke <java.lang.module.Configuration: java.lang.module.Configuration empty()>();

        $stack7 = newarray (java.nio.file.Path)[0];

        $stack8 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder of(java.nio.file.Path[])>($stack7);

        $stack9 = virtualinvoke $stack6.<java.lang.module.Configuration: java.lang.module.Configuration resolve(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)>(finder, $stack8, roots);

        cf = $stack9;

        $stack10 = new java.util.HashMap;

        specialinvoke $stack10.<java.util.HashMap: void <init>()>();

        map = $stack10;

        $stack11 = virtualinvoke cf.<java.lang.module.Configuration: java.util.Set modules()>();

        $stack12 = interfaceinvoke $stack11.<java.util.Set: java.util.stream.Stream stream()>();

        $stack13 = staticinvoke <jdk.internal.module.ModuleBootstrap$reference__357: java.util.function.Function bootstrap$()>();

        $stack14 = interfaceinvoke $stack12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack13);

        $stack15 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_limitFinder_6__360: java.util.function.Consumer bootstrap$(java.util.Map)>(map);

        interfaceinvoke $stack14.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($stack15);

        $stack16 = interfaceinvoke otherMods.<java.util.Set: java.util.stream.Stream stream()>();

        $stack17 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(finder);

        $stack18 = staticinvoke <jdk.internal.module.ModuleBootstrap$find__362: java.util.function.Function bootstrap$(java.lang.module.ModuleFinder)>(finder);

        $stack19 = interfaceinvoke $stack16.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($stack18);

        $stack20 = staticinvoke <jdk.internal.module.ModuleBootstrap$stream__363: java.util.function.Function bootstrap$()>();

        $stack21 = interfaceinvoke $stack19.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($stack20);

        $stack22 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_limitFinder_7__365: java.util.function.Consumer bootstrap$(java.util.Map)>(map);

        interfaceinvoke $stack21.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($stack22);

        $stack23 = new java.util.HashSet;

        $stack24 = interfaceinvoke map.<java.util.Map: java.util.Collection values()>();

        specialinvoke $stack23.<java.util.HashSet: void <init>(java.util.Collection)>($stack24);

        mrefs = $stack23;

        $stack25 = new jdk.internal.module.ModuleBootstrap$1;

        specialinvoke $stack25.<jdk.internal.module.ModuleBootstrap$1: void <init>(java.util.Map,java.util.Set)>(map, mrefs);

        return $stack25;

        nop;
    }

    private static java.lang.module.ModuleFinder finderFor(java.lang.String)
    {
        jdk.internal.module.ModulePatcher $stack13;
        java.lang.String[] $stack11, dirs, l5, $stack16;
        bottom_type i, l7;
        java.lang.module.ModuleFinder $stack14;
        int $stack12, l6, $stack15, $stack18, $stack19, i#1, l7#2;
        java.lang.String prop, $stack9, s, $stack10, dir;
        java.nio.file.Path $stack17;
        java.nio.file.Path[] paths;

        prop := @parameter0: java.lang.String;

        $stack9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(prop);

        s = $stack9;

        if s != null goto label1;

        return null;

     label1:
        $stack10 = <java.io.File: java.lang.String pathSeparator>;

        $stack11 = virtualinvoke s.<java.lang.String: java.lang.String[] split(java.lang.String)>($stack10);

        dirs = $stack11;

        $stack12 = lengthof dirs;

        paths = newarray (java.nio.file.Path)[$stack12];

        i#1 = 0;

        l5 = dirs;

        l6 = lengthof l5;

        l7#2 = 0;

     label2:
        $stack19 = l7#2;

        $stack18 = l6;

        if $stack19 >= $stack18 goto label3;

        dir = l5[l7#2];

        $stack15 = i#1;

        i#1 = i#1 + 1;

        $stack16 = newarray (java.lang.String)[0];

        $stack17 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.lang.String,java.lang.String[])>(dir, $stack16);

        paths[$stack15] = $stack17;

        l7#2 = l7#2 + 1;

        goto label2;

     label3:
        $stack13 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        $stack14 = staticinvoke <jdk.internal.module.ModulePath: java.lang.module.ModuleFinder of(jdk.internal.module.ModulePatcher,java.nio.file.Path[])>($stack13, paths);

        return $stack14;

        nop;
    }

    private static jdk.internal.module.ModulePatcher initModulePatcher()
    {
        jdk.internal.module.ModulePatcher $stack3;
        java.util.Map $stack2, map;
        java.lang.String $stack1;

        $stack1 = <java.io.File: java.lang.String pathSeparator>;

        $stack2 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String,java.lang.String,boolean)>("jdk.module.patch.", $stack1, 0);

        map = $stack2;

        $stack3 = new jdk.internal.module.ModulePatcher;

        specialinvoke $stack3.<jdk.internal.module.ModulePatcher: void <init>(java.util.Map)>(map);

        return $stack3;

        nop;
    }

    private static java.util.Set addModules()
    {
        java.lang.String[] $stack14, l4;
        java.util.HashSet $stack13, modules;
        bottom_type index, value, l6;
        int l5, $stack22, $stack23, index#1, l6#3;
        java.lang.String prefix, $stack11, $stack12, $stack18, $stack19, $stack20, s, value#2;
        boolean $stack21, $stack24;
        java.util.Set $stack25;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack15, $stack16, $stack17;

        prefix = "jdk.module.addmods.";

        index#1 = 0;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index#1);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($stack11);

        value#2 = $stack12;

        if value#2 != null goto label1;

        $stack25 = staticinvoke <java.util.Set: java.util.Set of()>();

        return $stack25;

     label1:
        $stack13 = new java.util.HashSet;

        specialinvoke $stack13.<java.util.HashSet: void <init>()>();

        modules = $stack13;

     label2:
        $stack20 = value#2;

        if $stack20 == null goto label6;

        $stack14 = virtualinvoke value#2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l4 = $stack14;

        l5 = lengthof l4;

        l6#3 = 0;

     label3:
        $stack23 = l6#3;

        $stack22 = l5;

        if $stack23 >= $stack22 goto label5;

        s = l4[l6#3];

        $stack21 = virtualinvoke s.<java.lang.String: boolean isEmpty()>();

        if $stack21 != 0 goto label4;

        $stack24 = interfaceinvoke modules.<java.util.Set: boolean add(java.lang.Object)>(s);

     label4:
        l6#3 = l6#3 + 1;

        goto label3;

     label5:
        index#1 = index#1 + 1;

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index#1);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($stack18);

        value#2 = $stack19;

        goto label2;

     label6:
        return modules;

        nop;
    }

    private static java.util.Set limitModules()
    {
        java.util.Set $stack13;
        java.lang.String[] $stack8, l2;
        java.util.HashSet $stack7, names;
        bottom_type l4;
        int l3, $stack9, $stack10, $stack11, l4#1;
        java.lang.String $stack6, value, name;
        boolean $stack12;

        $stack6 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.limitmods");

        value = $stack6;

        if value != null goto label1;

        $stack13 = staticinvoke <java.util.Set: java.util.Set of()>();

        return $stack13;

     label1:
        $stack7 = new java.util.HashSet;

        specialinvoke $stack7.<java.util.HashSet: void <init>()>();

        names = $stack7;

        $stack8 = virtualinvoke value.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l2 = $stack8;

        l3 = lengthof l2;

        l4#1 = 0;

     label2:
        $stack11 = l4#1;

        $stack10 = l3;

        if $stack11 >= $stack10 goto label4;

        name = l2[l4#1];

        $stack9 = virtualinvoke name.<java.lang.String: int length()>();

        if $stack9 <= 0 goto label3;

        $stack12 = interfaceinvoke names.<java.util.Set: boolean add(java.lang.Object)>(name);

     label3:
        l4#1 = l4#1 + 1;

        goto label2;

     label4:
        return names;

        nop;
    }

    private static void addExtraReads(java.lang.ModuleLayer)
    {
        bottom_type $stack13, om, $stack23;
        java.util.Map $stack9, map;
        boolean $stack10, $stack17, $stack22, $stack26, $stack28, $stack13#3, $stack13#4;
        java.util.Set $stack11;
        java.util.List $stack20;
        java.util.Optional $stack16, $stack27, om#5, om#6;
        java.lang.ModuleLayer bootLayer;
        java.lang.String mn, name, $stack25;
        java.util.Map$Entry e;
        java.util.Iterator $stack12, l2, $stack21, l7, $stack29, $stack23#1, $stack23#2;
        java.lang.Module m, $stack31;
        java.lang.Object $stack14, $stack15, $stack18, $stack19, $stack24, $stack30;

        bootLayer := @parameter0: java.lang.ModuleLayer;

        $stack9 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String)>("jdk.module.addreads.");

        map = $stack9;

        $stack10 = interfaceinvoke map.<java.util.Map: boolean isEmpty()>();

        if $stack10 == 0 goto label1;

        return;

     label1:
        $stack11 = interfaceinvoke map.<java.util.Map: java.util.Set entrySet()>();

        $stack12 = interfaceinvoke $stack11.<java.util.Set: java.util.Iterator iterator()>();

        l2 = $stack12;

     label2:
        $stack23#1 = l2;

        $stack23#2 = $stack23#1;

        $stack13#3 = interfaceinvoke $stack23#2.<java.util.Iterator: boolean hasNext()>();

        $stack13#4 = $stack13#3;

        if $stack13#4 == 0 goto label9;

        $stack14 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $stack14;

        $stack15 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        mn = (java.lang.String) $stack15;

        $stack16 = virtualinvoke bootLayer.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(mn);

        om#5 = $stack16;

        $stack17 = virtualinvoke om#5.<java.util.Optional: boolean isPresent()>();

        if $stack17 != 0 goto label3;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>("--add-reads", mn);

        goto label2;

     label3:
        $stack18 = virtualinvoke om#5.<java.util.Optional: java.lang.Object get()>();

        m = (java.lang.Module) $stack18;

        $stack19 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack20 = (java.util.List) $stack19;

        $stack21 = interfaceinvoke $stack20.<java.util.List: java.util.Iterator iterator()>();

        l7 = $stack21;

     label4:
        $stack29 = l7;

        $stack22 = interfaceinvoke $stack29.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label8;

        $stack24 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        name = (java.lang.String) $stack24;

        $stack25 = "ALL-UNNAMED";

        $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $stack26 == 0 goto label5;

        staticinvoke <jdk.internal.module.Modules: void addReadsAllUnnamed(java.lang.Module)>(m);

        goto label7;

     label5:
        $stack27 = virtualinvoke bootLayer.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(name);

        om#6 = $stack27;

        $stack28 = virtualinvoke om#6.<java.util.Optional: boolean isPresent()>();

        if $stack28 == 0 goto label6;

        $stack30 = virtualinvoke om#6.<java.util.Optional: java.lang.Object get()>();

        $stack31 = (java.lang.Module) $stack30;

        staticinvoke <jdk.internal.module.Modules: void addReads(java.lang.Module,java.lang.Module)>(m, $stack31);

        goto label7;

     label6:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>("--add-reads", name);

     label7:
        goto label4;

     label8:
        goto label2;

     label9:
        return;

        nop;
    }

    private static boolean addExtraExportsAndOpens(java.lang.ModuleLayer)
    {
        java.lang.ModuleLayer bootLayer;
        bottom_type extraExportsOrOpens, prefix;
        java.util.Map $stack5, extraExports, $stack7, extraOpens, $stack12;
        java.lang.String $stack10, $stack11, prefix#2, prefix#3;
        boolean $stack6, $stack8, $stack9, extraExportsOrOpens#1;

        bootLayer := @parameter0: java.lang.ModuleLayer;

        extraExportsOrOpens#1 = 0;

        prefix#2 = "jdk.module.addexports.";

        $stack5 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String)>(prefix#2);

        extraExports = $stack5;

        $stack6 = interfaceinvoke extraExports.<java.util.Map: boolean isEmpty()>();

        if $stack6 != 0 goto label1;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addExtraExportsOrOpens(java.lang.ModuleLayer,java.util.Map,boolean)>(bootLayer, extraExports, 0);

        extraExportsOrOpens#1 = 1;

     label1:
        $stack10 = "jdk.module.addopens.";

        prefix#3 = $stack10;

        $stack11 = prefix#3;

        $stack7 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String)>($stack11);

        extraOpens = $stack7;

        $stack12 = extraOpens;

        $stack8 = interfaceinvoke $stack12.<java.util.Map: boolean isEmpty()>();

        if $stack8 != 0 goto label2;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addExtraExportsOrOpens(java.lang.ModuleLayer,java.util.Map,boolean)>(bootLayer, extraOpens, 1);

        extraExportsOrOpens#1 = 1;

     label2:
        $stack9 = extraExportsOrOpens#1;

        return $stack9;

        nop;
    }

    private static void addExtraExportsOrOpens(java.lang.ModuleLayer, java.util.Map, boolean)
    {
        byte $stack58, $stack61;
        bottom_type $stack18, $stack25, om, $stack26, $stack34, $stack35, allUnnamed, other, $stack41, $stack51, $stack52, $stack53, $stack65;
        java.util.Map map, $stack66;
        java.util.Set $stack16, $stack29;
        java.lang.StringBuilder $stack44, $stack45, $stack46, $stack47, $stack48;
        java.lang.String option, key, mn, pn, $stack24, name, $stack37, $stack49, $stack54, $stack55, $stack56, $stack57, $stack60, $stack63, $stack64, $stack65#1, $stack51#8, $stack51#9;
        java.util.Map$Entry e;
        java.lang.Module m, other#22;
        boolean opens, $stack23, $stack30, $stack38, $stack40, $stack43, $stack50, $stack18#4, $stack18#5, $stack26#15, $stack26#16, $stack34#19, $stack34#20, allUnnamed#21;
        java.util.List $stack32;
        java.util.Optional $stack39, $stack25#10, $stack25#11, om#12, $stack53#13, $stack53#14, om#23;
        java.lang.ModuleLayer bootLayer, $stack52#6, $stack52#7;
        java.lang.module.ModuleDescriptor $stack28;
        java.lang.String[] $stack21, s, $stack59, $stack62;
        int $stack22;
        java.util.Iterator $stack17, l4, $stack33, l12, $stack35#2, $stack35#3, $stack41#17, $stack41#18;
        java.lang.Object $stack19, $stack20, $stack27, $stack31, $stack36, $stack42;

        bootLayer := @parameter0: java.lang.ModuleLayer;

        map := @parameter1: java.util.Map;

        opens := @parameter2: boolean;

        if opens == 0 goto label01;

        $stack65#1 = "--add-opens";

        goto label02;

     label01:
        $stack65#1 = "--add-exports";

     label02:
        option = $stack65#1;

        $stack66 = map;

        $stack16 = interfaceinvoke $stack66.<java.util.Map: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

        l4 = $stack17;

     label03:
        $stack35#2 = l4;

        $stack35#3 = $stack35#2;

        $stack18#4 = interfaceinvoke $stack35#3.<java.util.Iterator: boolean hasNext()>();

        $stack18#5 = $stack18#4;

        if $stack18#5 == 0 goto label18;

        $stack19 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $stack19;

        $stack20 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        key = (java.lang.String) $stack20;

        $stack21 = virtualinvoke key.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        s = $stack21;

        $stack22 = lengthof s;

        if $stack22 == 2 goto label04;

        $stack57 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>(option, "<module>/<package>", key);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack57);

     label04:
        $stack59 = s;

        $stack58 = 0;

        $stack60 = $stack59[$stack58];

        mn = $stack60;

        $stack62 = s;

        $stack61 = 1;

        $stack63 = $stack62[$stack61];

        pn = $stack63;

        $stack64 = mn;

        $stack23 = virtualinvoke $stack64.<java.lang.String: boolean isEmpty()>();

        if $stack23 != 0 goto label05;

        $stack50 = virtualinvoke pn.<java.lang.String: boolean isEmpty()>();

        if $stack50 == 0 goto label06;

     label05:
        $stack54 = option;

        $stack55 = "<module>/<package>";

        $stack56 = key;

        $stack24 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($stack54, $stack55, $stack56);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack24);

     label06:
        $stack52#6 = bootLayer;

        $stack52#7 = $stack52#6;

        $stack51#8 = mn;

        $stack51#9 = $stack51#8;

        $stack25#10 = virtualinvoke $stack52#7.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>($stack51#9);

        $stack25#11 = $stack25#10;

        om#12 = $stack25#11;

        $stack53#13 = om#12;

        $stack53#14 = $stack53#13;

        $stack26#15 = virtualinvoke $stack53#14.<java.util.Optional: boolean isPresent()>();

        $stack26#16 = $stack26#15;

        if $stack26#16 != 0 goto label07;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>(option, mn);

        goto label03;

     label07:
        $stack27 = virtualinvoke om#12.<java.util.Optional: java.lang.Object get()>();

        m = (java.lang.Module) $stack27;

        $stack28 = virtualinvoke m.<java.lang.Module: java.lang.module.ModuleDescriptor getDescriptor()>();

        $stack29 = virtualinvoke $stack28.<java.lang.module.ModuleDescriptor: java.util.Set packages()>();

        $stack30 = interfaceinvoke $stack29.<java.util.Set: boolean contains(java.lang.Object)>(pn);

        if $stack30 != 0 goto label08;

        $stack44 = new java.lang.StringBuilder;

        specialinvoke $stack44.<java.lang.StringBuilder: void <init>()>();

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package ");

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pn);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in ");

        $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(mn);

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warn(java.lang.String)>($stack49);

        goto label03;

     label08:
        $stack31 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack32 = (java.util.List) $stack31;

        $stack33 = interfaceinvoke $stack32.<java.util.List: java.util.Iterator iterator()>();

        l12 = $stack33;

     label09:
        $stack41#17 = l12;

        $stack41#18 = $stack41#17;

        $stack34#19 = interfaceinvoke $stack41#18.<java.util.Iterator: boolean hasNext()>();

        $stack34#20 = $stack34#19;

        if $stack34#20 == 0 goto label17;

        $stack36 = interfaceinvoke l12.<java.util.Iterator: java.lang.Object next()>();

        name = (java.lang.String) $stack36;

        allUnnamed#21 = 0;

        other#22 = null;

        $stack37 = "ALL-UNNAMED";

        $stack38 = virtualinvoke $stack37.<java.lang.String: boolean equals(java.lang.Object)>(name);

        if $stack38 == 0 goto label10;

        allUnnamed#21 = 1;

        goto label12;

     label10:
        $stack39 = virtualinvoke bootLayer.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(name);

        om#23 = $stack39;

        $stack40 = virtualinvoke om#23.<java.util.Optional: boolean isPresent()>();

        if $stack40 == 0 goto label11;

        $stack42 = virtualinvoke om#23.<java.util.Optional: java.lang.Object get()>();

        other#22 = (java.lang.Module) $stack42;

        goto label12;

     label11:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>(option, name);

        goto label09;

     label12:
        $stack43 = allUnnamed#21;

        if $stack43 == 0 goto label14;

        if opens == 0 goto label13;

        staticinvoke <jdk.internal.module.Modules: void addOpensToAllUnnamed(java.lang.Module,java.lang.String)>(m, pn);

        goto label16;

     label13:
        staticinvoke <jdk.internal.module.Modules: void addExportsToAllUnnamed(java.lang.Module,java.lang.String)>(m, pn);

        goto label16;

     label14:
        if opens == 0 goto label15;

        staticinvoke <jdk.internal.module.Modules: void addOpens(java.lang.Module,java.lang.String,java.lang.Module)>(m, pn, other#22);

        goto label16;

     label15:
        staticinvoke <jdk.internal.module.Modules: void addExports(java.lang.Module,java.lang.String,java.lang.Module)>(m, pn, other#22);

     label16:
        goto label09;

     label17:
        goto label03;

     label18:
        return;

        nop;
    }

    private static void addIllegalAccess(java.lang.module.ModuleFinder, jdk.internal.module.SystemModules, java.lang.ModuleLayer, boolean)
    {
        byte map1#3, $stack92#4, $stack92#5;
        java.util.Map $stack69, $stack72, $stack79, $stack80, $stack20#15, $stack20#16, map1#17, $stack21#20, $stack21#21, map2#22, $stack86#23, $stack86#24;
        java.lang.StringBuilder $stack87, $stack88, $stack89, $stack90;
        java.lang.Module m, $stack47, $stack50, $stack55, $stack58, $stack62;
        jdk.internal.module.SystemModules systemModules, $stack84#13, $stack84#14, $stack85#18, $stack85#19;
        java.lang.ModuleLayer bootLayer, $stack76#28, $stack76#29;
        java.lang.module.ModuleDescriptor $stack27, descriptor;
        java.util.HashSet $stack41, $stack42;
        int $stack81;
        java.io.PrintStream $stack19#10, $stack19#11;
        jdk.internal.module.IllegalAccessLogger$Mode mode#1, $stack83#8, $stack83#9;
        java.lang.Object $stack26, $stack31, $stack33, $stack57, $stack61;
        jdk.internal.module.IllegalAccessMaps $stack78, maps#27;
        jdk.internal.module.IllegalAccessLogger$Builder $stack34, $stack35, $stack49, $stack52, $stack18#6, $stack18#7, builder#12;
        bottom_type mode, $stack18, $stack19, builder, $stack20, map1, $stack21, map2, $stack22, $stack23, $stack24, maps, $stack25, concealedPackages, exportedPackages, iterator, $stack40, pn, $stack76, $stack83, $stack84, $stack85, $stack86, $stack92;
        java.lang.module.ModuleFinder upgradeModulePath, $stack77;
        java.util.Set $stack30, $stack32, $stack48, $stack51, $stack53, $stack54, $stack70, $stack73, $stack23#30, $stack23#31, concealedPackages#39, exportedPackages#40;
        java.lang.String $stack17, value, $stack28, name, $stack68, $stack71, $stack91, builder#2, pn#42, pn#44;
        jdk.internal.misc.JavaLangAccess $stack36, $stack56, iterator#45;
        boolean $stack29, extraExportsOrOpens, $stack44, $stack46, $stack59, $stack63, $stack65, $stack67, $stack74, $stack75, $stack82, $stack93, $stack94, $stack95, $stack22#25, $stack22#26, $stack25#37, $stack25#38;
        java.util.Optional $stack66;
        java.util.Iterator $stack37, $stack38, $stack39, $stack43, $stack45, $stack60, $stack64, $stack24#32, $stack24#33, maps#34, $stack40#35, $stack40#36, iterator#41, iterator#43;

        upgradeModulePath := @parameter0: java.lang.module.ModuleFinder;

        systemModules := @parameter1: jdk.internal.module.SystemModules;

        bootLayer := @parameter2: java.lang.ModuleLayer;

        extraExportsOrOpens := @parameter3: boolean;

        $stack17 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.illegalAccess");

        value = $stack17;

        mode#1 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode ONESHOT>;

        if value == null goto label11;

        builder#2 = value;

        map1#3 = -1;

        $stack81 = virtualinvoke builder#2.<java.lang.String: int hashCode()>();

        lookupswitch($stack81)
        {
            case -991722469: goto label02;
            case 3079692: goto label01;
            case 3641990: goto label03;
            case 95458899: goto label04;
            default: goto label05;
        };

     label01:
        $stack94 = virtualinvoke builder#2.<java.lang.String: boolean equals(java.lang.Object)>("deny");

        if $stack94 == 0 goto label05;

        map1#3 = 0;

        goto label05;

     label02:
        $stack95 = virtualinvoke builder#2.<java.lang.String: boolean equals(java.lang.Object)>("permit");

        if $stack95 == 0 goto label05;

        map1#3 = 1;

        goto label05;

     label03:
        $stack93 = virtualinvoke builder#2.<java.lang.String: boolean equals(java.lang.Object)>("warn");

        if $stack93 == 0 goto label05;

        map1#3 = 2;

        goto label05;

     label04:
        $stack82 = virtualinvoke builder#2.<java.lang.String: boolean equals(java.lang.Object)>("debug");

        if $stack82 == 0 goto label05;

        map1#3 = 3;

     label05:
        $stack92#4 = map1#3;

        $stack92#5 = $stack92#4;

        tableswitch($stack92#5)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        return;

     label07:
        goto label11;

     label08:
        mode#1 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode WARN>;

        goto label11;

     label09:
        mode#1 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode DEBUG>;

        goto label11;

     label10:
        $stack87 = new java.lang.StringBuilder;

        specialinvoke $stack87.<java.lang.StringBuilder: void <init>()>();

        $stack88 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value specified to --illegal-access not recognized: \'");

        $stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $stack90 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack91 = virtualinvoke $stack90.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack91);

        return;

     label11:
        $stack18#6 = new jdk.internal.module.IllegalAccessLogger$Builder;

        $stack18#7 = $stack18#6;

        $stack83#8 = mode#1;

        $stack83#9 = $stack83#8;

        $stack19#10 = <java.lang.System: java.io.PrintStream err>;

        $stack19#11 = $stack19#10;

        specialinvoke $stack18#7.<jdk.internal.module.IllegalAccessLogger$Builder: void <init>(jdk.internal.module.IllegalAccessLogger$Mode,java.io.PrintStream)>($stack83#9, $stack19#11);

        builder#12 = $stack18#7;

        $stack84#13 = systemModules;

        $stack84#14 = $stack84#13;

        $stack20#15 = interfaceinvoke $stack84#14.<jdk.internal.module.SystemModules: java.util.Map concealedPackagesToOpen()>();

        $stack20#16 = $stack20#15;

        map1#17 = $stack20#16;

        $stack85#18 = systemModules;

        $stack85#19 = $stack85#18;

        $stack21#20 = interfaceinvoke $stack85#19.<jdk.internal.module.SystemModules: java.util.Map exportedPackagesToOpen()>();

        $stack21#21 = $stack21#20;

        map2#22 = $stack21#21;

        $stack86#23 = map1#17;

        $stack86#24 = $stack86#23;

        $stack22#25 = interfaceinvoke $stack86#24.<java.util.Map: boolean isEmpty()>();

        $stack22#26 = $stack22#25;

        if $stack22#26 == 0 goto label12;

        $stack75 = interfaceinvoke map2#22.<java.util.Map: boolean isEmpty()>();

        if $stack75 == 0 goto label12;

        $stack77 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitedFinder()>();

        $stack78 = staticinvoke <jdk.internal.module.IllegalAccessMaps: jdk.internal.module.IllegalAccessMaps generate(java.lang.module.ModuleFinder)>($stack77);

        maps#27 = $stack78;

        $stack79 = virtualinvoke maps#27.<jdk.internal.module.IllegalAccessMaps: java.util.Map concealedPackagesToOpen()>();

        map1#17 = $stack79;

        $stack80 = virtualinvoke maps#27.<jdk.internal.module.IllegalAccessMaps: java.util.Map exportedPackagesToOpen()>();

        map2#22 = $stack80;

     label12:
        $stack76#28 = bootLayer;

        $stack76#29 = $stack76#28;

        $stack23#30 = virtualinvoke $stack76#29.<java.lang.ModuleLayer: java.util.Set modules()>();

        $stack23#31 = $stack23#30;

        $stack24#32 = interfaceinvoke $stack23#31.<java.util.Set: java.util.Iterator iterator()>();

        $stack24#33 = $stack24#32;

        maps#34 = $stack24#33;

     label13:
        $stack40#35 = maps#34;

        $stack40#36 = $stack40#35;

        $stack25#37 = interfaceinvoke $stack40#36.<java.util.Iterator: boolean hasNext()>();

        $stack25#38 = $stack25#37;

        if $stack25#38 == 0 goto label22;

        $stack26 = interfaceinvoke maps#34.<java.util.Iterator: java.lang.Object next()>();

        m = (java.lang.Module) $stack26;

        $stack27 = virtualinvoke m.<java.lang.Module: java.lang.module.ModuleDescriptor getDescriptor()>();

        descriptor = $stack27;

        $stack28 = virtualinvoke m.<java.lang.Module: java.lang.String getName()>();

        name = $stack28;

        $stack29 = virtualinvoke descriptor.<java.lang.module.ModuleDescriptor: boolean isOpen()>();

        if $stack29 == 0 goto label14;

        goto label13;

     label14:
        if upgradeModulePath == null goto label15;

        $stack66 = interfaceinvoke upgradeModulePath.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(name);

        $stack67 = virtualinvoke $stack66.<java.util.Optional: boolean isPresent()>();

        if $stack67 == 0 goto label15;

        goto label13;

     label15:
        $stack69 = map1#17;

        $stack68 = name;

        $stack30 = staticinvoke <java.util.Set: java.util.Set of()>();

        $stack31 = interfaceinvoke $stack69.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($stack68, $stack30);

        $stack70 = (java.util.Set) $stack31;

        concealedPackages#39 = $stack70;

        $stack72 = map2#22;

        $stack71 = name;

        $stack32 = staticinvoke <java.util.Set: java.util.Set of()>();

        $stack33 = interfaceinvoke $stack72.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($stack71, $stack32);

        $stack73 = (java.util.Set) $stack33;

        exportedPackages#40 = $stack73;

        $stack74 = extraExportsOrOpens;

        if $stack74 == 0 goto label21;

        $stack41 = new java.util.HashSet;

        specialinvoke $stack41.<java.util.HashSet: void <init>(java.util.Collection)>(concealedPackages#39);

        concealedPackages#39 = $stack41;

        $stack42 = new java.util.HashSet;

        specialinvoke $stack42.<java.util.HashSet: void <init>(java.util.Collection)>(exportedPackages#40);

        exportedPackages#40 = $stack42;

        $stack43 = interfaceinvoke concealedPackages#39.<java.util.Set: java.util.Iterator iterator()>();

        iterator#41 = $stack43;

     label16:
        $stack64 = iterator#41;

        $stack44 = interfaceinvoke $stack64.<java.util.Iterator: boolean hasNext()>();

        if $stack44 == 0 goto label18;

        $stack61 = interfaceinvoke iterator#41.<java.util.Iterator: java.lang.Object next()>();

        pn#42 = (java.lang.String) $stack61;

        $stack62 = staticinvoke <jdk.internal.loader.BootLoader: java.lang.Module getUnnamedModule()>();

        $stack63 = virtualinvoke m.<java.lang.Module: boolean isExported(java.lang.String,java.lang.Module)>(pn#42, $stack62);

        if $stack63 == 0 goto label17;

        interfaceinvoke iterator#41.<java.util.Iterator: void remove()>();

        $stack65 = interfaceinvoke exportedPackages#40.<java.util.Set: boolean add(java.lang.Object)>(pn#42);

     label17:
        goto label16;

     label18:
        $stack45 = interfaceinvoke exportedPackages#40.<java.util.Set: java.util.Iterator iterator()>();

        iterator#43 = $stack45;

     label19:
        $stack60 = iterator#43;

        $stack46 = interfaceinvoke $stack60.<java.util.Iterator: boolean hasNext()>();

        if $stack46 == 0 goto label21;

        $stack57 = interfaceinvoke iterator#43.<java.util.Iterator: java.lang.Object next()>();

        pn#44 = (java.lang.String) $stack57;

        $stack58 = staticinvoke <jdk.internal.loader.BootLoader: java.lang.Module getUnnamedModule()>();

        $stack59 = virtualinvoke m.<java.lang.Module: boolean isOpen(java.lang.String,java.lang.Module)>(pn#44, $stack58);

        if $stack59 == 0 goto label20;

        interfaceinvoke iterator#43.<java.util.Iterator: void remove()>();

     label20:
        goto label19;

     label21:
        $stack49 = builder#12;

        $stack47 = m;

        $stack48 = concealedPackages#39;

        $stack34 = virtualinvoke $stack49.<jdk.internal.module.IllegalAccessLogger$Builder: jdk.internal.module.IllegalAccessLogger$Builder logAccessToConcealedPackages(java.lang.Module,java.util.Set)>($stack47, $stack48);

        $stack52 = builder#12;

        $stack50 = m;

        $stack51 = exportedPackages#40;

        $stack35 = virtualinvoke $stack52.<jdk.internal.module.IllegalAccessLogger$Builder: jdk.internal.module.IllegalAccessLogger$Builder logAccessToExportedPackages(java.lang.Module,java.util.Set)>($stack50, $stack51);

        $stack36 = staticinvoke <jdk.internal.misc.SharedSecrets: jdk.internal.misc.JavaLangAccess getJavaLangAccess()>();

        iterator#45 = $stack36;

        $stack56 = iterator#45;

        $stack55 = m;

        $stack53 = concealedPackages#39;

        $stack37 = interfaceinvoke $stack53.<java.util.Set: java.util.Iterator iterator()>();

        $stack54 = exportedPackages#40;

        $stack38 = interfaceinvoke $stack54.<java.util.Set: java.util.Iterator iterator()>();

        $stack39 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Iterator concat(java.util.Iterator,java.util.Iterator)>($stack37, $stack38);

        interfaceinvoke $stack56.<jdk.internal.misc.JavaLangAccess: void addOpensToAllUnnamed(java.lang.Module,java.util.Iterator)>($stack55, $stack39);

        goto label13;

     label22:
        virtualinvoke builder#12.<jdk.internal.module.IllegalAccessLogger$Builder: void complete()>();

        return;

        nop;
    }

    private static java.util.Map decode(java.lang.String, java.lang.String, boolean)
    {
        byte $stack69, $stack52#13, $stack52#14, $stack57#26, $stack57#27, $b0;
        bottom_type index, value, $stack26, $stack27, ntargets, $stack28, l13, $stack45, $stack46, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57;
        java.util.Map $stack79;
        java.lang.StringBuilder $stack15, $stack16, $stack17, $stack29, $stack30, $stack31, $stack35, $stack36, $stack38, $stack39, $stack40, $stack58, $stack59, $stack60, $stack62, $u0, $u2, $u3, $u4;
        java.lang.String prefix, $stack18, $stack19, $stack22, key, $stack24, rhs, regex, $stack32, $stack33, $stack34, $stack37, $stack41, $stack42, s, $stack61, $stack63, $stack64, $stack65, $stack67, $stack68, $stack71, $stack74, $stack75, $stack76, $stack77, value#2, $stack49#5, $stack49#6, $stack54#16, $stack54#17, $stack53#18, $stack53#19;
        boolean $stack25, allowDuplicates, $stack44, $stack47, $stack48, $stack66, $stack72;
        java.util.List values, $stack51#11, $stack51#12;
        java.util.HashMap $stack20, map, $stack50#3, $stack50#4, $u1;
        java.lang.String[] l11, $stack28#20, $stack28#21, $stack55#22, $stack55#23;
        java.util.function.Function $stack26#7, $stack26#8;
        int $stack21, pos, $stack23, l12, $stack43, $stack70, $stack73, $stack78, index#1, ntargets#15, $stack56#24, $stack56#25, l13#28, $stack46#29, $stack46#30, $stack45#31, $stack45#32, $i0;
        java.lang.Object $stack27#9, $stack27#10;

        prefix := @parameter0: java.lang.String;

        regex := @parameter1: java.lang.String;

        allowDuplicates := @parameter2: boolean;

        index#1 = 0;

        $u0 = new java.lang.StringBuilder;

        $stack15 = $u0;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index#1);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($stack18);

        value#2 = $stack19;

        if value#2 != null goto label01;

        $stack79 = staticinvoke <java.util.Map: java.util.Map of()>();

        return $stack79;

     label01:
        $u1 = new java.util.HashMap;

        $stack20 = $u1;

        specialinvoke $u1.<java.util.HashMap: void <init>()>();

        map = $stack20;

     label02:
        $stack34 = value#2;

        if $stack34 == null goto label11;

        $stack21 = virtualinvoke value#2.<java.lang.String: int indexOf(int)>(61);

        pos = $stack21;

        $b0 = -1;

        $i0 = (int) $b0;

        if pos != $i0 goto label03;

        $stack76 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(prefix);

        $stack77 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($stack76, "<module>=<value>", value#2);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack77);

     label03:
        $stack78 = pos;

        if $stack78 != 0 goto label04;

        $stack67 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(prefix);

        $stack68 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($stack67, "<module>=<value>", value#2);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack68);

     label04:
        $stack71 = value#2;

        $stack69 = 0;

        $stack70 = pos;

        $stack22 = virtualinvoke $stack71.<java.lang.String: java.lang.String substring(int,int)>($stack69, $stack70);

        key = $stack22;

        $stack74 = value#2;

        $stack73 = pos;

        $stack72 = 1;

        $stack23 = $stack73 + $stack72;

        $stack24 = virtualinvoke $stack74.<java.lang.String: java.lang.String substring(int)>($stack23);

        rhs = $stack24;

        $stack75 = rhs;

        $stack25 = virtualinvoke $stack75.<java.lang.String: boolean isEmpty()>();

        if $stack25 == 0 goto label05;

        $stack64 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(prefix);

        $stack65 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($stack64, "<module>=<value>", value#2);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack65);

     label05:
        $stack66 = allowDuplicates;

        if $stack66 != 0 goto label06;

        $stack48 = interfaceinvoke map.<java.util.Map: boolean containsKey(java.lang.Object)>(key);

        if $stack48 == 0 goto label06;

        $u2 = new java.lang.StringBuilder;

        $stack58 = $u2;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified more than once to ");

        $stack61 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(prefix);

        $stack62 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack61);

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack63);

     label06:
        $stack50#3 = map;

        $stack50#4 = $stack50#3;

        $stack49#5 = key;

        $stack49#6 = $stack49#5;

        $stack26#7 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_decode_8__358: java.util.function.Function bootstrap$()>();

        $stack26#8 = $stack26#7;

        $stack27#9 = interfaceinvoke $stack50#4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($stack49#6, $stack26#8);

        $stack27#10 = $stack27#9;

        $stack51#11 = (java.util.List) $stack27#10;

        $stack51#12 = $stack51#11;

        values = $stack51#12;

        $stack52#13 = 0;

        $stack52#14 = $stack52#13;

        ntargets#15 = $stack52#14;

        $stack54#16 = rhs;

        $stack54#17 = $stack54#16;

        $stack53#18 = regex;

        $stack53#19 = $stack53#18;

        $stack28#20 = virtualinvoke $stack54#17.<java.lang.String: java.lang.String[] split(java.lang.String)>($stack53#19);

        $stack28#21 = $stack28#20;

        l11 = $stack28#21;

        $stack55#22 = l11;

        $stack55#23 = $stack55#22;

        $stack56#24 = lengthof $stack55#23;

        $stack56#25 = $stack56#24;

        l12 = $stack56#25;

        $stack57#26 = 0;

        $stack57#27 = $stack57#26;

        l13#28 = $stack57#27;

     label07:
        $stack46#29 = l13#28;

        $stack46#30 = $stack46#29;

        $stack45#31 = l12;

        $stack45#32 = $stack45#31;

        if $stack46#30 >= $stack45#32 goto label09;

        s = l11[l13#28];

        $stack44 = virtualinvoke s.<java.lang.String: boolean isEmpty()>();

        if $stack44 != 0 goto label08;

        $stack47 = interfaceinvoke values.<java.util.List: boolean add(java.lang.Object)>(s);

        ntargets#15 = ntargets#15 + 1;

     label08:
        l13#28 = l13#28 + 1;

        goto label07;

     label09:
        if ntargets#15 != 0 goto label10;

        $u3 = new java.lang.StringBuilder;

        $stack35 = $u3;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target must be specified: ");

        $stack37 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(prefix);

        $stack38 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack37);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value#2);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($stack41);

     label10:
        index#1 = index#1 + 1;

        $u4 = new java.lang.StringBuilder;

        $stack29 = $u4;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack42 = prefix;

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack43 = index#1;

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack43);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack33 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($stack32);

        value#2 = $stack33;

        goto label02;

     label11:
        return map;

        nop;
    }

    private static java.util.Map decode(java.lang.String)
    {
        java.lang.String prefix;
        java.util.Map $stack1;

        prefix := @parameter0: java.lang.String;

        $stack1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String,java.lang.String,boolean)>(prefix, ",", 1);

        return $stack1;

        nop;
    }

    private static java.lang.String getAndRemoveProperty(java.lang.String)
    {
        java.util.Properties $stack1;
        java.lang.Object $stack2;
        java.lang.String key, $stack3;

        key := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $stack2 = virtualinvoke $stack1.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(key);

        $stack3 = (java.lang.String) $stack2;

        return $stack3;

        nop;
    }

    private static void checkIncubatingStatus(java.lang.module.Configuration)
    {
        java.lang.module.ModuleDescriptor $stack17;
        java.lang.module.ModuleReference $stack14, mref;
        java.lang.module.ResolvedModule resolvedModule;
        bottom_type incubating;
        java.lang.String $stack12, $stack18, mn, $stack23, incubating#1;
        boolean $stack8, $stack15;
        java.util.Iterator $stack7, l2, $stack16;
        java.util.Set $stack6;
        java.lang.module.Configuration cf;
        java.lang.StringBuilder $stack9, $stack10, $stack11, $stack19, $stack20, $stack21, $stack22;
        java.lang.Object $stack13;

        cf := @parameter0: java.lang.module.Configuration;

        incubating#1 = null;

        $stack6 = virtualinvoke cf.<java.lang.module.Configuration: java.util.Set modules()>();

        $stack7 = interfaceinvoke $stack6.<java.util.Set: java.util.Iterator iterator()>();

        l2 = $stack7;

     label1:
        $stack16 = l2;

        $stack8 = interfaceinvoke $stack16.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label4;

        $stack13 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        resolvedModule = (java.lang.module.ResolvedModule) $stack13;

        $stack14 = virtualinvoke resolvedModule.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        mref = $stack14;

        $stack15 = staticinvoke <jdk.internal.module.ModuleResolution: boolean hasIncubatingWarning(java.lang.module.ModuleReference)>(mref);

        if $stack15 == 0 goto label3;

        $stack17 = virtualinvoke mref.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $stack18 = virtualinvoke $stack17.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        mn = $stack18;

        if incubating#1 != null goto label2;

        incubating#1 = mn;

        goto label3;

     label2:
        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(incubating#1);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(mn);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        incubating#1 = $stack23;

     label3:
        goto label1;

     label4:
        if incubating#1 == null goto label5;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using incubator modules: ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(incubating#1);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warn(java.lang.String)>($stack12);

     label5:
        return;

        nop;
    }

    static void fail(java.lang.String)
    {
        java.lang.RuntimeException $stack1;
        java.lang.String m;

        m := @parameter0: java.lang.String;

        $stack1 = new java.lang.RuntimeException;

        specialinvoke $stack1.<java.lang.RuntimeException: void <init>(java.lang.String)>(m);

        throw $stack1;

        nop;
    }

    static void warn(java.lang.String)
    {
        java.io.PrintStream $stack2;
        java.lang.StringBuilder $stack1, $stack3, $stack4;
        java.lang.String m, $stack5;

        m := @parameter0: java.lang.String;

        $stack2 = <java.lang.System: java.io.PrintStream err>;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: ");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(m);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack2.<java.io.PrintStream: void println(java.lang.String)>($stack5);

        return;

        nop;
    }

    static void warnUnknownModule(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4, $stack5, $stack6;
        java.lang.String mn, option, $stack7;

        option := @parameter0: java.lang.String;

        mn := @parameter1: java.lang.String;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown module: ");

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(mn);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified to ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(option);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warn(java.lang.String)>($stack7);

        return;

        nop;
    }

    static java.lang.String unableToParse(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;
        java.lang.String option, text, value, $stack10;

        option := @parameter0: java.lang.String;

        text := @parameter1: java.lang.String;

        value := @parameter2: java.lang.String;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse ");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(option);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(text);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;

        nop;
    }

    static java.lang.String option(java.lang.String)
    {
        java.lang.IllegalArgumentException $stack5;
        byte l2#1, $stack6#2, $stack6#3;
        bottom_type l2, $stack6;
        int $stack3;
        java.lang.String prefix, l1;
        boolean $stack4, $stack7, $stack8, $stack9, $stack10;

        prefix := @parameter0: java.lang.String;

        l1 = prefix;

        l2#1 = -1;

        $stack3 = virtualinvoke l1.<java.lang.String: int hashCode()>();

        lookupswitch($stack3)
        {
            case -1634796447: goto label05;
            case 693588459: goto label04;
            case 919126689: goto label02;
            case 994726637: goto label03;
            case 1390198411: goto label01;
            default: goto label06;
        };

     label01:
        $stack4 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addexports.");

        if $stack4 == 0 goto label06;

        l2#1 = 0;

        goto label06;

     label02:
        $stack8 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addopens.");

        if $stack8 == 0 goto label06;

        l2#1 = 1;

        goto label06;

     label03:
        $stack7 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addreads.");

        if $stack7 == 0 goto label06;

        l2#1 = 2;

        goto label06;

     label04:
        $stack9 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.patch.");

        if $stack9 == 0 goto label06;

        l2#1 = 3;

        goto label06;

     label05:
        $stack10 = virtualinvoke l1.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addmods.");

        if $stack10 == 0 goto label06;

        l2#1 = 4;

     label06:
        $stack6#2 = l2#1;

        $stack6#3 = $stack6#2;

        tableswitch($stack6#3)
        {
            case 0: goto label07;
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label12;
        };

     label07:
        return "--add-exports";

     label08:
        return "--add-opens";

     label09:
        return "--add-reads";

     label10:
        return "--patch-module";

     label11:
        return "--add-modules";

     label12:
        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(prefix);

        throw $stack5;

        nop;
    }

    static java.util.Iterator concat(java.util.Iterator, java.util.Iterator)
    {
        jdk.internal.module.ModuleBootstrap$2 $stack2;
        java.util.Iterator iterator1, iterator2;

        iterator1 := @parameter0: java.util.Iterator;

        iterator2 := @parameter1: java.util.Iterator;

        $stack2 = new jdk.internal.module.ModuleBootstrap$2;

        specialinvoke $stack2.<jdk.internal.module.ModuleBootstrap$2: void <init>(java.util.Iterator,java.util.Iterator)>(iterator1, iterator2);

        return $stack2;

        nop;
    }

    public static java.util.List lambda$decode$8(java.lang.String)
    {
        java.lang.String k;
        java.util.ArrayList $stack1;

        k := @parameter0: java.lang.String;

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>()>();

        return $stack1;

        nop;
    }

    public static void lambda$limitFinder$7(java.util.Map, java.lang.module.ModuleReference)
    {
        java.util.Map map;
        java.lang.module.ModuleDescriptor $stack2;
        java.lang.module.ModuleReference mref;
        java.lang.Object $stack4;
        java.lang.String $stack3;

        map := @parameter0: java.util.Map;

        mref := @parameter1: java.lang.module.ModuleReference;

        $stack2 = virtualinvoke mref.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $stack3 = virtualinvoke $stack2.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $stack4 = interfaceinvoke map.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($stack3, mref);

        return;

        nop;
    }

    public static void lambda$limitFinder$6(java.util.Map, java.lang.module.ModuleReference)
    {
        java.util.Map map;
        java.lang.module.ModuleDescriptor $stack2;
        java.lang.module.ModuleReference mref;
        java.lang.Object $stack4;
        java.lang.String $stack3;

        map := @parameter0: java.util.Map;

        mref := @parameter1: java.lang.module.ModuleReference;

        $stack2 = virtualinvoke mref.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $stack3 = virtualinvoke $stack2.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $stack4 = interfaceinvoke map.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack3, mref);

        return;

        nop;
    }

    public static void lambda$boot$5(java.lang.String)
    {
        java.lang.String mn;

        mn := @parameter0: java.lang.String;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>("--patch-module", mn);

        return;

        nop;
    }

    public static boolean lambda$boot$4(java.lang.module.Configuration, java.lang.String)
    {
        bottom_type $stack4;
        java.util.Optional $stack2;
        java.lang.module.Configuration cf;
        java.lang.String mn;
        boolean $stack3, $stack4#1;

        cf := @parameter0: java.lang.module.Configuration;

        mn := @parameter1: java.lang.String;

        $stack2 = virtualinvoke cf.<java.lang.module.Configuration: java.util.Optional findModule(java.lang.String)>(mn);

        $stack3 = virtualinvoke $stack2.<java.util.Optional: boolean isPresent()>();

        if $stack3 != 0 goto label1;

        $stack4#1 = 1;

        goto label2;

     label1:
        $stack4#1 = 0;

     label2:
        return $stack4#1;

        nop;
    }

    public static void lambda$boot$3(java.util.Set, java.lang.String)
    {
        java.util.Set roots;
        java.lang.String mn;
        boolean $stack2;

        roots := @parameter0: java.util.Set;

        mn := @parameter1: java.lang.String;

        $stack2 = interfaceinvoke roots.<java.util.Set: boolean add(java.lang.Object)>(mn);

        return;

        nop;
    }

    public static boolean lambda$boot$2(java.lang.module.ModuleFinder, java.lang.String)
    {
        java.lang.module.ModuleFinder f;
        java.util.Optional $stack2;
        java.lang.String mn;
        boolean $stack3;

        f := @parameter0: java.lang.module.ModuleFinder;

        mn := @parameter1: java.lang.String;

        $stack2 = interfaceinvoke f.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(mn);

        $stack3 = virtualinvoke $stack2.<java.util.Optional: boolean isPresent()>();

        return $stack3;

        nop;
    }

    public static void lambda$boot$1(java.util.Set, java.lang.String)
    {
        java.util.Set roots;
        java.lang.String mn;
        boolean $stack2;

        roots := @parameter0: java.util.Set;

        mn := @parameter1: java.lang.String;

        $stack2 = interfaceinvoke roots.<java.util.Set: boolean add(java.lang.Object)>(mn);

        return;

        nop;
    }

    public static boolean lambda$boot$0(java.lang.module.ModuleFinder, java.lang.String)
    {
        java.lang.module.ModuleFinder f;
        java.util.Optional $stack2;
        java.lang.String mn;
        boolean $stack3;

        f := @parameter0: java.lang.module.ModuleFinder;

        mn := @parameter1: java.lang.String;

        $stack2 = interfaceinvoke f.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(mn);

        $stack3 = virtualinvoke $stack2.<java.util.Optional: boolean isPresent()>();

        return $stack3;

        nop;
    }

    static void <clinit>()
    {
        jdk.internal.misc.JavaLangModuleAccess $stack0;
        jdk.internal.module.ModulePatcher $stack1;

        <jdk.internal.module.ModuleBootstrap: java.lang.String PATCH_MODULE> = "--patch-module";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_READS> = "--add-reads";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_OPENS> = "--add-opens";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_EXPORTS> = "--add-exports";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_MODULES> = "--add-modules";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_MODULE_PATH> = "ALL-MODULE-PATH";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_SYSTEM> = "ALL-SYSTEM";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_UNNAMED> = "ALL-UNNAMED";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_DEFAULT> = "ALL-DEFAULT";

        <jdk.internal.module.ModuleBootstrap: java.lang.String JAVA_BASE> = "java.base";

        $stack0 = staticinvoke <jdk.internal.misc.SharedSecrets: jdk.internal.misc.JavaLangModuleAccess getJavaLangModuleAccess()>();

        <jdk.internal.module.ModuleBootstrap: jdk.internal.misc.JavaLangModuleAccess JLMA> = $stack0;

        $stack1 = staticinvoke <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher initModulePatcher()>();

        <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher> = $stack1;

        return;
    }
}
