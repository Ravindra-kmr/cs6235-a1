public class jdk.internal.util.xml.impl.XMLWriter extends java.lang.Object
{
    private java.io.Writer _writer;
    private java.nio.charset.CharsetEncoder _encoder;

    public void <init>(java.io.OutputStream, java.lang.String, java.nio.charset.Charset) throws jdk.internal.util.xml.XMLStreamException
    {
        java.io.OutputStream os;
        jdk.internal.util.xml.XMLStreamException $stack8;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.nio.charset.Charset cs;
        java.nio.charset.CharsetEncoder $stack5;
        java.io.Writer $stack6;
        java.lang.String encoding;
        java.io.UnsupportedEncodingException $stack7, ex;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        os := @parameter0: java.io.OutputStream;

        encoding := @parameter1: java.lang.String;

        cs := @parameter2: java.nio.charset.Charset;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.util.xml.impl.XMLWriter: java.nio.charset.CharsetEncoder _encoder> = null;

        $stack5 = virtualinvoke cs.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        this.<jdk.internal.util.xml.impl.XMLWriter: java.nio.charset.CharsetEncoder _encoder> = $stack5;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer getWriter(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)>(os, encoding, cs);

        this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer> = $stack6;

     label2:
        goto label4;

     label3:
        $stack7 := @caughtexception;

        ex = $stack7;

        $stack8 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack8.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.Throwable)>(ex);

        throw $stack8;

     label4:
        return;

        nop;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public boolean canEncode(char)
    {
        java.nio.charset.CharsetEncoder $stack2, $stack3;
        jdk.internal.util.xml.impl.XMLWriter this;
        char ch;
        boolean $stack4;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        ch := @parameter0: char;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLWriter: java.nio.charset.CharsetEncoder _encoder>;

        if $stack2 != null goto label1;

        return 0;

     label1:
        $stack3 = this.<jdk.internal.util.xml.impl.XMLWriter: java.nio.charset.CharsetEncoder _encoder>;

        $stack4 = virtualinvoke $stack3.<java.nio.charset.CharsetEncoder: boolean canEncode(char)>(ch);

        return $stack4;

        nop;
    }

    public void write(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack6;
        java.io.Writer $stack3;
        char[] $stack4;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack5, e;
        java.lang.String s;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        s := @parameter0: java.lang.String;

     label1:
        $stack3 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        $stack4 = virtualinvoke s.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $stack3.<java.io.Writer: void write(char[])>($stack4);

     label2:
        goto label4;

     label3:
        $stack5 := @caughtexception;

        e = $stack5;

        $stack6 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack6.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String,java.lang.Throwable)>("I/O error", e);

        throw $stack6;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void write(java.lang.String, int, int) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack7;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack6, e;
        int off, len;
        java.io.Writer $stack5;
        java.lang.String str;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        str := @parameter0: java.lang.String;

        off := @parameter1: int;

        len := @parameter2: int;

     label1:
        $stack5 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        virtualinvoke $stack5.<java.io.Writer: void write(java.lang.String,int,int)>(str, off, len);

     label2:
        goto label4;

     label3:
        $stack6 := @caughtexception;

        e = $stack6;

        $stack7 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack7.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String,java.lang.Throwable)>("I/O error", e);

        throw $stack7;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void write(char[], int, int) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack7;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack6, e;
        int off, len;
        java.io.Writer $stack5;
        char[] cbuf;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        cbuf := @parameter0: char[];

        off := @parameter1: int;

        len := @parameter2: int;

     label1:
        $stack5 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        virtualinvoke $stack5.<java.io.Writer: void write(char[],int,int)>(cbuf, off, len);

     label2:
        goto label4;

     label3:
        $stack6 := @caughtexception;

        e = $stack6;

        $stack7 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack7.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String,java.lang.Throwable)>("I/O error", e);

        throw $stack7;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void write(int) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack5;
        int b;
        java.io.Writer $stack3;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack4, e;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        b := @parameter0: int;

     label1:
        $stack3 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        virtualinvoke $stack3.<java.io.Writer: void write(int)>(b);

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

        e = $stack4;

        $stack5 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack5.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String,java.lang.Throwable)>("I/O error", e);

        throw $stack5;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void flush() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack4;
        java.io.Writer $stack2;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack3, ex;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

     label1:
        $stack2 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        virtualinvoke $stack2.<java.io.Writer: void flush()>();

     label2:
        goto label4;

     label3:
        $stack3 := @caughtexception;

        ex = $stack3;

        $stack4 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack4.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.Throwable)>(ex);

        throw $stack4;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void close() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack4;
        java.io.Writer $stack2;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack3, ex;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

     label1:
        $stack2 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        virtualinvoke $stack2.<java.io.Writer: void close()>();

     label2:
        goto label4;

     label3:
        $stack3 := @caughtexception;

        ex = $stack3;

        $stack4 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack4.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.Throwable)>(ex);

        throw $stack4;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void nl() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack6;
        java.io.Writer $stack4;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.IOException $stack5, e;
        java.lang.String $stack3, lineEnd;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        $stack3 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        lineEnd = $stack3;

     label1:
        $stack4 = this.<jdk.internal.util.xml.impl.XMLWriter: java.io.Writer _writer>;

        virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>(lineEnd);

     label2:
        goto label4;

     label3:
        $stack5 := @caughtexception;

        e = $stack5;

        $stack6 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack6.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String,java.lang.Throwable)>("I/O error", e);

        throw $stack6;

     label4:
        return;

        nop;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.io.Writer getWriter(java.io.OutputStream, java.lang.String, java.nio.charset.Charset) throws jdk.internal.util.xml.XMLStreamException, java.io.UnsupportedEncodingException
    {
        java.io.OutputStream output;
        jdk.internal.util.xml.impl.XMLWriter this;
        java.io.BufferedOutputStream $stack5, $stack7;
        java.nio.charset.Charset cs;
        java.io.OutputStreamWriter $stack4, $stack6;
        java.lang.String encoding;

        this := @this: jdk.internal.util.xml.impl.XMLWriter;

        output := @parameter0: java.io.OutputStream;

        encoding := @parameter1: java.lang.String;

        cs := @parameter2: java.nio.charset.Charset;

        if cs == null goto label1;

        $stack6 = new java.io.OutputStreamWriter;

        $stack7 = new java.io.BufferedOutputStream;

        specialinvoke $stack7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(output);

        specialinvoke $stack6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($stack7, cs);

        return $stack6;

     label1:
        $stack4 = new java.io.OutputStreamWriter;

        $stack5 = new java.io.BufferedOutputStream;

        specialinvoke $stack5.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(output);

        specialinvoke $stack4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($stack5, encoding);

        return $stack4;

        nop;
    }
}
