public class jdk.internal.org.objectweb.asm.TypePath extends java.lang.Object
{
    public static final int ARRAY_ELEMENT;
    public static final int INNER_TYPE;
    public static final int WILDCARD_BOUND;
    public static final int TYPE_ARGUMENT;
    byte[] b;
    int offset;

    void <init>(byte[], int)
    {
        int offset;
        byte[] b;
        jdk.internal.org.objectweb.asm.TypePath this;

        this := @this: jdk.internal.org.objectweb.asm.TypePath;

        b := @parameter0: byte[];

        offset := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.org.objectweb.asm.TypePath: byte[] b> = b;

        this.<jdk.internal.org.objectweb.asm.TypePath: int offset> = offset;

        return;

        nop;
    }

    public int getLength()
    {
        byte[] $stack2;
        jdk.internal.org.objectweb.asm.TypePath this;
        byte $stack3;
        int $stack1, $i0;

        this := @this: jdk.internal.org.objectweb.asm.TypePath;

        $stack2 = this.<jdk.internal.org.objectweb.asm.TypePath: byte[] b>;

        $stack1 = this.<jdk.internal.org.objectweb.asm.TypePath: int offset>;

        $stack3 = $stack2[$stack1];

        $i0 = (int) $stack3;

        return $i0;

        nop;
    }

    public int getStep(int)
    {
        byte[] $stack6;
        jdk.internal.org.objectweb.asm.TypePath this;
        byte $stack7;
        int index, $stack2, $stack3, $stack4, $stack5, $i0;

        this := @this: jdk.internal.org.objectweb.asm.TypePath;

        index := @parameter0: int;

        $stack6 = this.<jdk.internal.org.objectweb.asm.TypePath: byte[] b>;

        $stack3 = this.<jdk.internal.org.objectweb.asm.TypePath: int offset>;

        $stack2 = 2 * index;

        $stack4 = $stack3 + $stack2;

        $stack5 = $stack4 + 1;

        $stack7 = $stack6[$stack5];

        $i0 = (int) $stack7;

        return $i0;

        nop;
    }

    public int getStepArgument(int)
    {
        byte[] $stack6;
        jdk.internal.org.objectweb.asm.TypePath this;
        byte $stack7;
        int index, $stack2, $stack3, $stack4, $stack5, $i0;

        this := @this: jdk.internal.org.objectweb.asm.TypePath;

        index := @parameter0: int;

        $stack6 = this.<jdk.internal.org.objectweb.asm.TypePath: byte[] b>;

        $stack3 = this.<jdk.internal.org.objectweb.asm.TypePath: int offset>;

        $stack2 = 2 * index;

        $stack4 = $stack3 + $stack2;

        $stack5 = $stack4 + 2;

        $stack7 = $stack6[$stack5];

        $i0 = (int) $stack7;

        return $i0;

        nop;
    }

    public static jdk.internal.org.objectweb.asm.TypePath fromString(java.lang.String)
    {
        byte[] $stack13, $stack15;
        byte $stack12;
        boolean $stack6;
        jdk.internal.org.objectweb.asm.TypePath $stack14, $u1;
        jdk.internal.org.objectweb.asm.ByteVector $stack8, out, $stack24#9, $stack24#10, $u0;
        int $stack7, n, $stack10, $stack11, $stack16, $stack18, $stack19, $stack28, $stack29, $stack30, $stack31, i#1, typeArg#3, $stack27#5, $stack27#6, $stack26#7, $stack26#8, $stack23#13, $stack23#14, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String typePath;
        char $stack17, $stack21, $stack25, c#2, c#4;

        typePath := @parameter0: java.lang.String;

        if typePath == null goto label01;

        $stack6 = virtualinvoke typePath.<java.lang.String: boolean isEmpty()>();

        if $stack6 == 0 goto label02;

     label01:
        return null;

     label02:
        $stack7 = virtualinvoke typePath.<java.lang.String: int length()>();

        n = $stack7;

        $u0 = new jdk.internal.org.objectweb.asm.ByteVector;

        $stack8 = $u0;

        specialinvoke $u0.<jdk.internal.org.objectweb.asm.ByteVector: void <init>(int)>(n);

        out = $stack8;

        virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putByte(int)>(0);

        i#1 = 0;

     label03:
        $stack19 = i#1;

        $stack18 = n;

        if $stack19 >= $stack18 goto label11;

        $stack16 = i#1;

        i#1 = i#1 + 1;

        $stack17 = virtualinvoke typePath.<java.lang.String: char charAt(int)>($stack16);

        c#2 = $stack17;

        $i0 = (int) c#2;

        if $i0 != 91 goto label04;

        virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(0, 0);

        goto label10;

     label04:
        $i1 = (int) c#2;

        if $i1 != 46 goto label05;

        virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(1, 0);

        goto label10;

     label05:
        $i2 = (int) c#2;

        if $i2 != 42 goto label06;

        virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(2, 0);

        goto label10;

     label06:
        $i3 = (int) c#2;

        if $i3 < 48 goto label10;

        $i4 = (int) c#2;

        if $i4 > 57 goto label10;

        $i5 = (int) c#2;

        typeArg#3 = $i5 - 48;

     label07:
        $stack31 = i#1;

        $stack30 = n;

        if $stack31 >= $stack30 goto label08;

        $stack25 = virtualinvoke typePath.<java.lang.String: char charAt(int)>(i#1);

        c#4 = $stack25;

        $i6 = (int) $stack25;

        if $i6 < 48 goto label08;

        $i7 = (int) c#4;

        if $i7 > 57 goto label08;

        $stack28 = typeArg#3 * 10;

        $i8 = (int) c#4;

        $stack29 = $stack28 + $i8;

        typeArg#3 = $stack29 - 48;

        i#1 = i#1 + 1;

        goto label07;

     label08:
        $stack27#5 = i#1;

        $stack27#6 = $stack27#5;

        $stack26#7 = n;

        $stack26#8 = $stack26#7;

        if $stack27#6 >= $stack26#8 goto label09;

        $stack21 = virtualinvoke typePath.<java.lang.String: char charAt(int)>(i#1);

        $i9 = (int) $stack21;

        if $i9 != 59 goto label09;

        i#1 = i#1 + 1;

     label09:
        $stack24#9 = out;

        $stack24#10 = $stack24#9;

        $stack23#13 = typeArg#3;

        $stack23#14 = $stack23#13;

        virtualinvoke $stack24#10.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector put11(int,int)>(3, $stack23#14);

     label10:
        goto label03;

     label11:
        $stack13 = out.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack10 = out.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack11 = $stack10 / 2;

        $stack12 = (byte) $stack11;

        $stack13[0] = $stack12;

        $u1 = new jdk.internal.org.objectweb.asm.TypePath;

        $stack14 = $u1;

        $stack15 = out.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        specialinvoke $u1.<jdk.internal.org.objectweb.asm.TypePath: void <init>(byte[],int)>($stack15, 0);

        return $stack14;
    }

    public java.lang.String toString()
    {
        bottom_type i;
        int $stack4, length, $stack6, $stack8, $stack9, $stack12, $stack13, i#1;
        java.lang.String $stack7;
        jdk.internal.org.objectweb.asm.TypePath this;
        java.lang.StringBuilder $stack5, result, $stack10, $stack11, $stack14, $stack15, $stack16, $stack17;

        this := @this: jdk.internal.org.objectweb.asm.TypePath;

        $stack4 = virtualinvoke this.<jdk.internal.org.objectweb.asm.TypePath: int getLength()>();

        length = $stack4;

        $stack5 = new java.lang.StringBuilder;

        $stack6 = length * 2;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>(int)>($stack6);

        result = $stack5;

        i#1 = 0;

     label1:
        $stack13 = i#1;

        $stack12 = length;

        if $stack13 >= $stack12 goto label8;

        $stack8 = virtualinvoke this.<jdk.internal.org.objectweb.asm.TypePath: int getStep(int)>(i#1);

        tableswitch($stack8)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        $stack16 = virtualinvoke result.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        goto label7;

     label3:
        $stack15 = virtualinvoke result.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        goto label7;

     label4:
        $stack14 = virtualinvoke result.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(42);

        goto label7;

     label5:
        $stack9 = virtualinvoke this.<jdk.internal.org.objectweb.asm.TypePath: int getStepArgument(int)>(i#1);

        $stack10 = virtualinvoke result.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label7;

     label6:
        $stack17 = virtualinvoke result.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label7:
        i#1 = i#1 + 1;

        goto label1;

     label8:
        $stack7 = virtualinvoke result.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack7;

        nop;
    }

    public static void <clinit>()
    {
        <jdk.internal.org.objectweb.asm.TypePath: int TYPE_ARGUMENT> = 3;

        <jdk.internal.org.objectweb.asm.TypePath: int WILDCARD_BOUND> = 2;

        <jdk.internal.org.objectweb.asm.TypePath: int INNER_TYPE> = 1;

        <jdk.internal.org.objectweb.asm.TypePath: int ARRAY_ELEMENT> = 0;

        return;
    }
}
