public final enum class jdk.internal.reflect.ConstantPool$Tag extends java.lang.Enum
{
    public static final enum jdk.internal.reflect.ConstantPool$Tag UTF8;
    public static final enum jdk.internal.reflect.ConstantPool$Tag INTEGER;
    public static final enum jdk.internal.reflect.ConstantPool$Tag FLOAT;
    public static final enum jdk.internal.reflect.ConstantPool$Tag LONG;
    public static final enum jdk.internal.reflect.ConstantPool$Tag DOUBLE;
    public static final enum jdk.internal.reflect.ConstantPool$Tag CLASS;
    public static final enum jdk.internal.reflect.ConstantPool$Tag STRING;
    public static final enum jdk.internal.reflect.ConstantPool$Tag FIELDREF;
    public static final enum jdk.internal.reflect.ConstantPool$Tag METHODREF;
    public static final enum jdk.internal.reflect.ConstantPool$Tag INTERFACEMETHODREF;
    public static final enum jdk.internal.reflect.ConstantPool$Tag NAMEANDTYPE;
    public static final enum jdk.internal.reflect.ConstantPool$Tag METHODHANDLE;
    public static final enum jdk.internal.reflect.ConstantPool$Tag METHODTYPE;
    public static final enum jdk.internal.reflect.ConstantPool$Tag INVOKEDYNAMIC;
    public static final enum jdk.internal.reflect.ConstantPool$Tag INVALID;
    private final int tagCode;
    private static final jdk.internal.reflect.ConstantPool$Tag[] $VALUES;

    public static jdk.internal.reflect.ConstantPool$Tag[] values()
    {
        jdk.internal.reflect.ConstantPool$Tag[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (jdk.internal.reflect.ConstantPool$Tag[]) $stack1;

        return $stack2;
    }

    public static jdk.internal.reflect.ConstantPool$Tag valueOf(java.lang.String)
    {
        java.lang.String name;
        jdk.internal.reflect.ConstantPool$Tag $stack2;
        java.lang.Enum $stack1;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Ljdk/internal/reflect/ConstantPool$Tag;", name);

        $stack2 = (jdk.internal.reflect.ConstantPool$Tag) $stack1;

        return $stack2;

        nop;
    }

    private void <init>(java.lang.String, int, int)
    {
        jdk.internal.reflect.ConstantPool$Tag this;
        int l2, tagCode;
        java.lang.String l1;

        this := @this: jdk.internal.reflect.ConstantPool$Tag;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        tagCode := @parameter2: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<jdk.internal.reflect.ConstantPool$Tag: int tagCode> = tagCode;

        return;

        nop;
    }

    private static jdk.internal.reflect.ConstantPool$Tag valueOf(byte)
    {
        jdk.internal.reflect.ConstantPool$Tag[] $stack5, l1;
        byte v;
        bottom_type l3;
        int l2, $stack11, $stack12, $stack13, l3#1, $i0, $i1;
        java.lang.String $stack10;
        java.lang.IllegalArgumentException $stack6, $u1;
        jdk.internal.reflect.ConstantPool$Tag tag;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $u0;

        v := @parameter0: byte;

        $stack5 = staticinvoke <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag[] values()>();

        l1 = $stack5;

        l2 = lengthof l1;

        l3#1 = 0;

     label1:
        $stack13 = l3#1;

        $stack12 = l2;

        if $stack13 >= $stack12 goto label3;

        tag = l1[l3#1];

        $stack11 = tag.<jdk.internal.reflect.ConstantPool$Tag: int tagCode>;

        $i0 = (int) v;

        if $stack11 != $i0 goto label2;

        return tag;

     label2:
        l3#1 = l3#1 + 1;

        goto label1;

     label3:
        $u1 = new java.lang.IllegalArgumentException;

        $stack6 = $u1;

        $u0 = new java.lang.StringBuilder;

        $stack7 = $u0;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown constant pool tag code ");

        $i1 = (int) v;

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack10);

        throw $stack6;

        nop;
    }

    static void <clinit>()
    {
        jdk.internal.reflect.ConstantPool$Tag[] $stack15;
        jdk.internal.reflect.ConstantPool$Tag $stack0, $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30;

        $stack0 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack0.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("UTF8", 0, 1);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag UTF8> = $stack0;

        $stack1 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack1.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("INTEGER", 1, 3);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INTEGER> = $stack1;

        $stack2 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack2.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("FLOAT", 2, 4);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag FLOAT> = $stack2;

        $stack3 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack3.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("LONG", 3, 5);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag LONG> = $stack3;

        $stack4 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack4.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("DOUBLE", 4, 6);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag DOUBLE> = $stack4;

        $stack5 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack5.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("CLASS", 5, 7);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag CLASS> = $stack5;

        $stack6 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack6.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("STRING", 6, 8);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag STRING> = $stack6;

        $stack7 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack7.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("FIELDREF", 7, 9);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag FIELDREF> = $stack7;

        $stack8 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack8.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("METHODREF", 8, 10);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag METHODREF> = $stack8;

        $stack9 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack9.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("INTERFACEMETHODREF", 9, 11);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INTERFACEMETHODREF> = $stack9;

        $stack10 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack10.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("NAMEANDTYPE", 10, 12);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag NAMEANDTYPE> = $stack10;

        $stack11 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack11.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("METHODHANDLE", 11, 15);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag METHODHANDLE> = $stack11;

        $stack12 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack12.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("METHODTYPE", 12, 16);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag METHODTYPE> = $stack12;

        $stack13 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack13.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("INVOKEDYNAMIC", 13, 18);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INVOKEDYNAMIC> = $stack13;

        $stack14 = new jdk.internal.reflect.ConstantPool$Tag;

        specialinvoke $stack14.<jdk.internal.reflect.ConstantPool$Tag: void <init>(java.lang.String,int,int)>("INVALID", 14, 0);

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INVALID> = $stack14;

        $stack15 = newarray (jdk.internal.reflect.ConstantPool$Tag)[15];

        $stack16 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag UTF8>;

        $stack15[0] = $stack16;

        $stack17 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INTEGER>;

        $stack15[1] = $stack17;

        $stack18 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag FLOAT>;

        $stack15[2] = $stack18;

        $stack19 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag LONG>;

        $stack15[3] = $stack19;

        $stack20 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag DOUBLE>;

        $stack15[4] = $stack20;

        $stack21 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag CLASS>;

        $stack15[5] = $stack21;

        $stack22 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag STRING>;

        $stack15[6] = $stack22;

        $stack23 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag FIELDREF>;

        $stack15[7] = $stack23;

        $stack24 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag METHODREF>;

        $stack15[8] = $stack24;

        $stack25 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INTERFACEMETHODREF>;

        $stack15[9] = $stack25;

        $stack26 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag NAMEANDTYPE>;

        $stack15[10] = $stack26;

        $stack27 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag METHODHANDLE>;

        $stack15[11] = $stack27;

        $stack28 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag METHODTYPE>;

        $stack15[12] = $stack28;

        $stack29 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INVOKEDYNAMIC>;

        $stack15[13] = $stack29;

        $stack30 = <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag INVALID>;

        $stack15[14] = $stack30;

        <jdk.internal.reflect.ConstantPool$Tag: jdk.internal.reflect.ConstantPool$Tag[] $VALUES> = $stack15;

        return;
    }
}
