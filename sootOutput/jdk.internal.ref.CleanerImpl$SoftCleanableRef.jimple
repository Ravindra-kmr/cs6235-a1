public final class jdk.internal.ref.CleanerImpl$SoftCleanableRef extends jdk.internal.ref.SoftCleanable
{
    private final java.lang.Runnable action;

    void <init>(java.lang.Object, java.lang.ref.Cleaner, java.lang.Runnable)
    {
        java.lang.ref.Cleaner cleaner;
        java.lang.Object obj;
        java.lang.Runnable action;
        jdk.internal.ref.CleanerImpl$SoftCleanableRef this;

        this := @this: jdk.internal.ref.CleanerImpl$SoftCleanableRef;

        obj := @parameter0: java.lang.Object;

        cleaner := @parameter1: java.lang.ref.Cleaner;

        action := @parameter2: java.lang.Runnable;

        specialinvoke this.<jdk.internal.ref.SoftCleanable: void <init>(java.lang.Object,java.lang.ref.Cleaner)>(obj, cleaner);

        this.<jdk.internal.ref.CleanerImpl$SoftCleanableRef: java.lang.Runnable action> = action;

        return;

        nop;
    }

    void <init>()
    {
        jdk.internal.ref.CleanerImpl$SoftCleanableRef this;

        this := @this: jdk.internal.ref.CleanerImpl$SoftCleanableRef;

        specialinvoke this.<jdk.internal.ref.SoftCleanable: void <init>()>();

        this.<jdk.internal.ref.CleanerImpl$SoftCleanableRef: java.lang.Runnable action> = null;

        return;

        nop;
    }

    protected void performCleanup()
    {
        java.lang.Runnable $stack1;
        jdk.internal.ref.CleanerImpl$SoftCleanableRef this;

        this := @this: jdk.internal.ref.CleanerImpl$SoftCleanableRef;

        $stack1 = this.<jdk.internal.ref.CleanerImpl$SoftCleanableRef: java.lang.Runnable action>;

        interfaceinvoke $stack1.<java.lang.Runnable: void run()>();

        return;

        nop;
    }

    public java.lang.Object get()
    {
        java.lang.UnsupportedOperationException $stack1;
        jdk.internal.ref.CleanerImpl$SoftCleanableRef this;

        this := @this: jdk.internal.ref.CleanerImpl$SoftCleanableRef;

        $stack1 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("get");

        throw $stack1;

        nop;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $stack1;
        jdk.internal.ref.CleanerImpl$SoftCleanableRef this;

        this := @this: jdk.internal.ref.CleanerImpl$SoftCleanableRef;

        $stack1 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("clear");

        throw $stack1;

        nop;
    }
}
