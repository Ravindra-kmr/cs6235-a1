public final class jdk.internal.jimage.decompressor.CompressedResourceHeader extends java.lang.Object
{
    private static final int SIZE;
    public static final int MAGIC;
    private final long uncompressedSize;
    private final long compressedSize;
    private final int decompressorNameOffset;
    private final int contentOffset;
    private final boolean isTerminal;

    public void <init>(long, long, int, int, boolean)
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        int decompressorNameOffset, contentOffset;
        long compressedSize, uncompressedSize;
        boolean isTerminal;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        compressedSize := @parameter0: long;

        uncompressedSize := @parameter1: long;

        decompressorNameOffset := @parameter2: int;

        contentOffset := @parameter3: int;

        isTerminal := @parameter4: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: long compressedSize> = compressedSize;

        this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: long uncompressedSize> = uncompressedSize;

        this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int decompressorNameOffset> = decompressorNameOffset;

        this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int contentOffset> = contentOffset;

        this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: boolean isTerminal> = isTerminal;

        return;

        nop;
    }

    public boolean isTerminal()
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        boolean $stack1;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        $stack1 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: boolean isTerminal>;

        return $stack1;

        nop;
    }

    public int getDecompressorNameOffset()
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        $stack1 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int decompressorNameOffset>;

        return $stack1;

        nop;
    }

    public int getContentOffset()
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        int $stack1;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        $stack1 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int contentOffset>;

        return $stack1;

        nop;
    }

    public java.lang.String getStoredContent(jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider)
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        byte $b0;
        jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider provider;
        int $stack3, $stack4, $i0;
        java.lang.Object $stack2;
        java.lang.String $stack5;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        provider := @parameter0: jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider;

        $stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(provider);

        $stack3 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int contentOffset>;

        $b0 = -1;

        $i0 = (int) $b0;

        if $stack3 != $i0 goto label1;

        return null;

     label1:
        $stack4 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int contentOffset>;

        $stack5 = interfaceinvoke provider.<jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider: java.lang.String getString(int)>($stack4);

        return $stack5;

        nop;
    }

    public long getUncompressedSize()
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        long $stack1;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        $stack1 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: long uncompressedSize>;

        return $stack1;

        nop;
    }

    public long getResourceSize()
    {
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        long $stack1;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        $stack1 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: long compressedSize>;

        return $stack1;

        nop;
    }

    public byte[] getBytes(java.nio.ByteOrder)
    {
        byte[] $stack17;
        jdk.internal.jimage.decompressor.CompressedResourceHeader this;
        long $stack7, $stack9;
        java.nio.ByteBuffer $stack4, buffer, $stack5, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack19, $stack20;
        byte $stack18#1;
        bottom_type $stack18;
        int $stack11, $stack13;
        boolean $stack15;
        java.nio.ByteOrder order;
        java.lang.Object $stack3;

        this := @this: jdk.internal.jimage.decompressor.CompressedResourceHeader;

        order := @parameter0: java.nio.ByteOrder;

        $stack3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(order);

        $stack4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(29);

        buffer = $stack4;

        $stack5 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>(order);

        $stack6 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(-889259270);

        $stack7 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: long compressedSize>;

        $stack8 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($stack7);

        $stack9 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: long uncompressedSize>;

        $stack10 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($stack9);

        $stack11 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int decompressorNameOffset>;

        $stack12 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack11);

        $stack13 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: int contentOffset>;

        $stack14 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($stack13);

        $stack19 = buffer;

        $stack15 = this.<jdk.internal.jimage.decompressor.CompressedResourceHeader: boolean isTerminal>;

        if $stack15 == 0 goto label1;

        $stack18#1 = 1;

        goto label2;

     label1:
        $stack18#1 = 0;

     label2:
        $stack16 = virtualinvoke $stack19.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($stack18#1);

        $stack20 = buffer;

        $stack17 = virtualinvoke $stack20.<java.nio.ByteBuffer: byte[] array()>();

        return $stack17;

        nop;
    }

    public static int getSize()
    {
        return 29;
    }

    public static jdk.internal.jimage.decompressor.CompressedResourceHeader readFromResource(java.nio.ByteOrder, byte[])
    {
        byte[] resource;
        jdk.internal.jimage.decompressor.CompressedResourceHeader $stack23;
        long $stack18, size, $stack19, uncompressedSize, $stack24, $stack25;
        java.nio.ByteBuffer $stack15, buffer, $stack16;
        byte $stack22, isTerminal;
        bottom_type $stack28;
        int $stack13, $stack14, $stack17, magic, $stack20, decompressorNameOffset, $stack21, contentIndex, $stack26, $stack27;
        boolean $stack28#1;
        java.nio.ByteOrder order;
        java.lang.Object $stack11, $stack12;

        order := @parameter0: java.nio.ByteOrder;

        resource := @parameter1: byte[];

        $stack11 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(order);

        $stack12 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(resource);

        $stack13 = lengthof resource;

        $stack14 = staticinvoke <jdk.internal.jimage.decompressor.CompressedResourceHeader: int getSize()>();

        if $stack13 >= $stack14 goto label1;

        return null;

     label1:
        $stack15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(resource, 0, 29);

        buffer = $stack15;

        $stack16 = virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>(order);

        $stack17 = virtualinvoke buffer.<java.nio.ByteBuffer: int getInt()>();

        magic = $stack17;

        if magic == -889259270 goto label2;

        return null;

     label2:
        $stack18 = virtualinvoke buffer.<java.nio.ByteBuffer: long getLong()>();

        size = $stack18;

        $stack19 = virtualinvoke buffer.<java.nio.ByteBuffer: long getLong()>();

        uncompressedSize = $stack19;

        $stack20 = virtualinvoke buffer.<java.nio.ByteBuffer: int getInt()>();

        decompressorNameOffset = $stack20;

        $stack21 = virtualinvoke buffer.<java.nio.ByteBuffer: int getInt()>();

        contentIndex = $stack21;

        $stack22 = virtualinvoke buffer.<java.nio.ByteBuffer: byte get()>();

        isTerminal = $stack22;

        $stack23 = new jdk.internal.jimage.decompressor.CompressedResourceHeader;

        $stack24 = size;

        $stack25 = uncompressedSize;

        $stack26 = decompressorNameOffset;

        $stack27 = contentIndex;

        if isTerminal != 1 goto label3;

        $stack28#1 = 1;

        goto label4;

     label3:
        $stack28#1 = 0;

     label4:
        specialinvoke $stack23.<jdk.internal.jimage.decompressor.CompressedResourceHeader: void <init>(long,long,int,int,boolean)>($stack24, $stack25, $stack26, $stack27, $stack28#1);

        return $stack23;

        nop;
    }

    public static void <clinit>()
    {
        <jdk.internal.jimage.decompressor.CompressedResourceHeader: int MAGIC> = -889259270;

        <jdk.internal.jimage.decompressor.CompressedResourceHeader: int SIZE> = 29;

        return;
    }
}
