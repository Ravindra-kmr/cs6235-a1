public class jdk.internal.reflect.Reflection extends java.lang.Object
{
    private static volatile java.util.Map fieldFilterMap;
    private static volatile java.util.Map methodFilterMap;

    public void <init>()
    {
        jdk.internal.reflect.Reflection this;

        this := @this: jdk.internal.reflect.Reflection;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;

        nop;
    }

    public static native java.lang.Class getCallerClass();

    public static native int getClassAccessFlags(java.lang.Class);

    public static void ensureMemberAccess(java.lang.Class, java.lang.Class, java.lang.Class, int) throws java.lang.IllegalAccessException
    {
        java.lang.IllegalAccessException $stack5;
        int modifiers;
        java.lang.Class currentClass, memberClass, targetClass;
        boolean $stack4;

        currentClass := @parameter0: java.lang.Class;

        memberClass := @parameter1: java.lang.Class;

        targetClass := @parameter2: java.lang.Class;

        modifiers := @parameter3: int;

        $stack4 = staticinvoke <jdk.internal.reflect.Reflection: boolean verifyMemberAccess(java.lang.Class,java.lang.Class,java.lang.Class,int)>(currentClass, memberClass, targetClass, modifiers);

        if $stack4 != 0 goto label1;

        $stack5 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.IllegalAccessException newIllegalAccessException(java.lang.Class,java.lang.Class,java.lang.Class,int)>(currentClass, memberClass, targetClass, modifiers);

        throw $stack5;

     label1:
        return;

        nop;
    }

    public static boolean verifyMemberAccess(java.lang.Class, java.lang.Class, java.lang.Class, int)
    {
        bottom_type gotIsSameClassPackage, isSameClassPackage, successSoFar, $stack15, $stack20, $stack24;
        boolean $stack8, $stack10, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19, $stack21, $stack22, $stack23, $stack25, $stack26, $stack28, gotIsSameClassPackage#1, isSameClassPackage#2, successSoFar#3, $stack24#4, $stack24#5, $stack20#6, $stack20#7, gotIsSameClassPackage#8, $stack15#9, $stack15#10;
        int $stack9, modifiers, $stack27, $stack29;
        java.lang.Module $stack7;
        java.lang.Class currentClass, memberClass, targetClass;

        currentClass := @parameter0: java.lang.Class;

        memberClass := @parameter1: java.lang.Class;

        targetClass := @parameter2: java.lang.Class;

        modifiers := @parameter3: int;

        if currentClass != memberClass goto label01;

        return 1;

     label01:
        $stack7 = virtualinvoke currentClass.<java.lang.Class: java.lang.Module getModule()>();

        $stack8 = staticinvoke <jdk.internal.reflect.Reflection: boolean verifyModuleAccess(java.lang.Module,java.lang.Class)>($stack7, memberClass);

        if $stack8 != 0 goto label02;

        return 0;

     label02:
        gotIsSameClassPackage#1 = 0;

        isSameClassPackage#2 = 0;

        $stack9 = staticinvoke <jdk.internal.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>(memberClass);

        $stack10 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack9);

        if $stack10 != 0 goto label03;

        $stack28 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(currentClass, memberClass);

        isSameClassPackage#2 = $stack28;

        gotIsSameClassPackage#1 = 1;

        if isSameClassPackage#2 != 0 goto label03;

        return 0;

     label03:
        $stack29 = modifiers;

        $stack11 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack29);

        if $stack11 == 0 goto label04;

        return 1;

     label04:
        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(modifiers);

        if $stack12 == 0 goto label05;

        $stack25 = staticinvoke <jdk.internal.reflect.Reflection: boolean areNestMates(java.lang.Class,java.lang.Class)>(currentClass, memberClass);

        if $stack25 == 0 goto label05;

        return 1;

     label05:
        $stack26 = 0;

        successSoFar#3 = $stack26;

        $stack27 = modifiers;

        $stack13 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($stack27);

        if $stack13 == 0 goto label06;

        $stack23 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(currentClass, memberClass);

        if $stack23 == 0 goto label06;

        successSoFar#3 = 1;

     label06:
        $stack24#4 = successSoFar#3;

        $stack24#5 = $stack24#4;

        if $stack24#5 != 0 goto label08;

        $stack19 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(modifiers);

        if $stack19 != 0 goto label08;

        if gotIsSameClassPackage#1 != 0 goto label07;

        $stack21 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(currentClass, memberClass);

        isSameClassPackage#2 = $stack21;

        gotIsSameClassPackage#1 = 1;

     label07:
        $stack22 = isSameClassPackage#2;

        if $stack22 == 0 goto label08;

        successSoFar#3 = 1;

     label08:
        $stack20#6 = successSoFar#3;

        $stack20#7 = $stack20#6;

        if $stack20#7 != 0 goto label09;

        return 0;

     label09:
        if targetClass == null goto label11;

        $stack14 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(modifiers);

        if $stack14 == 0 goto label11;

        if targetClass == currentClass goto label11;

        if gotIsSameClassPackage#1 != 0 goto label10;

        $stack17 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(currentClass, memberClass);

        isSameClassPackage#2 = $stack17;

        gotIsSameClassPackage#8 = 1;

     label10:
        $stack18 = isSameClassPackage#2;

        if $stack18 != 0 goto label11;

        $stack16 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(targetClass, currentClass);

        if $stack16 != 0 goto label11;

        return 0;

     label11:
        $stack15#9 = 1;

        $stack15#10 = $stack15#9;

        return $stack15#10;

        nop;
    }

    public static boolean verifyModuleAccess(java.lang.Module, java.lang.Class)
    {
        java.lang.Module $stack4, memberModule, currentModule;
        java.lang.Class memberClass;
        java.lang.String $stack5, pkg;
        boolean $stack6;

        currentModule := @parameter0: java.lang.Module;

        memberClass := @parameter1: java.lang.Class;

        $stack4 = virtualinvoke memberClass.<java.lang.Class: java.lang.Module getModule()>();

        memberModule = $stack4;

        if currentModule != memberModule goto label1;

        return 1;

     label1:
        $stack5 = virtualinvoke memberClass.<java.lang.Class: java.lang.String getPackageName()>();

        pkg = $stack5;

        $stack6 = virtualinvoke memberModule.<java.lang.Module: boolean isExported(java.lang.String,java.lang.Module)>(pkg, currentModule);

        return $stack6;

        nop;
    }

    private static boolean isSameClassPackage(java.lang.Class, java.lang.Class)
    {
        java.lang.Class c1, c2;
        java.lang.ClassLoader $stack2, $stack3;
        java.lang.String $stack4, $stack5;
        boolean $stack6;

        c1 := @parameter0: java.lang.Class;

        c2 := @parameter1: java.lang.Class;

        $stack2 = virtualinvoke c1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $stack3 = virtualinvoke c2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $stack2 == $stack3 goto label1;

        return 0;

     label1:
        $stack4 = virtualinvoke c1.<java.lang.Class: java.lang.String getPackageName()>();

        $stack5 = virtualinvoke c2.<java.lang.Class: java.lang.String getPackageName()>();

        $stack6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        return $stack6;

        nop;
    }

    static boolean isSubclassOf(java.lang.Class, java.lang.Class)
    {
        bottom_type queryClass;
        java.lang.Class ofClass, $stack2, $stack3, queryClass#1;

        queryClass#1 := @parameter0: java.lang.Class;

        ofClass := @parameter1: java.lang.Class;

     label1:
        $stack3 = queryClass#1;

        if $stack3 == null goto label3;

        if queryClass#1 != ofClass goto label2;

        return 1;

     label2:
        $stack2 = virtualinvoke queryClass#1.<java.lang.Class: java.lang.Class getSuperclass()>();

        queryClass#1 = $stack2;

        goto label1;

     label3:
        return 0;

        nop;
    }

    public static synchronized transient void registerFieldsToFilter(java.lang.Class, java.lang.String[])
    {
        java.util.Map $stack2, $stack3;
        java.lang.Class containingClass;
        java.lang.String[] fieldNames;

        containingClass := @parameter0: java.lang.Class;

        fieldNames := @parameter1: java.lang.String[];

        $stack2 = <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap>;

        $stack3 = staticinvoke <jdk.internal.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>($stack2, containingClass, fieldNames);

        <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap> = $stack3;

        return;

        nop;
    }

    public static synchronized transient void registerMethodsToFilter(java.lang.Class, java.lang.String[])
    {
        java.util.Map $stack2, $stack3;
        java.lang.Class containingClass;
        java.lang.String[] methodNames;

        containingClass := @parameter0: java.lang.Class;

        methodNames := @parameter1: java.lang.String[];

        $stack2 = <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap>;

        $stack3 = staticinvoke <jdk.internal.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>($stack2, containingClass, methodNames);

        <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap> = $stack3;

        return;

        nop;
    }

    private static transient java.util.Map registerFilter(java.util.Map, java.lang.Class, java.lang.String[])
    {
        java.util.HashMap $stack4, map#2;
        java.lang.String[] names;
        java.lang.IllegalArgumentException $stack6;
        bottom_type map;
        java.util.Map map#1;
        java.lang.Class containingClass;
        java.lang.Object $stack3, $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack10;

        map#1 := @parameter0: java.util.Map;

        containingClass := @parameter1: java.lang.Class;

        names := @parameter2: java.lang.String[];

        $stack3 = interfaceinvoke map#1.<java.util.Map: java.lang.Object get(java.lang.Object)>(containingClass);

        if $stack3 == null goto label1;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter already registered: ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(containingClass);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack10);

        throw $stack6;

     label1:
        $stack4 = new java.util.HashMap;

        specialinvoke $stack4.<java.util.HashMap: void <init>(java.util.Map)>(map#1);

        map#2 = $stack4;

        $stack5 = interfaceinvoke map#2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(containingClass, names);

        return map#2;

        nop;
    }

    public static java.lang.reflect.Field[] filterFields(java.lang.Class, java.lang.reflect.Field[])
    {
        java.lang.reflect.Member[] $stack6;
        java.lang.String[] $stack5;
        java.lang.reflect.Field[] fields, $stack7;
        java.util.Map $stack2, $stack3;
        java.lang.Class containingClass;
        java.lang.Object $stack4;

        containingClass := @parameter0: java.lang.Class;

        fields := @parameter1: java.lang.reflect.Field[];

        $stack2 = <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap>;

        if $stack2 != null goto label1;

        return fields;

     label1:
        $stack3 = <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(containingClass);

        $stack5 = (java.lang.String[]) $stack4;

        $stack6 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.lang.String[])>(fields, $stack5);

        $stack7 = (java.lang.reflect.Field[]) $stack6;

        return $stack7;

        nop;
    }

    public static java.lang.reflect.Method[] filterMethods(java.lang.Class, java.lang.reflect.Method[])
    {
        java.lang.reflect.Member[] $stack6;
        java.lang.String[] $stack5;
        java.lang.reflect.Method[] methods, $stack7;
        java.util.Map $stack2, $stack3;
        java.lang.Class containingClass;
        java.lang.Object $stack4;

        containingClass := @parameter0: java.lang.Class;

        methods := @parameter1: java.lang.reflect.Method[];

        $stack2 = <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap>;

        if $stack2 != null goto label1;

        return methods;

     label1:
        $stack3 = <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(containingClass);

        $stack5 = (java.lang.String[]) $stack4;

        $stack6 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.lang.String[])>(methods, $stack5);

        $stack7 = (java.lang.reflect.Method[]) $stack6;

        return $stack7;

        nop;
    }

    private static java.lang.reflect.Member[] filter(java.lang.reflect.Member[], java.lang.String[])
    {
        bottom_type numNewMembers, newMembers, destIdx, l5, member_1, shouldSkip_1, member_2, shouldSkip_2, l10, filteredName_1, l12;
        boolean $stack24, $stack30, shouldSkip_1#6, shouldSkip_2#17;
        java.lang.reflect.Member $stack15, member_1#5, member_2#16;
        java.lang.reflect.Member[] members, $stack31, newMembers#2, newMembers#11, l5#13;
        java.lang.String[] filteredNames, member_2#7, l10#18;
        int $stack14, $stack18, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26, $stack28, $stack29, numNewMembers#1, destIdx#3, l5#4, shouldSkip_2#8, l10#9, destIdx#12, member_1#14, shouldSkip_1#15, filteredName_1#19, l12#20;
        java.lang.String filteredName_2, $stack21, $stack27, filteredName_1#10;
        java.lang.Class $stack16;
        java.lang.Object $stack17;

        members := @parameter0: java.lang.reflect.Member[];

        filteredNames := @parameter1: java.lang.String[];

        if filteredNames == null goto label01;

        $stack14 = lengthof members;

        if $stack14 != 0 goto label02;

     label01:
        $stack31 = members;

        return $stack31;

     label02:
        numNewMembers#1 = 0;

        newMembers#2 = members;

        destIdx#3 = lengthof newMembers#2;

        l5#4 = 0;

     label03:
        $stack26 = l5#4;

        $stack25 = destIdx#3;

        if $stack26 >= $stack25 goto label08;

        member_1#5 = newMembers#2[l5#4];

        shouldSkip_1#6 = 0;

        member_2#7 = filteredNames;

        shouldSkip_2#8 = lengthof member_2#7;

        l10#9 = 0;

     label04:
        $stack29 = l10#9;

        $stack28 = shouldSkip_2#8;

        if $stack29 >= $stack28 goto label06;

        filteredName_1#10 = member_2#7[l10#9];

        $stack27 = interfaceinvoke member_1#5.<java.lang.reflect.Member: java.lang.String getName()>();

        if $stack27 != filteredName_1#10 goto label05;

        shouldSkip_1#6 = 1;

        goto label06;

     label05:
        l10#9 = l10#9 + 1;

        goto label04;

     label06:
        $stack30 = shouldSkip_1#6;

        if $stack30 != 0 goto label07;

        numNewMembers#1 = numNewMembers#1 + 1;

     label07:
        l5#4 = l5#4 + 1;

        goto label03;

     label08:
        $stack15 = members[0];

        $stack16 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack16, numNewMembers#1);

        newMembers#11 = (java.lang.reflect.Member[]) $stack17;

        destIdx#12 = 0;

        l5#13 = members;

        member_1#14 = lengthof l5#13;

        shouldSkip_1#15 = 0;

     label09:
        $stack19 = shouldSkip_1#15;

        $stack18 = member_1#14;

        if $stack19 >= $stack18 goto label14;

        member_2#16 = l5#13[shouldSkip_1#15];

        shouldSkip_2#17 = 0;

        l10#18 = filteredNames;

        filteredName_1#19 = lengthof l10#18;

        l12#20 = 0;

     label10:
        $stack23 = l12#20;

        $stack22 = filteredName_1#19;

        if $stack23 >= $stack22 goto label12;

        filteredName_2 = l10#18[l12#20];

        $stack21 = interfaceinvoke member_2#16.<java.lang.reflect.Member: java.lang.String getName()>();

        if $stack21 != filteredName_2 goto label11;

        shouldSkip_2#17 = 1;

        goto label12;

     label11:
        l12#20 = l12#20 + 1;

        goto label10;

     label12:
        $stack24 = shouldSkip_2#17;

        if $stack24 != 0 goto label13;

        $stack20 = destIdx#12;

        destIdx#12 = destIdx#12 + 1;

        newMembers#11[$stack20] = member_2#16;

     label13:
        shouldSkip_1#15 = shouldSkip_1#15 + 1;

        goto label09;

     label14:
        return newMembers#11;

        nop;
    }

    public static boolean isCallerSensitive(java.lang.reflect.Method)
    {
        java.lang.Class $stack2;
        java.lang.ClassLoader $stack3, loader;
        java.lang.reflect.Method m;
        boolean $stack4, $stack5;

        m := @parameter0: java.lang.reflect.Method;

        $stack2 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $stack3 = virtualinvoke $stack2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        loader = $stack3;

        $stack4 = staticinvoke <jdk.internal.misc.VM: boolean isSystemDomainLoader(java.lang.ClassLoader)>(loader);

        if $stack4 == 0 goto label1;

        $stack5 = virtualinvoke m.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Ljdk/internal/reflect/CallerSensitive;");

        return $stack5;

     label1:
        return 0;

        nop;
    }

    public static java.lang.IllegalAccessException newIllegalAccessException(java.lang.Class, java.lang.Class, java.lang.Class, int) throws java.lang.IllegalAccessException
    {
        bottom_type currentSuffix, memberSuffix, msg, $stack31, $stack37;
        java.lang.StringBuilder $stack15, $stack16, $stack17, $stack18, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack32, $stack33, $stack34, $stack35, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack45, $stack46, $stack48, $stack49, $stack50, $stack51, $stack60, $stack61, $stack62, $stack63;
        java.lang.String $stack14, memberPackageName, $stack19, $stack29, $stack36, $stack44, $stack47, $stack52, $stack55, $stack56, $stack57, $stack64, currentSuffix#1, memberSuffix#2, msg#3, msg#4, $stack37#7, $stack37#8;
        java.lang.Module $stack10, m1, $stack12, m2, $stack58, $stack59, $stack66;
        boolean $stack11, $stack13, $stack20, $stack30;
        java.lang.IllegalAccessException $stack31#5, $stack31#6;
        int modifiers;
        java.lang.Class currentClass, memberClass, $stack53, $stack54, $stack65, targetClass;

        currentClass := @parameter0: java.lang.Class;

        memberClass := @parameter1: java.lang.Class;

        targetClass := @parameter2: java.lang.Class;

        modifiers := @parameter3: int;

        currentSuffix#1 = "";

        memberSuffix#2 = "";

        $stack10 = virtualinvoke currentClass.<java.lang.Class: java.lang.Module getModule()>();

        m1 = $stack10;

        $stack11 = virtualinvoke m1.<java.lang.Module: boolean isNamed()>();

        if $stack11 == 0 goto label1;

        $stack60 = new java.lang.StringBuilder;

        specialinvoke $stack60.<java.lang.StringBuilder: void <init>()>();

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in ");

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m1);

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>();

        currentSuffix#1 = $stack64;

     label1:
        $stack65 = memberClass;

        $stack12 = virtualinvoke $stack65.<java.lang.Class: java.lang.Module getModule()>();

        m2 = $stack12;

        $stack66 = m2;

        $stack13 = virtualinvoke $stack66.<java.lang.Module: boolean isNamed()>();

        if $stack13 == 0 goto label2;

        $stack48 = new java.lang.StringBuilder;

        specialinvoke $stack48.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in ");

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m2);

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.String toString()>();

        memberSuffix#2 = $stack52;

     label2:
        $stack53 = memberClass;

        $stack14 = virtualinvoke $stack53.<java.lang.Class: java.lang.String getPackageName()>();

        memberPackageName = $stack14;

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack54 = currentClass;

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack54);

        $stack55 = currentSuffix#1;

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack55);

        $stack56 = " cannot access ";

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack56);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        msg#3 = $stack19;

        $stack59 = m2;

        $stack57 = memberPackageName;

        $stack58 = m1;

        $stack20 = virtualinvoke $stack59.<java.lang.Module: boolean isExported(java.lang.String,java.lang.Module)>($stack57, $stack58);

        if $stack20 == 0 goto label3;

        $stack38 = new java.lang.StringBuilder;

        specialinvoke $stack38.<java.lang.StringBuilder: void <init>()>();

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg#3);

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a member of ");

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(memberClass);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memberSuffix#2);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with modifiers \"");

        $stack44 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(modifiers);

        $stack45 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack44);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        msg#4 = $stack47;

        goto label4;

     label3:
        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg#3);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(memberClass);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memberSuffix#2);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because ");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m2);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not export ");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memberPackageName);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        msg#4 = $stack29;

        $stack30 = virtualinvoke m2.<java.lang.Module: boolean isNamed()>();

        if $stack30 == 0 goto label4;

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg#4);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m1);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        msg#4 = $stack36;

     label4:
        $stack31#5 = new java.lang.IllegalAccessException;

        $stack31#6 = $stack31#5;

        $stack37#7 = msg#4;

        $stack37#8 = $stack37#7;

        specialinvoke $stack31#6.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($stack37#8);

        return $stack31#6;

        nop;
    }

    public static native boolean areNestMates(java.lang.Class, java.lang.Class);

    static void <clinit>()
    {
        java.util.HashMap $stack1, map, $stack8;
        java.lang.String[] $stack2, $stack4, $stack6;
        java.lang.Object $stack3, $stack5, $stack7;

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        map = $stack1;

        $stack2 = newarray (java.lang.String)[2];

        $stack2[0] = "fieldFilterMap";

        $stack2[1] = "methodFilterMap";

        $stack3 = interfaceinvoke map.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljdk/internal/reflect/Reflection;", $stack2);

        $stack4 = newarray (java.lang.String)[1];

        $stack4[0] = "security";

        $stack5 = interfaceinvoke map.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/System;", $stack4);

        $stack6 = newarray (java.lang.String)[1];

        $stack6[0] = "classLoader";

        $stack7 = interfaceinvoke map.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Class;", $stack6);

        <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap> = map;

        $stack8 = new java.util.HashMap;

        specialinvoke $stack8.<java.util.HashMap: void <init>()>();

        <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap> = $stack8;

        return;
    }
}
