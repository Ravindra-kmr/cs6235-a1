class jdk.internal.reflect.MethodAccessorGenerator extends jdk.internal.reflect.AccessorGenerator
{
    private static final short NUM_BASE_CPOOL_ENTRIES;
    private static final short NUM_METHODS;
    private static final short NUM_SERIALIZATION_CPOOL_ENTRIES;
    private static volatile int methodSymnum;
    private static volatile int constructorSymnum;
    private static volatile int serializationConstructorSymnum;
    private java.lang.Class declaringClass;
    private java.lang.Class[] parameterTypes;
    private java.lang.Class returnType;
    private boolean isConstructor;
    private boolean forSerialization;
    private short targetMethodRef;
    private short invokeIdx;
    private short invokeDescriptorIdx;
    private short nonPrimitiveParametersBaseIdx;

    void <init>()
    {
        jdk.internal.reflect.MethodAccessorGenerator this;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        specialinvoke this.<jdk.internal.reflect.AccessorGenerator: void <init>()>();

        return;

        nop;
    }

    public jdk.internal.reflect.MethodAccessor generateMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int)
    {
        java.lang.Class[] parameterTypes, checkedExceptions;
        jdk.internal.reflect.MethodAccessor $stack8;
        jdk.internal.reflect.MagicAccessorImpl $stack7;
        jdk.internal.reflect.MethodAccessorGenerator this;
        int modifiers;
        java.lang.Class declaringClass, returnType;
        java.lang.String name;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        declaringClass := @parameter0: java.lang.Class;

        name := @parameter1: java.lang.String;

        parameterTypes := @parameter2: java.lang.Class[];

        returnType := @parameter3: java.lang.Class;

        checkedExceptions := @parameter4: java.lang.Class[];

        modifiers := @parameter5: int;

        $stack7 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(declaringClass, name, parameterTypes, returnType, checkedExceptions, modifiers, 0, 0, null);

        $stack8 = (jdk.internal.reflect.MethodAccessor) $stack7;

        return $stack8;

        nop;
    }

    public jdk.internal.reflect.ConstructorAccessor generateConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int)
    {
        java.lang.Class[] parameterTypes, checkedExceptions;
        jdk.internal.reflect.MagicAccessorImpl $stack6;
        jdk.internal.reflect.MethodAccessorGenerator this;
        int modifiers;
        jdk.internal.reflect.ConstructorAccessor $stack7;
        java.lang.Class declaringClass, $stack5;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        declaringClass := @parameter0: java.lang.Class;

        parameterTypes := @parameter1: java.lang.Class[];

        checkedExceptions := @parameter2: java.lang.Class[];

        modifiers := @parameter3: int;

        $stack5 = <java.lang.Void: java.lang.Class TYPE>;

        $stack6 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(declaringClass, "<init>", parameterTypes, $stack5, checkedExceptions, modifiers, 1, 0, null);

        $stack7 = (jdk.internal.reflect.ConstructorAccessor) $stack6;

        return $stack7;

        nop;
    }

    public jdk.internal.reflect.SerializationConstructorAccessorImpl generateSerializationConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int, java.lang.Class)
    {
        java.lang.Class[] parameterTypes, checkedExceptions;
        jdk.internal.reflect.MagicAccessorImpl $stack7;
        jdk.internal.reflect.MethodAccessorGenerator this;
        jdk.internal.reflect.SerializationConstructorAccessorImpl $stack8;
        int modifiers;
        java.lang.Class declaringClass, targetConstructorClass, $stack6;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        declaringClass := @parameter0: java.lang.Class;

        parameterTypes := @parameter1: java.lang.Class[];

        checkedExceptions := @parameter2: java.lang.Class[];

        modifiers := @parameter3: int;

        targetConstructorClass := @parameter4: java.lang.Class;

        $stack6 = <java.lang.Void: java.lang.Class TYPE>;

        $stack7 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(declaringClass, "<init>", parameterTypes, $stack6, checkedExceptions, modifiers, 1, 1, targetConstructorClass);

        $stack8 = (jdk.internal.reflect.SerializationConstructorAccessorImpl) $stack7;

        return $stack8;

        nop;
    }

    private jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, boolean, boolean, java.lang.Class)
    {
        java.lang.Class[] parameterTypes, checkedExceptions, $stack102#67, $stack102#68;
        int modifiers, $stack22, $stack23, $stack25, $stack161, $stack177, i#64, $stack103#65, $stack103#66, $stack73#69, $stack73#70, $i0, $i1, $i2, $i3, $i4;
        java.lang.Class declaringClass, returnType, c, serializationTargetClass, $stack152#25, $stack152#26;
        jdk.internal.reflect.ByteVector $stack17, vec;
        java.lang.String $stack28, generatedName, name, $stack50, $stack98, $stack105, $stack131, $stack138, $stack171, $stack42#29, $stack42#30;
        jdk.internal.reflect.ClassFileAssembler $stack18, $stack19, $stack26, $stack29, $stack30, $stack31, $stack33, $stack35, $stack48, $stack49, $stack51, $stack52, $stack55, $stack58, $stack59, $stack64, $stack65, $stack67, $stack68, $stack70, $stack74, $stack76, $stack78, $stack80, $stack81, $stack82, $stack83, $stack84, $stack92, $stack104, $stack106, $stack107, $stack109, $stack116, $stack120, $stack121, $stack126, $stack127, $stack130, $stack132, $stack133, $stack135, $stack146, $stack160, $stack37#5, $stack37#6, $stack36#9, $stack36#10, $stack39#17, $stack39#18, $stack41#23, $stack41#24, $stack44#33, $stack44#34, $stack43#37, $stack43#38, $stack46#45, $stack46#46, $stack62#58, $stack62#59, $u0;
        jdk.internal.reflect.MagicAccessorImpl $stack88;
        boolean isConstructor, forSerialization, $stack20, usesPrimitives, $stack57, $stack101, $stack119, $stack168, $stack169, $stack176, $stack178, $stack153#27, $stack153#28, $stack159#52, $stack159#53, $stack125#62, $stack125#63;
        byte[] $stack85, i#71;
        byte $stack21, $stack113, $stack115, $stack143, $stack167;
        jdk.internal.reflect.MethodAccessorGenerator$1 $stack86, $u3;
        java.lang.StringBuilder $stack90, $stack91, $stack94, $stack95, $stack96, $stack97, $u1;
        short $stack24, $stack27, $stack32, $stack34, $stack53, $stack54, $stack56, $stack60, $stack61, $stack66, $stack69, $stack71, $stack72, $stack75, $stack77, $stack79, $stack93, $stack100, $stack108, $stack122, $stack128, $stack129, $stack134, $stack136, $stack163, $stack164, $stack166, numCPEntries#1, numCPEntries#2, $stack38#11, $stack38#12, $stack40#19, $stack40#20, $stack45#39, $stack45#40, $stack47#47, $stack47#48, $stack158#49, $stack158#50, serializationTargetClassIdx#51, $stack63#60, $stack63#61;
        java.lang.Object $stack87;
        bottom_type numCPEntries, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, serializationTargetClassIdx, $stack62, $stack63, i, $stack73, $stack102, $stack103, $stack123, $stack124, $stack125, $stack147, $stack148, $stack149, $stack150, $stack151, $stack152, $stack153, $stack154, $stack155, $stack156, $stack157, $stack158, $stack159;
        java.lang.InternalError $stack89, $u2;
        jdk.internal.reflect.MethodAccessorGenerator this, $stack99, $stack110, $stack111, $stack112, $stack114, $stack117, $stack118, $stack137, $stack139, $stack140, $stack141, $stack142, $stack144, $stack145, $stack162, $stack165, $stack170, $stack172, $stack173, $stack174, $stack175, $stack147#3, $stack147#4, $stack148#7, $stack148#8, $stack150#13, $stack150#14, $stack149#15, $stack149#16, $stack151#21, $stack151#22, $stack154#31, $stack154#32, $stack155#35, $stack155#36, $stack157#41, $stack157#42, $stack156#43, $stack156#44, $stack124#54, $stack124#55, $stack123#56, $stack123#57;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        declaringClass := @parameter0: java.lang.Class;

        name := @parameter1: java.lang.String;

        parameterTypes := @parameter2: java.lang.Class[];

        returnType := @parameter3: java.lang.Class;

        checkedExceptions := @parameter4: java.lang.Class[];

        modifiers := @parameter5: int;

        isConstructor := @parameter6: boolean;

        forSerialization := @parameter7: boolean;

        serializationTargetClass := @parameter8: java.lang.Class;

        $stack17 = staticinvoke <jdk.internal.reflect.ByteVectorFactory: jdk.internal.reflect.ByteVector create()>();

        vec = $stack17;

        $u0 = new jdk.internal.reflect.ClassFileAssembler;

        $stack18 = $u0;

        specialinvoke $u0.<jdk.internal.reflect.ClassFileAssembler: void <init>(jdk.internal.reflect.ByteVector)>(vec);

        this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm> = $stack18;

        this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class declaringClass> = declaringClass;

        this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes> = parameterTypes;

        this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType> = returnType;

        this.<jdk.internal.reflect.MethodAccessorGenerator: int modifiers> = modifiers;

        this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor> = isConstructor;

        this.<jdk.internal.reflect.MethodAccessorGenerator: boolean forSerialization> = forSerialization;

        $stack19 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack19.<jdk.internal.reflect.ClassFileAssembler: void emitMagicAndVersion()>();

        numCPEntries#1 = 42;

        $stack20 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: boolean usesPrimitiveTypes()>();

        usesPrimitives = $stack20;

        if usesPrimitives == 0 goto label01;

        $stack177 = numCPEntries#1 + 73;

        numCPEntries#1 = (short) $stack177;

     label01:
        $stack178 = forSerialization;

        if $stack178 == 0 goto label02;

        $stack161 = numCPEntries#1 + 2;

        numCPEntries#1 = (short) $stack161;

     label02:
        $stack163 = numCPEntries#1;

        $stack21 = 2;

        $stack162 = this;

        $stack22 = virtualinvoke $stack162.<jdk.internal.reflect.MethodAccessorGenerator: int numNonPrimitiveParameterTypes()>();

        $stack23 = $stack21 * $stack22;

        $stack24 = (short) $stack23;

        $i0 = (int) $stack24;

        $stack25 = $stack163 + $i0;

        $stack164 = (short) $stack25;

        numCPEntries#2 = $stack164;

        $stack165 = this;

        $stack26 = $stack165.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack166 = numCPEntries#2;

        $stack167 = 1;

        $stack27 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short add(short,short)>($stack166, $stack167);

        virtualinvoke $stack26.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack27);

        $stack168 = isConstructor;

        $stack169 = forSerialization;

        $stack28 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String generateName(boolean,boolean)>($stack168, $stack169);

        generatedName = $stack28;

        $stack170 = this;

        $stack29 = $stack170.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack171 = generatedName;

        virtualinvoke $stack29.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($stack171);

        $stack172 = this;

        $stack31 = $stack172.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack173 = this;

        $stack30 = $stack173.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack32 = virtualinvoke $stack30.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack31.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($stack32);

        $stack175 = this;

        $stack174 = this;

        $stack33 = $stack174.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack34 = virtualinvoke $stack33.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack175.<jdk.internal.reflect.MethodAccessorGenerator: short thisClass> = $stack34;

        $stack176 = isConstructor;

        if $stack176 == 0 goto label04;

        if forSerialization == 0 goto label03;

        $stack160 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack160.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("jdk/internal/reflect/SerializationConstructorAccessorImpl");

        goto label05;

     label03:
        $stack146 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack146.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("jdk/internal/reflect/ConstructorAccessorImpl");

        goto label05;

     label04:
        $stack35 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack35.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("jdk/internal/reflect/MethodAccessorImpl");

     label05:
        $stack147#3 = this;

        $stack147#4 = $stack147#3;

        $stack37#5 = $stack147#4.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack37#6 = $stack37#5;

        $stack148#7 = this;

        $stack148#8 = $stack148#7;

        $stack36#9 = $stack148#8.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack36#10 = $stack36#9;

        $stack38#11 = virtualinvoke $stack36#10.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack38#12 = $stack38#11;

        virtualinvoke $stack37#6.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($stack38#12);

        $stack150#13 = this;

        $stack150#14 = $stack150#13;

        $stack149#15 = this;

        $stack149#16 = $stack149#15;

        $stack39#17 = $stack149#16.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack39#18 = $stack39#17;

        $stack40#19 = virtualinvoke $stack39#18.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack40#20 = $stack40#19;

        $stack150#14.<jdk.internal.reflect.MethodAccessorGenerator: short superClass> = $stack40#20;

        $stack151#21 = this;

        $stack151#22 = $stack151#21;

        $stack41#23 = $stack151#22.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack41#24 = $stack41#23;

        $stack152#25 = declaringClass;

        $stack152#26 = $stack152#25;

        $stack153#27 = 0;

        $stack153#28 = $stack153#27;

        $stack42#29 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($stack152#26, $stack153#28);

        $stack42#30 = $stack42#29;

        virtualinvoke $stack41#24.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($stack42#30);

        $stack154#31 = this;

        $stack154#32 = $stack154#31;

        $stack44#33 = $stack154#32.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack44#34 = $stack44#33;

        $stack155#35 = this;

        $stack155#36 = $stack155#35;

        $stack43#37 = $stack155#36.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack43#38 = $stack43#37;

        $stack45#39 = virtualinvoke $stack43#38.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack45#40 = $stack45#39;

        virtualinvoke $stack44#34.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($stack45#40);

        $stack157#41 = this;

        $stack157#42 = $stack157#41;

        $stack156#43 = this;

        $stack156#44 = $stack156#43;

        $stack46#45 = $stack156#44.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack46#46 = $stack46#45;

        $stack47#47 = virtualinvoke $stack46#46.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack47#48 = $stack47#47;

        $stack157#42.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass> = $stack47#48;

        $stack158#49 = 0;

        $stack158#50 = $stack158#49;

        serializationTargetClassIdx#51 = $stack158#50;

        $stack159#52 = forSerialization;

        $stack159#53 = $stack159#52;

        if $stack159#53 == 0 goto label06;

        $stack130 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack131 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(serializationTargetClass, 0);

        virtualinvoke $stack130.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($stack131);

        $stack133 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack132 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack134 = virtualinvoke $stack132.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack133.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($stack134);

        $stack135 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack136 = virtualinvoke $stack135.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        serializationTargetClassIdx#51 = $stack136;

     label06:
        $stack137 = this;

        $stack48 = $stack137.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack138 = name;

        virtualinvoke $stack48.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($stack138);

        $stack139 = this;

        $stack49 = $stack139.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack140 = this;

        $stack50 = virtualinvoke $stack140.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>();

        virtualinvoke $stack49.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($stack50);

        $stack141 = this;

        $stack52 = $stack141.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack142 = this;

        $stack51 = $stack142.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack53 = virtualinvoke $stack51.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack143 = 1;

        $stack54 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short sub(short,short)>($stack53, $stack143);

        $stack144 = this;

        $stack55 = $stack144.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack56 = virtualinvoke $stack55.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack52.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($stack54, $stack56);

        $stack145 = this;

        $stack57 = virtualinvoke $stack145.<jdk.internal.reflect.MethodAccessorGenerator: boolean isInterface()>();

        if $stack57 == 0 goto label07;

        $stack127 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack128 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        $stack126 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack129 = virtualinvoke $stack126.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack127.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolInterfaceMethodref(short,short)>($stack128, $stack129);

        goto label09;

     label07:
        if forSerialization == 0 goto label08;

        $stack121 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack120 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack122 = virtualinvoke $stack120.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack121.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>(serializationTargetClassIdx#51, $stack122);

        goto label09;

     label08:
        $stack59 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack60 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        $stack58 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack61 = virtualinvoke $stack58.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack59.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($stack60, $stack61);

     label09:
        $stack124#54 = this;

        $stack124#55 = $stack124#54;

        $stack123#56 = this;

        $stack123#57 = $stack123#56;

        $stack62#58 = $stack123#57.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack62#59 = $stack62#58;

        $stack63#60 = virtualinvoke $stack62#59.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack63#61 = $stack63#60;

        $stack124#55.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef> = $stack63#61;

        $stack125#62 = isConstructor;

        $stack125#63 = $stack125#62;

        if $stack125#63 == 0 goto label10;

        $stack116 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack116.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("newInstance");

        goto label11;

     label10:
        $stack64 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack64.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("invoke");

     label11:
        $stack118 = this;

        $stack117 = this;

        $stack65 = $stack117.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack66 = virtualinvoke $stack65.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack118.<jdk.internal.reflect.MethodAccessorGenerator: short invokeIdx> = $stack66;

        $stack119 = isConstructor;

        if $stack119 == 0 goto label12;

        $stack109 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack109.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("([Ljava/lang/Object;)Ljava/lang/Object;");

        goto label13;

     label12:
        $stack67 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack67.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");

     label13:
        $stack111 = this;

        $stack110 = this;

        $stack68 = $stack110.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack69 = virtualinvoke $stack68.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack111.<jdk.internal.reflect.MethodAccessorGenerator: short invokeDescriptorIdx> = $stack69;

        $stack114 = this;

        $stack112 = this;

        $stack70 = $stack112.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack71 = virtualinvoke $stack70.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack113 = 2;

        $stack72 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short add(short,short)>($stack71, $stack113);

        $stack114.<jdk.internal.reflect.MethodAccessorGenerator: short nonPrimitiveParametersBaseIdx> = $stack72;

        $stack115 = 0;

        i#64 = $stack115;

     label14:
        $stack103#65 = i#64;

        $stack103#66 = $stack103#65;

        $stack102#67 = parameterTypes;

        $stack102#68 = $stack102#67;

        $stack73#69 = lengthof $stack102#68;

        $stack73#70 = $stack73#69;

        if $stack103#66 >= $stack73#70 goto label16;

        c = parameterTypes[i#64];

        $stack101 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>(c);

        if $stack101 != 0 goto label15;

        $stack104 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack105 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(c, 0);

        virtualinvoke $stack104.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($stack105);

        $stack107 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack106 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack108 = virtualinvoke $stack106.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $stack107.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($stack108);

     label15:
        i#64 = i#64 + 1;

        goto label14;

     label16:
        virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: void emitCommonConstantPoolEntries()>();

        if usesPrimitives == 0 goto label17;

        virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: void emitBoxingContantPoolEntries()>();

     label17:
        $stack99 = this;

        $stack74 = $stack99.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack75 = virtualinvoke $stack74.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $stack100 = numCPEntries#2;

        $i1 = (int) $stack75;

        $i2 = (int) $stack100;

        if $i1 == $i2 goto label18;

        $u2 = new java.lang.InternalError;

        $stack89 = $u2;

        $u1 = new java.lang.StringBuilder;

        $stack90 = $u1;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack91 = virtualinvoke $stack90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adjust this code (cpi = ");

        $stack92 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack93 = virtualinvoke $stack92.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $i3 = (int) $stack93;

        $stack94 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $stack95 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numCPEntries = ");

        $i4 = (int) numCPEntries#2;

        $stack96 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $stack97 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack98 = virtualinvoke $stack97.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<java.lang.InternalError: void <init>(java.lang.String)>($stack98);

        throw $stack89;

     label18:
        $stack76 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack76.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(1);

        $stack78 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack77 = this.<jdk.internal.reflect.MethodAccessorGenerator: short thisClass>;

        virtualinvoke $stack78.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack77);

        $stack80 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $stack79 = this.<jdk.internal.reflect.MethodAccessorGenerator: short superClass>;

        virtualinvoke $stack80.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack79);

        $stack81 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack81.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(0);

        $stack82 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack82.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(0);

        $stack83 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack83.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(2);

        virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: void emitConstructor()>();

        virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: void emitInvoke()>();

        $stack84 = this.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $stack84.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(0);

        interfaceinvoke vec.<jdk.internal.reflect.ByteVector: void trim()>();

        $stack85 = interfaceinvoke vec.<jdk.internal.reflect.ByteVector: byte[] getData()>();

        i#71 = $stack85;

        $u3 = new jdk.internal.reflect.MethodAccessorGenerator$1;

        $stack86 = $u3;

        specialinvoke $u3.<jdk.internal.reflect.MethodAccessorGenerator$1: void <init>(jdk.internal.reflect.MethodAccessorGenerator,java.lang.String,byte[],java.lang.Class)>(this, generatedName, i#71, declaringClass);

        $stack87 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($stack86);

        $stack88 = (jdk.internal.reflect.MagicAccessorImpl) $stack87;

        return $stack88;

        nop;
    }

    private void emitInvoke()
    {
        java.lang.Class[] $stack12, $stack22, $stack133, $stack150, $stack19#8, $stack19#9, $stack27#24, $stack27#25, $stack145#33, $stack145#34;
        int $stack13, $stack23, $stack35, $stack121, $stack124, $stack129, $stack134, $stack136, $stack160, $stack183, $stack20#10, $stack20#11, i#19, $stack142#20, $stack142#21, $stack28#26, $stack28#27, j#30, $stack152#31, $stack152#32, $stack146#35, $stack146#36, $i0, $i1, $i2;
        java.lang.Class $stack33, $stack53, $stack55, $stack56, $stack118, $stack120, $stack122, $stack127, $stack161, $stack164, $stack166, $stack170, $stack171, $stack174, $stack186, paramType#28, c#37;
        jdk.internal.reflect.ClassFileAssembler $stack14, cb, $stack131, $stack163, $stack168, $stack169, $stack173, $stack176, $stack178, $stack184, $stack185, $stack188, $stack190, $stack192, $stack194, $stack195, $stack199, $stack200, $stack210, $stack125#39, $stack125#40, $stack57#48, $stack57#49, $stack58#50, $stack58#51, $stack60#55, $stack60#56, $stack64#59, $stack64#60, $stack66#69, $stack66#70, $stack67#75, $stack67#76, $stack68#77, $stack68#78, $stack72#79, $stack72#80, $stack73#89, $stack73#90, $stack74#91, $stack74#92, $stack76#96, $stack76#97, $stack78#100, $stack78#101, $stack79#106, $stack79#107, $stack80#108, $stack80#109, $stack84#110, $stack84#111, $stack85#120, $stack85#121, $stack45#122, $stack45#123, c#124, $stack87#125, $stack87#126, $stack89#129, $stack89#130, $stack91#133, $stack91#134, $stack93#137, $stack93#138, $stack95#143, $stack95#144, $stack97#147, $stack97#148, $stack99#151, $stack99#152, $stack101#155, $stack101#156, $stack103#161, $stack103#162, $stack105#165, $stack105#166, $stack107#169, $stack107#170, $stack109#173, $stack109#174, $stack111#185, $stack111#186, $stack115#189, $stack115#190, $stack116#191, $stack116#192, $u1, $u7;
        boolean $stack15, $stack16, $stack17, $stack30, $stack31, $stack32, $stack54, $stack137, $stack139, $stack143, $stack151, $stack153, $stack156, $stack207, $stack21#14, $stack21#15, $stack37#46, $stack37#47;
        byte $stack135, count#18;
        short $stack24, $stack25, $stack26, $stack29, $stack34, $stack119, $stack123, $stack128, $stack130, $stack138, $stack140, $stack147, $stack148, $stack154, $stack157, $stack158, $stack203, $stack212, $stack213, $stack214, $stack215, $stack217, illegalArgStartPC#1, paramTypeCPIdx#16, i#38, $stack36#41, $stack36#42, paramType#43, $stack38#52, $stack38#53, l_2#54, $stack39#63, $stack39#64, $stack40#73, $stack40#74, $stack41#83, $stack41#84, $stack42#93, $stack42#94, j#95, $stack43#104, $stack43#105, $stack44#114, $stack44#115, $stack86#127, $stack86#128, $stack88#131, $stack88#132, $stack90#135, $stack90#136, $stack46#141, $stack46#142, $stack94#145, $stack94#146, $stack96#149, $stack96#150, $stack98#153, $stack98#154, $stack47#159, $stack47#160, $stack102#163, $stack102#164, $stack104#167, $stack104#168, $stack106#171, $stack106#172, $stack48#177, $stack48#178, $stack49#183, $stack49#184, $stack50#187, $stack50#188, $stack52#201, $stack52#202;
        java.lang.InternalError $stack149, $stack220, $u0, $u6;
        jdk.internal.reflect.MethodAccessorGenerator this, $stack132, $stack162, $stack165, $stack167, $stack175, $stack179, $stack180, $stack187, $stack189, $stack193, $stack196, $stack202, $stack219, $stack216#6, $stack216#7, $stack208#12, $stack208#13, $stack141#22, $stack141#23, $stack126#44, $stack126#45, $stack61#61, $stack61#62, $stack65#71, $stack65#72, $stack69#81, $stack69#82, $stack77#102, $stack77#103, $stack81#112, $stack81#113, $stack92#139, $stack92#140, $stack100#157, $stack100#158, $stack108#175, $stack108#176, $stack117#179, $stack117#180, $stack110#181, $stack110#182, $stack113#199, $stack113#200;
        short[] $stack51#195, $stack51#196;
        jdk.internal.reflect.Label $stack144, $stack155, $stack172, $stack177, $stack191, $stack201, $stack209, $stack211, l_1#2, $stack18#3, $stack18#4, l_1#5, nextParamLabel#17, l_2#29, $u2, $u3, $u4, $u5;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $stack12 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack13 = lengthof $stack12;

        $i0 = (int) 65535;

        if $stack13 <= $i0 goto label01;

        $u0 = new java.lang.InternalError;

        $stack220 = $u0;

        specialinvoke $u0.<java.lang.InternalError: void <init>(java.lang.String)>("Can\'t handle more than 65535 parameters");

        throw $stack220;

     label01:
        $u1 = new jdk.internal.reflect.ClassFileAssembler;

        $stack14 = $u1;

        specialinvoke $u1.<jdk.internal.reflect.ClassFileAssembler: void <init>()>();

        cb = $stack14;

        $stack15 = this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack15 == 0 goto label02;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void setMaxLocals(int)>(2);

        goto label03;

     label02:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void setMaxLocals(int)>(3);

     label03:
        illegalArgStartPC#1 = 0;

        $stack219 = this;

        $stack16 = $stack219.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack16 == 0 goto label04;

        $stack217 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($stack217);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        goto label05;

     label04:
        $stack17 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isStatic()>();

        if $stack17 != 0 goto label05;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        $u2 = new jdk.internal.reflect.Label;

        $stack211 = $u2;

        specialinvoke $u2.<jdk.internal.reflect.Label: void <init>()>();

        l_1#2 = $stack211;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_ifnonnull(jdk.internal.reflect.Label)>(l_1#2);

        $stack212 = this.<jdk.internal.reflect.MethodAccessorGenerator: short nullPointerClass>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($stack212);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        $stack213 = this.<jdk.internal.reflect.MethodAccessorGenerator: short nullPointerCtorIdx>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack213, 0, 0);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        virtualinvoke l_1#2.<jdk.internal.reflect.Label: void bind()>();

        $stack214 = virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        illegalArgStartPC#1 = $stack214;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        $stack215 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_checkcast(short)>($stack215);

     label05:
        $u3 = new jdk.internal.reflect.Label;

        $stack18#3 = $u3;

        $stack18#4 = $stack18#3;

        specialinvoke $u3.<jdk.internal.reflect.Label: void <init>()>();

        l_1#5 = $stack18#4;

        $stack216#6 = this;

        $stack216#7 = $stack216#6;

        $stack19#8 = $stack216#7.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack19#9 = $stack19#8;

        $stack20#10 = lengthof $stack19#9;

        $stack20#11 = $stack20#10;

        if $stack20#11 != 0 goto label08;

        $stack207 = this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack207 == 0 goto label06;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        goto label07;

     label06:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

     label07:
        $stack210 = cb;

        $stack209 = l_1#5;

        virtualinvoke $stack210.<jdk.internal.reflect.ClassFileAssembler: void opc_ifnull(jdk.internal.reflect.Label)>($stack209);

     label08:
        $stack208#12 = this;

        $stack208#13 = $stack208#12;

        $stack21#14 = $stack208#13.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        $stack21#15 = $stack21#14;

        if $stack21#15 == 0 goto label09;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        goto label10;

     label09:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

     label10:
        $stack188 = cb;

        virtualinvoke $stack188.<jdk.internal.reflect.ClassFileAssembler: void opc_arraylength()>();

        $stack190 = cb;

        $stack189 = this;

        $stack22 = $stack189.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack23 = lengthof $stack22;

        $stack24 = (short) $stack23;

        virtualinvoke $stack190.<jdk.internal.reflect.ClassFileAssembler: void opc_sipush(short)>($stack24);

        $stack192 = cb;

        $stack191 = l_1#5;

        virtualinvoke $stack192.<jdk.internal.reflect.ClassFileAssembler: void opc_if_icmpeq(jdk.internal.reflect.Label)>($stack191);

        $stack194 = cb;

        $stack193 = this;

        $stack25 = $stack193.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentClass>;

        virtualinvoke $stack194.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($stack25);

        $stack195 = cb;

        virtualinvoke $stack195.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        $stack199 = cb;

        $stack196 = this;

        $stack26 = $stack196.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentCtorIdx>;

        virtualinvoke $stack199.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack26, 0, 0);

        $stack200 = cb;

        virtualinvoke $stack200.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        $stack201 = l_1#5;

        virtualinvoke $stack201.<jdk.internal.reflect.Label: void bind()>();

        $stack202 = this;

        $stack203 = $stack202.<jdk.internal.reflect.MethodAccessorGenerator: short nonPrimitiveParametersBaseIdx>;

        paramTypeCPIdx#16 = $stack203;

        nextParamLabel#17 = null;

        count#18 = 1;

        i#19 = 0;

     label11:
        $stack142#20 = i#19;

        $stack142#21 = $stack142#20;

        $stack141#22 = this;

        $stack141#23 = $stack141#22;

        $stack27#24 = $stack141#23.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack27#25 = $stack27#24;

        $stack28#26 = lengthof $stack27#25;

        $stack28#27 = $stack28#26;

        if $stack142#21 >= $stack28#27 goto label28;

        $stack133 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        paramType#28 = $stack133[i#19];

        $stack134 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>(paramType#28);

        $stack135 = (byte) $stack134;

        $i1 = (int) $stack135;

        $stack136 = count#18 + $i1;

        count#18 = (byte) $stack136;

        if nextParamLabel#17 == null goto label12;

        virtualinvoke nextParamLabel#17.<jdk.internal.reflect.Label: void bind()>();

        nextParamLabel#17 = null;

     label12:
        $stack187 = this;

        $stack137 = $stack187.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack137 == 0 goto label13;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        goto label14;

     label13:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

     label14:
        $stack184 = cb;

        $stack183 = i#19;

        $stack138 = (short) $stack183;

        virtualinvoke $stack184.<jdk.internal.reflect.ClassFileAssembler: void opc_sipush(short)>($stack138);

        $stack185 = cb;

        virtualinvoke $stack185.<jdk.internal.reflect.ClassFileAssembler: void opc_aaload()>();

        $stack186 = paramType#28;

        $stack139 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>($stack186);

        if $stack139 == 0 goto label26;

        $stack143 = this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack143 == 0 goto label15;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_astore_2()>();

        goto label16;

     label15:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_astore_3()>();

     label16:
        l_2#29 = null;

        $u4 = new jdk.internal.reflect.Label;

        $stack144 = $u4;

        specialinvoke $u4.<jdk.internal.reflect.Label: void <init>()>();

        nextParamLabel#17 = $stack144;

        j#30 = 0;

     label17:
        $stack152#31 = j#30;

        $stack152#32 = $stack152#31;

        $stack145#33 = <jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] primitiveTypes>;

        $stack145#34 = $stack145#33;

        $stack146#35 = lengthof $stack145#34;

        $stack146#36 = $stack146#35;

        if $stack152#32 >= $stack146#36 goto label24;

        $stack150 = <jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] primitiveTypes>;

        c#37 = $stack150[j#30];

        $stack151 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean canWidenTo(java.lang.Class,java.lang.Class)>(c#37, paramType#28);

        if $stack151 == 0 goto label23;

        if l_2#29 == null goto label18;

        virtualinvoke l_2#29.<jdk.internal.reflect.Label: void bind()>();

     label18:
        $stack180 = this;

        $stack153 = $stack180.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack153 == 0 goto label19;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

        goto label20;

     label19:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_3()>();

     label20:
        $stack176 = cb;

        $stack175 = this;

        $stack174 = c#37;

        $stack154 = virtualinvoke $stack175.<jdk.internal.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>($stack174);

        virtualinvoke $stack176.<jdk.internal.reflect.ClassFileAssembler: void opc_instanceof(short)>($stack154);

        $u5 = new jdk.internal.reflect.Label;

        $stack155 = $u5;

        specialinvoke $u5.<jdk.internal.reflect.Label: void <init>()>();

        l_2#29 = $stack155;

        $stack178 = cb;

        $stack177 = l_2#29;

        virtualinvoke $stack178.<jdk.internal.reflect.ClassFileAssembler: void opc_ifeq(jdk.internal.reflect.Label)>($stack177);

        $stack179 = this;

        $stack156 = $stack179.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack156 == 0 goto label21;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

        goto label22;

     label21:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_3()>();

     label22:
        $stack163 = cb;

        $stack162 = this;

        $stack161 = c#37;

        $stack157 = virtualinvoke $stack162.<jdk.internal.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>($stack161);

        virtualinvoke $stack163.<jdk.internal.reflect.ClassFileAssembler: void opc_checkcast(short)>($stack157);

        $stack168 = cb;

        $stack165 = this;

        $stack164 = c#37;

        $stack158 = virtualinvoke $stack165.<jdk.internal.reflect.MethodAccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>($stack164);

        $stack167 = this;

        $stack166 = c#37;

        $stack160 = virtualinvoke $stack167.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($stack166);

        virtualinvoke $stack168.<jdk.internal.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>($stack158, 0, $stack160);

        $stack169 = cb;

        $stack170 = c#37;

        $stack171 = paramType#28;

        staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: void emitWideningBytecodeForPrimitiveConversion(jdk.internal.reflect.ClassFileAssembler,java.lang.Class,java.lang.Class)>($stack169, $stack170, $stack171);

        $stack173 = cb;

        $stack172 = nextParamLabel#17;

        virtualinvoke $stack173.<jdk.internal.reflect.ClassFileAssembler: void opc_goto(jdk.internal.reflect.Label)>($stack172);

     label23:
        j#30 = j#30 + 1;

        goto label17;

     label24:
        if l_2#29 != null goto label25;

        $u6 = new java.lang.InternalError;

        $stack149 = $u6;

        specialinvoke $u6.<java.lang.InternalError: void <init>(java.lang.String)>("Must have found at least identity conversion");

        throw $stack149;

     label25:
        virtualinvoke l_2#29.<jdk.internal.reflect.Label: void bind()>();

        $stack147 = this.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentClass>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($stack147);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        $stack148 = this.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentCtorIdx>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack148, 0, 0);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        goto label27;

     label26:
        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_checkcast(short)>(paramTypeCPIdx#16);

        $stack140 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short add(short,short)>(paramTypeCPIdx#16, 2);

        paramTypeCPIdx#16 = $stack140;

     label27:
        i#19 = i#19 + 1;

        goto label11;

     label28:
        if nextParamLabel#17 == null goto label29;

        virtualinvoke nextParamLabel#17.<jdk.internal.reflect.Label: void bind()>();

     label29:
        $stack131 = cb;

        $stack29 = virtualinvoke $stack131.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        i#38 = $stack29;

        $stack132 = this;

        $stack30 = $stack132.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $stack30 == 0 goto label30;

        $stack130 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack130, count#18, 0);

        goto label33;

     label30:
        $stack31 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isStatic()>();

        if $stack31 == 0 goto label31;

        $stack128 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        $stack127 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack129 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($stack127);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokestatic(short,int,int)>($stack128, count#18, $stack129);

        goto label33;

     label31:
        $stack32 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: boolean isInterface()>();

        if $stack32 == 0 goto label32;

        $stack123 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        $stack122 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack124 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($stack122);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokeinterface(short,int,byte,int)>($stack123, count#18, count#18, $stack124);

        goto label33;

     label32:
        $stack34 = this.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        $stack33 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack35 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($stack33);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>($stack34, count#18, $stack35);

     label33:
        $stack125#39 = cb;

        $stack125#40 = $stack125#39;

        $stack36#41 = virtualinvoke $stack125#40.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        $stack36#42 = $stack36#41;

        paramType#43 = $stack36#42;

        $stack126#44 = this;

        $stack126#45 = $stack126#44;

        $stack37#46 = $stack126#45.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        $stack37#47 = $stack37#46;

        if $stack37#47 != 0 goto label35;

        $stack53 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack54 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>($stack53);

        if $stack54 == 0 goto label34;

        $stack118 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack119 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: short boxingMethodForPrimitiveType(java.lang.Class)>($stack118);

        $stack120 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack121 = virtualinvoke this.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($stack120);

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_invokestatic(short,int,int)>($stack119, $stack121, 0);

        goto label35;

     label34:
        $stack56 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack55 = <java.lang.Void: java.lang.Class TYPE>;

        if $stack56 != $stack55 goto label35;

        virtualinvoke cb.<jdk.internal.reflect.ClassFileAssembler: void opc_aconst_null()>();

     label35:
        $stack57#48 = cb;

        $stack57#49 = $stack57#48;

        virtualinvoke $stack57#49.<jdk.internal.reflect.ClassFileAssembler: void opc_areturn()>();

        $stack58#50 = cb;

        $stack58#51 = $stack58#50;

        $stack38#52 = virtualinvoke $stack58#51.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        $stack38#53 = $stack38#52;

        l_2#54 = $stack38#53;

        $stack60#55 = cb;

        $stack60#56 = $stack60#55;

        virtualinvoke $stack60#56.<jdk.internal.reflect.ClassFileAssembler: void setStack(int)>(1);

        $stack64#59 = cb;

        $stack64#60 = $stack64#59;

        $stack61#61 = this;

        $stack61#62 = $stack61#61;

        $stack39#63 = $stack61#62.<jdk.internal.reflect.MethodAccessorGenerator: short toStringIdx>;

        $stack39#64 = $stack39#63;

        virtualinvoke $stack64#60.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack39#64, 0, 1);

        $stack66#69 = cb;

        $stack66#70 = $stack66#69;

        $stack65#71 = this;

        $stack65#72 = $stack65#71;

        $stack40#73 = $stack65#72.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentClass>;

        $stack40#74 = $stack40#73;

        virtualinvoke $stack66#70.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($stack40#74);

        $stack67#75 = cb;

        $stack67#76 = $stack67#75;

        virtualinvoke $stack67#76.<jdk.internal.reflect.ClassFileAssembler: void opc_dup_x1()>();

        $stack68#77 = cb;

        $stack68#78 = $stack68#77;

        virtualinvoke $stack68#78.<jdk.internal.reflect.ClassFileAssembler: void opc_swap()>();

        $stack72#79 = cb;

        $stack72#80 = $stack72#79;

        $stack69#81 = this;

        $stack69#82 = $stack69#81;

        $stack41#83 = $stack69#82.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentStringCtorIdx>;

        $stack41#84 = $stack41#83;

        virtualinvoke $stack72#80.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack41#84, 1, 0);

        $stack73#89 = cb;

        $stack73#90 = $stack73#89;

        virtualinvoke $stack73#90.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        $stack74#91 = cb;

        $stack74#92 = $stack74#91;

        $stack42#93 = virtualinvoke $stack74#92.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        $stack42#94 = $stack42#93;

        j#95 = $stack42#94;

        $stack76#96 = cb;

        $stack76#97 = $stack76#96;

        virtualinvoke $stack76#97.<jdk.internal.reflect.ClassFileAssembler: void setStack(int)>(1);

        $stack78#100 = cb;

        $stack78#101 = $stack78#100;

        $stack77#102 = this;

        $stack77#103 = $stack77#102;

        $stack43#104 = $stack77#103.<jdk.internal.reflect.MethodAccessorGenerator: short invocationTargetClass>;

        $stack43#105 = $stack43#104;

        virtualinvoke $stack78#101.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($stack43#105);

        $stack79#106 = cb;

        $stack79#107 = $stack79#106;

        virtualinvoke $stack79#107.<jdk.internal.reflect.ClassFileAssembler: void opc_dup_x1()>();

        $stack80#108 = cb;

        $stack80#109 = $stack80#108;

        virtualinvoke $stack80#109.<jdk.internal.reflect.ClassFileAssembler: void opc_swap()>();

        $stack84#110 = cb;

        $stack84#111 = $stack84#110;

        $stack81#112 = this;

        $stack81#113 = $stack81#112;

        $stack44#114 = $stack81#113.<jdk.internal.reflect.MethodAccessorGenerator: short invocationTargetCtorIdx>;

        $stack44#115 = $stack44#114;

        virtualinvoke $stack84#111.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($stack44#115, 1, 0);

        $stack85#120 = cb;

        $stack85#121 = $stack85#120;

        virtualinvoke $stack85#121.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        $u7 = new jdk.internal.reflect.ClassFileAssembler;

        $stack45#122 = $u7;

        $stack45#123 = $stack45#122;

        specialinvoke $u7.<jdk.internal.reflect.ClassFileAssembler: void <init>()>();

        c#124 = $stack45#123;

        $stack87#125 = c#124;

        $stack87#126 = $stack87#125;

        $stack86#127 = illegalArgStartPC#1;

        $stack86#128 = $stack86#127;

        virtualinvoke $stack87#126.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack86#128);

        $stack89#129 = c#124;

        $stack89#130 = $stack89#129;

        $stack88#131 = i#38;

        $stack88#132 = $stack88#131;

        virtualinvoke $stack89#130.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack88#132);

        $stack91#133 = c#124;

        $stack91#134 = $stack91#133;

        $stack90#135 = l_2#54;

        $stack90#136 = $stack90#135;

        virtualinvoke $stack91#134.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack90#136);

        $stack93#137 = c#124;

        $stack93#138 = $stack93#137;

        $stack92#139 = this;

        $stack92#140 = $stack92#139;

        $stack46#141 = $stack92#140.<jdk.internal.reflect.MethodAccessorGenerator: short classCastClass>;

        $stack46#142 = $stack46#141;

        virtualinvoke $stack93#138.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack46#142);

        $stack95#143 = c#124;

        $stack95#144 = $stack95#143;

        $stack94#145 = illegalArgStartPC#1;

        $stack94#146 = $stack94#145;

        virtualinvoke $stack95#144.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack94#146);

        $stack97#147 = c#124;

        $stack97#148 = $stack97#147;

        $stack96#149 = i#38;

        $stack96#150 = $stack96#149;

        virtualinvoke $stack97#148.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack96#150);

        $stack99#151 = c#124;

        $stack99#152 = $stack99#151;

        $stack98#153 = l_2#54;

        $stack98#154 = $stack98#153;

        virtualinvoke $stack99#152.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack98#154);

        $stack101#155 = c#124;

        $stack101#156 = $stack101#155;

        $stack100#157 = this;

        $stack100#158 = $stack100#157;

        $stack47#159 = $stack100#158.<jdk.internal.reflect.MethodAccessorGenerator: short nullPointerClass>;

        $stack47#160 = $stack47#159;

        virtualinvoke $stack101#156.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack47#160);

        $stack103#161 = c#124;

        $stack103#162 = $stack103#161;

        $stack102#163 = i#38;

        $stack102#164 = $stack102#163;

        virtualinvoke $stack103#162.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack102#164);

        $stack105#165 = c#124;

        $stack105#166 = $stack105#165;

        $stack104#167 = paramType#43;

        $stack104#168 = $stack104#167;

        virtualinvoke $stack105#166.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack104#168);

        $stack107#169 = c#124;

        $stack107#170 = $stack107#169;

        $stack106#171 = j#95;

        $stack106#172 = $stack106#171;

        virtualinvoke $stack107#170.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack106#172);

        $stack109#173 = c#124;

        $stack109#174 = $stack109#173;

        $stack108#175 = this;

        $stack108#176 = $stack108#175;

        $stack48#177 = $stack108#176.<jdk.internal.reflect.MethodAccessorGenerator: short throwableClass>;

        $stack48#178 = $stack48#177;

        virtualinvoke $stack109#174.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($stack48#178);

        $stack117#179 = this;

        $stack117#180 = $stack117#179;

        $stack110#181 = this;

        $stack110#182 = $stack110#181;

        $stack49#183 = $stack110#182.<jdk.internal.reflect.MethodAccessorGenerator: short invokeIdx>;

        $stack49#184 = $stack49#183;

        $stack111#185 = cb;

        $stack111#186 = $stack111#185;

        $stack50#187 = virtualinvoke $stack111#186.<jdk.internal.reflect.ClassFileAssembler: short getMaxLocals()>();

        $stack50#188 = $stack50#187;

        $stack115#189 = cb;

        $stack115#190 = $stack115#189;

        $stack116#191 = c#124;

        $stack116#192 = $stack116#191;

        $stack51#195 = newarray (short)[1];

        $stack51#196 = $stack51#195;

        $stack113#199 = this;

        $stack113#200 = $stack113#199;

        $stack52#201 = $stack113#200.<jdk.internal.reflect.MethodAccessorGenerator: short invocationTargetClass>;

        $stack52#202 = $stack52#201;

        $stack51#196[0] = $stack52#202;

        $i2 = (int) $stack50#188;

        virtualinvoke $stack117#180.<jdk.internal.reflect.MethodAccessorGenerator: void emitMethod(short,int,jdk.internal.reflect.ClassFileAssembler,jdk.internal.reflect.ClassFileAssembler,short[])>($stack49#184, $i2, $stack115#190, $stack116#192, $stack51#196);

        return;
    }

    private boolean usesPrimitiveTypes()
    {
        java.lang.Class[] $stack4, $stack6;
        bottom_type i;
        jdk.internal.reflect.MethodAccessorGenerator this, $stack9;
        int $stack5, $stack10, i#1;
        java.lang.Class $stack2, $stack7;
        boolean $stack3, $stack8;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $stack2 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack3 = virtualinvoke $stack2.<java.lang.Class: boolean isPrimitive()>();

        if $stack3 == 0 goto label1;

        return 1;

     label1:
        i#1 = 0;

     label2:
        $stack10 = i#1;

        $stack9 = this;

        $stack4 = $stack9.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack5 = lengthof $stack4;

        if $stack10 >= $stack5 goto label4;

        $stack6 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack7 = $stack6[i#1];

        $stack8 = virtualinvoke $stack7.<java.lang.Class: boolean isPrimitive()>();

        if $stack8 == 0 goto label3;

        return 1;

     label3:
        i#1 = i#1 + 1;

        goto label2;

     label4:
        return 0;

        nop;
    }

    private int numNonPrimitiveParameterTypes()
    {
        java.lang.Class[] $stack3, $stack5;
        bottom_type num, i;
        jdk.internal.reflect.MethodAccessorGenerator this, $stack8;
        int $stack4, $stack9, num#1, i#2;
        java.lang.Class $stack6;
        boolean $stack7;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        num#1 = 0;

        i#2 = 0;

     label1:
        $stack9 = i#2;

        $stack8 = this;

        $stack3 = $stack8.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack4 = lengthof $stack3;

        if $stack9 >= $stack4 goto label3;

        $stack5 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack6 = $stack5[i#2];

        $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isPrimitive()>();

        if $stack7 != 0 goto label2;

        num#1 = num#1 + 1;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return num#1;

        nop;
    }

    private boolean isInterface()
    {
        java.lang.Class $stack1;
        jdk.internal.reflect.MethodAccessorGenerator this;
        boolean $stack2;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $stack1 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class declaringClass>;

        $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isInterface()>();

        return $stack2;

        nop;
    }

    private java.lang.String buildInternalSignature()
    {
        bottom_type i;
        int $stack6, $stack17, i#1;
        java.lang.String $stack9, $stack11, $stack14;
        java.lang.Class[] $stack5, $stack12;
        jdk.internal.reflect.MethodAccessorGenerator this, $stack16;
        java.lang.StringBuilder $stack3, sb, $stack4, $stack7, $stack10, $stack15;
        java.lang.Class $stack8, $stack13;

        this := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        sb = $stack3;

        $stack4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i#1 = 0;

     label1:
        $stack17 = i#1;

        $stack16 = this;

        $stack5 = $stack16.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack6 = lengthof $stack5;

        if $stack17 >= $stack6 goto label2;

        $stack12 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $stack13 = $stack12[i#1];

        $stack14 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($stack13, 1);

        $stack15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        i#1 = i#1 + 1;

        goto label1;

     label2:
        $stack7 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack8 = this.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $stack9 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($stack8, 1);

        $stack10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack11;

        nop;
    }

    private static synchronized java.lang.String generateName(boolean, boolean)
    {
        bottom_type num;
        int $stack3, $stack4, $stack9, $stack10, $stack15, $stack16, num#1, num#2, num#3;
        java.lang.String $stack8, $stack14, $stack20;
        boolean isConstructor, forSerialization;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack11, $stack12, $stack13, $stack17, $stack18, $stack19;

        isConstructor := @parameter0: boolean;

        forSerialization := @parameter1: boolean;

        if isConstructor == 0 goto label2;

        if forSerialization == 0 goto label1;

        $stack15 = <jdk.internal.reflect.MethodAccessorGenerator: int serializationConstructorSymnum>;

        $stack16 = $stack15 + 1;

        <jdk.internal.reflect.MethodAccessorGenerator: int serializationConstructorSymnum> = $stack16;

        num#1 = $stack16;

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk/internal/reflect/GeneratedSerializationConstructorAccessor");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(num#1);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack20;

     label1:
        $stack9 = <jdk.internal.reflect.MethodAccessorGenerator: int constructorSymnum>;

        $stack10 = $stack9 + 1;

        <jdk.internal.reflect.MethodAccessorGenerator: int constructorSymnum> = $stack10;

        num#2 = $stack10;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk/internal/reflect/GeneratedConstructorAccessor");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(num#2);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack14;

     label2:
        $stack3 = <jdk.internal.reflect.MethodAccessorGenerator: int methodSymnum>;

        $stack4 = $stack3 + 1;

        <jdk.internal.reflect.MethodAccessorGenerator: int methodSymnum> = $stack4;

        num#3 = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk/internal/reflect/GeneratedMethodAccessor");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(num#3);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack8;

        nop;
    }

    public static void <clinit>()
    {
        <jdk.internal.reflect.MethodAccessorGenerator: short NUM_SERIALIZATION_CPOOL_ENTRIES> = 2;

        <jdk.internal.reflect.MethodAccessorGenerator: short NUM_METHODS> = 2;

        <jdk.internal.reflect.MethodAccessorGenerator: short NUM_BASE_CPOOL_ENTRIES> = 12;

        return;
    }
}
