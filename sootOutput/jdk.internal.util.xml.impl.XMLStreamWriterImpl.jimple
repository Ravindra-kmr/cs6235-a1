public class jdk.internal.util.xml.impl.XMLStreamWriterImpl extends java.lang.Object implements jdk.internal.util.xml.XMLStreamWriter
{
    static final int STATE_XML_DECL;
    static final int STATE_PROLOG;
    static final int STATE_DTD_DECL;
    static final int STATE_ELEMENT;
    static final int ELEMENT_STARTTAG_OPEN;
    static final int ELEMENT_STARTTAG_CLOSE;
    static final int ELEMENT_ENDTAG_OPEN;
    static final int ELEMENT_ENDTAG_CLOSE;
    public static final char CLOSE_START_TAG;
    public static final char OPEN_START_TAG;
    public static final java.lang.String OPEN_END_TAG;
    public static final char CLOSE_END_TAG;
    public static final java.lang.String START_CDATA;
    public static final java.lang.String END_CDATA;
    public static final java.lang.String CLOSE_EMPTY_ELEMENT;
    public static final java.lang.String ENCODING_PREFIX;
    public static final char SPACE;
    public static final char AMPERSAND;
    public static final char DOUBLEQUOT;
    public static final char SEMICOLON;
    private int _state;
    private jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle;
    private jdk.internal.util.xml.impl.XMLWriter _writer;
    private java.nio.charset.Charset _charset;
    boolean _escapeCharacters;
    private boolean _doIndent;
    private char[] _lineSep;

    public void <init>(java.io.OutputStream) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.io.OutputStream os;
        java.nio.charset.Charset $stack2;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        os := @parameter0: java.io.OutputStream;

        $stack2 = <jdk.internal.util.xml.XMLStreamWriter: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(os, $stack2);

        return;

        nop;
    }

    public void <init>(java.io.OutputStream, java.nio.charset.Charset) throws jdk.internal.util.xml.XMLStreamException
    {
        java.io.OutputStream os, $stack11;
        jdk.internal.util.xml.XMLStreamException $stack15;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack10, $stack13;
        jdk.internal.util.xml.impl.XMLWriter $stack7;
        java.nio.charset.Charset cs, $stack6, $stack8, $stack9;
        char[] $stack5;
        java.lang.String $stack4;
        java.io.UnsupportedEncodingException $stack14, e;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        os := @parameter0: java.io.OutputStream;

        cs := @parameter1: java.nio.charset.Charset;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: int _state> = 0;

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: boolean _escapeCharacters> = 1;

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: boolean _doIndent> = 1;

        $stack4 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $stack5 = virtualinvoke $stack4.<java.lang.String: char[] toCharArray()>();

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: char[] _lineSep> = $stack5;

        if cs != null goto label1;

        $stack9 = <jdk.internal.util.xml.XMLStreamWriter: java.nio.charset.Charset DEFAULT_CHARSET>;

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset _charset> = $stack9;

        goto label4;

     label1:
        $stack6 = virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset checkCharset(java.nio.charset.Charset)>(cs);

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset _charset> = $stack6;

     label2:
        goto label4;

     label3:
        $stack14 := @caughtexception;

        e = $stack14;

        $stack15 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack15.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.Throwable)>(e);

        throw $stack15;

     label4:
        $stack13 = this;

        $stack7 = new jdk.internal.util.xml.impl.XMLWriter;

        $stack11 = os;

        $stack10 = this;

        $stack8 = $stack10.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset _charset>;

        specialinvoke $stack7.<jdk.internal.util.xml.impl.XMLWriter: void <init>(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)>($stack11, null, $stack8);

        $stack13.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer> = $stack7;

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void writeStartDocument() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.lang.String $stack2;
        java.nio.charset.Charset $stack1;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset _charset>;

        $stack2 = virtualinvoke $stack1.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeStartDocument(java.lang.String,java.lang.String)>($stack2, "1.0");

        return;

        nop;
    }

    public void writeStartDocument(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        java.nio.charset.Charset $stack2;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.lang.String $stack3, version;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        version := @parameter0: java.lang.String;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset _charset>;

        $stack3 = virtualinvoke $stack2.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeStartDocument(java.lang.String,java.lang.String,java.lang.String)>($stack3, version, null);

        return;

        nop;
    }

    public void writeStartDocument(java.lang.String, java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.lang.String encoding, version;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        encoding := @parameter0: java.lang.String;

        version := @parameter1: java.lang.String;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeStartDocument(java.lang.String,java.lang.String,java.lang.String)>(encoding, version, null);

        return;

        nop;
    }

    public void writeStartDocument(java.lang.String, java.lang.String, java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack15, $stack17, $stack22, $stack24, $stack26;
        byte $stack27;
        bottom_type enc, version;
        jdk.internal.util.xml.XMLStreamException $stack32, $stack34;
        java.io.UnsupportedEncodingException $stack33, e;
        java.nio.charset.Charset $stack7, $stack29;
        int $stack6;
        java.lang.String encoding, standalone, $stack16, $stack21, $stack23, $stack25, $stack28, $stack30, $stack31, version#1, enc#2;
        jdk.internal.util.xml.impl.XMLWriter $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack18, $stack19, $stack20;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        encoding := @parameter0: java.lang.String;

        version#1 := @parameter1: java.lang.String;

        standalone := @parameter2: java.lang.String;

        $stack6 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: int _state>;

        if $stack6 <= 0 goto label1;

        $stack32 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack32.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String)>("XML declaration must be as the first line in the XML document.");

        throw $stack32;

     label1:
        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: int _state> = 1;

        enc#2 = encoding;

        if enc#2 != null goto label2;

        $stack29 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset _charset>;

        $stack30 = virtualinvoke $stack29.<java.nio.charset.Charset: java.lang.String name()>();

        enc#2 = $stack30;

        goto label5;

     label2:
        $stack7 = virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.nio.charset.Charset getCharset(java.lang.String)>(encoding);

     label3:
        goto label5;

     label4:
        $stack33 := @caughtexception;

        e = $stack33;

        $stack34 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack34.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.Throwable)>(e);

        throw $stack34;

     label5:
        $stack31 = version#1;

        if $stack31 != null goto label6;

        version#1 = "1.0";

     label6:
        $stack22 = this;

        $stack8 = $stack22.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack23 = "<?xml version=\"";

        virtualinvoke $stack8.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack23);

        $stack24 = this;

        $stack9 = $stack24.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack25 = version#1;

        virtualinvoke $stack9.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack25);

        $stack26 = this;

        $stack10 = $stack26.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack27 = 34;

        virtualinvoke $stack10.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>($stack27);

        $stack28 = enc#2;

        if $stack28 == null goto label7;

        $stack18 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack18.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>(" encoding=\"");

        $stack19 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack19.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>(enc#2);

        $stack20 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack20.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(34);

     label7:
        $stack21 = standalone;

        if $stack21 == null goto label8;

        $stack12 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack12.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>(" standalone=\"");

        $stack13 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack13.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>(standalone);

        $stack14 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack14.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(34);

     label8:
        $stack15 = this;

        $stack11 = $stack15.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack16 = "?>";

        virtualinvoke $stack11.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack16);

        $stack17 = this;

        virtualinvoke $stack17.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeLineSeparator()>();

        return;

        nop;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public void writeDTD(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack6#1, $stack6#2, $stack8#7, $stack8#8;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack2, $stack4;
        bottom_type $stack3, $stack6, $stack7, $stack8;
        int $stack5;
        java.lang.String dtd, $stack7#5, $stack7#6;
        jdk.internal.util.xml.impl.XMLWriter $stack3#3, $stack3#4;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        dtd := @parameter0: java.lang.String;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack2 == null goto label1;

        $stack4 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack5 = virtualinvoke $stack4.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack5 != 10 goto label1;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label1:
        $stack6#1 = this;

        $stack6#2 = $stack6#1;

        $stack3#3 = $stack6#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack3#4 = $stack3#3;

        $stack7#5 = dtd;

        $stack7#6 = $stack7#5;

        virtualinvoke $stack3#4.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack7#6);

        $stack8#7 = this;

        $stack8#8 = $stack8#7;

        virtualinvoke $stack8#8.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeLineSeparator()>();

        return;

        nop;
    }

    public void writeStartElement(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack14#1, $stack14#2, $stack11#5, $stack11#6, $stack10#7, $stack10#8, $stack15#15, $stack15#16, $stack16#17, $stack16#18;
        bottom_type $stack5, $stack6, $stack7, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17;
        boolean $stack3, $stack13#13, $stack13#14;
        jdk.internal.util.xml.XMLStreamException $stack2;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack4, $stack8, $stack5#3, $stack5#4, $stack6#9, $stack6#10;
        int $stack9;
        java.lang.String localName, $stack18, $stack12#11, $stack12#12, $stack17#21, $stack17#22;
        jdk.internal.util.xml.impl.XMLWriter $stack7#19, $stack7#20;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        localName := @parameter0: java.lang.String;

        if localName == null goto label1;

        $stack3 = virtualinvoke localName.<java.lang.String: boolean isEmpty()>();

        if $stack3 == 0 goto label2;

     label1:
        $stack2 = new jdk.internal.util.xml.XMLStreamException;

        $stack18 = "Local Name cannot be null or empty";

        specialinvoke $stack2.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String)>($stack18);

        throw $stack2;

     label2:
        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: int _state> = 4;

        $stack4 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack4 == null goto label3;

        $stack8 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack9 = virtualinvoke $stack8.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack9 != 10 goto label3;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label3:
        $stack14#1 = this;

        $stack14#2 = $stack14#1;

        $stack5#3 = new jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element;

        $stack5#4 = $stack5#3;

        $stack11#5 = this;

        $stack11#6 = $stack11#5;

        $stack10#7 = this;

        $stack10#8 = $stack10#7;

        $stack6#9 = $stack10#8.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack6#10 = $stack6#9;

        $stack12#11 = localName;

        $stack12#12 = $stack12#11;

        $stack13#13 = 0;

        $stack13#14 = $stack13#13;

        specialinvoke $stack5#4.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: void <init>(jdk.internal.util.xml.impl.XMLStreamWriterImpl,jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element,java.lang.String,boolean)>($stack11#6, $stack6#10, $stack12#12, $stack13#14);

        $stack14#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle> = $stack5#4;

        $stack15#15 = this;

        $stack15#16 = $stack15#15;

        virtualinvoke $stack15#16.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void openStartTag()>();

        $stack16#17 = this;

        $stack16#18 = $stack16#17;

        $stack7#19 = $stack16#18.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack7#20 = $stack7#19;

        $stack17#21 = localName;

        $stack17#22 = $stack17#21;

        virtualinvoke $stack7#20.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack17#22);

        return;

        nop;
    }

    public void writeEmptyElement(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack12#1, $stack12#2, $stack9#5, $stack9#6, $stack8#7, $stack8#8, $stack13#15, $stack13#16, $stack14#17, $stack14#18;
        bottom_type $stack3, $stack4, $stack5, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15;
        boolean $stack11#13, $stack11#14;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack2, $stack6, $stack3#3, $stack3#4, $stack4#9, $stack4#10;
        int $stack7;
        java.lang.String localName, $stack10#11, $stack10#12, $stack15#21, $stack15#22;
        jdk.internal.util.xml.impl.XMLWriter $stack5#19, $stack5#20;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        localName := @parameter0: java.lang.String;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack2 == null goto label1;

        $stack6 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack7 = virtualinvoke $stack6.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack7 != 10 goto label1;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label1:
        $stack12#1 = this;

        $stack12#2 = $stack12#1;

        $stack3#3 = new jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element;

        $stack3#4 = $stack3#3;

        $stack9#5 = this;

        $stack9#6 = $stack9#5;

        $stack8#7 = this;

        $stack8#8 = $stack8#7;

        $stack4#9 = $stack8#8.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack4#10 = $stack4#9;

        $stack10#11 = localName;

        $stack10#12 = $stack10#11;

        $stack11#13 = 1;

        $stack11#14 = $stack11#13;

        specialinvoke $stack3#4.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: void <init>(jdk.internal.util.xml.impl.XMLStreamWriterImpl,jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element,java.lang.String,boolean)>($stack9#6, $stack4#10, $stack10#12, $stack11#14);

        $stack12#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle> = $stack3#4;

        $stack13#15 = this;

        $stack13#16 = $stack13#15;

        virtualinvoke $stack13#16.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void openStartTag()>();

        $stack14#17 = this;

        $stack14#18 = $stack14#17;

        $stack5#19 = $stack14#18.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack5#20 = $stack5#19;

        $stack15#21 = localName;

        $stack15#22 = $stack15#21;

        virtualinvoke $stack5#20.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack15#22);

        return;

        nop;
    }

    public void writeAttribute(java.lang.String, java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.XMLStreamException $stack9;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack3;
        jdk.internal.util.xml.impl.XMLWriter $stack5, $stack6, $stack7, $stack8;
        int $stack4;
        java.lang.String localName, value;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        localName := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        $stack3 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack4 = virtualinvoke $stack3.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack4 == 10 goto label1;

        $stack9 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack9.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String)>("Attribute not associated with any element");

        throw $stack9;

     label1:
        $stack5 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack5.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(32);

        $stack6 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack6.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>(localName);

        $stack7 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack7.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("=\"");

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeXMLContent(java.lang.String,boolean,boolean)>(value, 1, 1);

        $stack8 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack8.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(34);

        return;

        nop;
    }

    public void writeEndDocument() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack13, $stack14, $stack7#1, $stack7#2;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack1, $stack3, $stack5, $stack6, $stack9, $stack15, $stack2#3, $stack2#4;
        bottom_type $stack2, $stack7;
        int $stack16;
        java.lang.String $stack11;
        boolean $stack4;
        jdk.internal.util.xml.impl.XMLWriter $stack8, $stack10, $stack12;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack1 == null goto label1;

        $stack15 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack16 = virtualinvoke $stack15.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack16 != 10 goto label1;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label1:
        $stack7#1 = this;

        $stack7#2 = $stack7#1;

        $stack2#3 = $stack7#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack2#4 = $stack2#3;

        if $stack2#4 == null goto label3;

        $stack3 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack4 = virtualinvoke $stack3.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: boolean isEmpty()>();

        if $stack4 != 0 goto label2;

        $stack8 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack8.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("</");

        $stack10 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack9 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack11 = virtualinvoke $stack9.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: java.lang.String getLocalName()>();

        virtualinvoke $stack10.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack11);

        $stack12 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack12.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(62);

     label2:
        $stack14 = this;

        $stack13 = this;

        $stack5 = $stack13.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack6 = virtualinvoke $stack5.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element getParent()>();

        $stack14.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle> = $stack6;

        goto label1;

     label3:
        return;

        nop;
    }

    public void writeEndElement() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack15#1, $stack15#2;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack1, $stack3, $stack6, $stack10, $stack11, $stack13, $stack2#3, $stack2#4;
        bottom_type $stack2, $stack15;
        int $stack14;
        java.lang.String $stack8;
        boolean $stack4;
        jdk.internal.util.xml.XMLStreamException $stack12;
        jdk.internal.util.xml.impl.XMLWriter $stack5, $stack7, $stack9;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack1 == null goto label1;

        $stack13 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack14 = virtualinvoke $stack13.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack14 != 10 goto label1;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label1:
        $stack15#1 = this;

        $stack15#2 = $stack15#1;

        $stack2#3 = $stack15#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack2#4 = $stack2#3;

        if $stack2#4 != null goto label2;

        $stack12 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack12.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String)>("No element was found to write");

        throw $stack12;

     label2:
        $stack3 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack4 = virtualinvoke $stack3.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: boolean isEmpty()>();

        if $stack4 == 0 goto label3;

        return;

     label3:
        $stack5 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack5.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("</");

        $stack7 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack6 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack8 = virtualinvoke $stack6.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: java.lang.String getLocalName()>();

        virtualinvoke $stack7.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack8);

        $stack9 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack9.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(62);

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeLineSeparator()>();

        $stack10 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack11 = virtualinvoke $stack10.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element getParent()>();

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle> = $stack11;

        return;

        nop;
    }

    public void writeCData(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack8#1, $stack8#2, $stack10#7, $stack10#8, $stack12#13, $stack12#14;
        bottom_type $stack3, $stack4, $stack5, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        jdk.internal.util.xml.XMLStreamException $stack14;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack2, $stack6;
        int $stack7;
        java.lang.String cdata, $stack9#5, $stack9#6, $stack11#11, $stack11#12, $stack13#17, $stack13#18;
        jdk.internal.util.xml.impl.XMLWriter $stack3#3, $stack3#4, $stack4#9, $stack4#10, $stack5#15, $stack5#16;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        cdata := @parameter0: java.lang.String;

        if cdata != null goto label1;

        $stack14 = new jdk.internal.util.xml.XMLStreamException;

        specialinvoke $stack14.<jdk.internal.util.xml.XMLStreamException: void <init>(java.lang.String)>("cdata cannot be null");

        throw $stack14;

     label1:
        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack2 == null goto label2;

        $stack6 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack7 = virtualinvoke $stack6.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack7 != 10 goto label2;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label2:
        $stack8#1 = this;

        $stack8#2 = $stack8#1;

        $stack3#3 = $stack8#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack3#4 = $stack3#3;

        $stack9#5 = "<![CDATA[";

        $stack9#6 = $stack9#5;

        virtualinvoke $stack3#4.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack9#6);

        $stack10#7 = this;

        $stack10#8 = $stack10#7;

        $stack4#9 = $stack10#8.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack4#10 = $stack4#9;

        $stack11#11 = cdata;

        $stack11#12 = $stack11#11;

        virtualinvoke $stack4#10.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack11#12);

        $stack12#13 = this;

        $stack12#14 = $stack12#13;

        $stack5#15 = $stack12#14.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack5#16 = $stack5#15;

        $stack13#17 = "]]>";

        $stack13#18 = $stack13#17;

        virtualinvoke $stack5#16.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack13#18);

        return;

        nop;
    }

    public void writeCharacters(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack6#1, $stack6#2;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack2, $stack3;
        bottom_type $stack5, $stack6;
        int $stack4;
        java.lang.String data, $stack5#3, $stack5#4;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        data := @parameter0: java.lang.String;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack2 == null goto label1;

        $stack3 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack4 = virtualinvoke $stack3.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack4 != 10 goto label1;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label1:
        $stack6#1 = this;

        $stack6#2 = $stack6#1;

        $stack5#3 = data;

        $stack5#4 = $stack5#3;

        virtualinvoke $stack6#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeXMLContent(java.lang.String)>($stack5#4);

        return;

        nop;
    }

    public void writeCharacters(char[], int, int) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack12#1, $stack12#2, $stack8#9, $stack8#10;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack4, $stack6;
        bottom_type $stack5, $stack8, $stack9, $stack10, $stack11, $stack12;
        int start, len, $stack7, $stack10#5, $stack10#6, $stack11#7, $stack11#8;
        boolean $stack5#11, $stack5#12;
        char[] data, $stack9#3, $stack9#4;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        data := @parameter0: char[];

        start := @parameter1: int;

        len := @parameter2: int;

        $stack4 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        if $stack4 == null goto label1;

        $stack6 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack7 = virtualinvoke $stack6.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: int getState()>();

        if $stack7 != 10 goto label1;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void closeStartTag()>();

     label1:
        $stack12#1 = this;

        $stack12#2 = $stack12#1;

        $stack9#3 = data;

        $stack9#4 = $stack9#3;

        $stack10#5 = start;

        $stack10#6 = $stack10#5;

        $stack11#7 = len;

        $stack11#8 = $stack11#7;

        $stack8#9 = this;

        $stack8#10 = $stack8#9;

        $stack5#11 = $stack8#10.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: boolean _escapeCharacters>;

        $stack5#12 = $stack5#11;

        virtualinvoke $stack12#2.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeXMLContent(char[],int,int,boolean)>($stack9#4, $stack10#6, $stack11#8, $stack5#12);

        return;

        nop;
    }

    public void close() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack4, $stack6, $stack8;
        jdk.internal.util.xml.impl.XMLWriter $stack1, $stack2;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        if $stack1 == null goto label1;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack2.<jdk.internal.util.xml.impl.XMLWriter: void close()>();

     label1:
        $stack4 = this;

        $stack4.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer> = null;

        $stack6 = this;

        $stack6.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle> = null;

        $stack8 = this;

        $stack8.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: int _state> = 0;

        return;
    }

    public void flush() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        jdk.internal.util.xml.impl.XMLWriter $stack1, $stack2;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        if $stack1 == null goto label1;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack2.<jdk.internal.util.xml.impl.XMLWriter: void flush()>();

     label1:
        return;

        nop;
    }

    public void setDoIndent(boolean)
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        boolean doIndent;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        doIndent := @parameter0: boolean;

        this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: boolean _doIndent> = doIndent;

        return;

        nop;
    }

    private void writeXMLContent(char[], int, int, boolean) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        bottom_type startWritePos, index;
        boolean escapeChars, $stack12;
        int start, length, end, $stack9, $stack13, $stack16, $stack17, $stack18, $stack21, $stack24, startWritePos#1, index#2, $i0, $i1;
        java.lang.String $stack28;
        jdk.internal.util.xml.impl.XMLWriter $stack10, $stack11, $stack14, $stack15, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26, $stack27, $stack29, $stack30;
        char ch;
        char[] content;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        content := @parameter0: char[];

        start := @parameter1: int;

        length := @parameter2: int;

        escapeChars := @parameter3: boolean;

        if escapeChars != 0 goto label1;

        $stack30 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack30.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>(content, start, length);

        return;

     label1:
        startWritePos#1 = start;

        end = start + length;

        index#2 = start;

     label2:
        $stack17 = index#2;

        $stack16 = end;

        if $stack17 >= $stack16 goto label8;

        ch = content[index#2];

        $stack11 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack12 = virtualinvoke $stack11.<jdk.internal.util.xml.impl.XMLWriter: boolean canEncode(char)>(ch);

        if $stack12 != 0 goto label3;

        $stack25 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack24 = index#2 - startWritePos#1;

        virtualinvoke $stack25.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>(content, startWritePos#1, $stack24);

        $stack26 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack26.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&#x");

        $stack27 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $i0 = (int) ch;

        $stack28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $stack27.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack28);

        $stack29 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack29.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(59);

        startWritePos#1 = index#2 + 1;

        goto label7;

     label3:
        $i1 = (int) ch;

        lookupswitch($i1)
        {
            case 38: goto label5;
            case 60: goto label4;
            case 62: goto label6;
            default: goto label7;
        };

     label4:
        $stack19 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack18 = index#2 - startWritePos#1;

        virtualinvoke $stack19.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>(content, startWritePos#1, $stack18);

        $stack20 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack20.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&lt;");

        startWritePos#1 = index#2 + 1;

        goto label7;

     label5:
        $stack22 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack21 = index#2 - startWritePos#1;

        virtualinvoke $stack22.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>(content, startWritePos#1, $stack21);

        $stack23 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack23.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&amp;");

        startWritePos#1 = index#2 + 1;

        goto label7;

     label6:
        $stack14 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack13 = index#2 - startWritePos#1;

        virtualinvoke $stack14.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>(content, startWritePos#1, $stack13);

        $stack15 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack15.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&gt;");

        startWritePos#1 = index#2 + 1;

     label7:
        index#2 = index#2 + 1;

        goto label2;

     label8:
        $stack10 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack9 = end - startWritePos#1;

        virtualinvoke $stack10.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>(content, startWritePos#1, $stack9);

        return;

        nop;
    }

    private void writeXMLContent(java.lang.String) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.lang.String content;
        boolean $stack2, $stack3;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        content := @parameter0: java.lang.String;

        if content == null goto label1;

        $stack2 = virtualinvoke content.<java.lang.String: boolean isEmpty()>();

        if $stack2 != 0 goto label1;

        $stack3 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: boolean _escapeCharacters>;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeXMLContent(java.lang.String,boolean,boolean)>(content, $stack3, 0);

     label1:
        return;

        nop;
    }

    private void writeXMLContent(java.lang.String, boolean, boolean) throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        bottom_type startWritePos, index;
        boolean escapeChars, $stack13, escapeDoubleQuotes, $stack29;
        int $stack8, end, $stack9, $stack14, $stack17, $stack18, $stack19, $stack22, $stack25, $stack30, $stack31, $stack32, startWritePos#1, index#2, $i0, $i1;
        java.lang.String content, $stack36;
        jdk.internal.util.xml.impl.XMLWriter $stack10, $stack12, $stack15, $stack16, $stack20, $stack21, $stack23, $stack24, $stack26, $stack27, $stack28, $stack33, $stack34, $stack35, $stack37, $stack38;
        char $stack11, ch;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        content := @parameter0: java.lang.String;

        escapeChars := @parameter1: boolean;

        escapeDoubleQuotes := @parameter2: boolean;

        if escapeChars != 0 goto label01;

        $stack38 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack38.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>(content);

        return;

     label01:
        startWritePos#1 = 0;

        $stack8 = virtualinvoke content.<java.lang.String: int length()>();

        end = $stack8;

        index#2 = 0;

     label02:
        $stack18 = index#2;

        $stack17 = end;

        if $stack18 >= $stack17 goto label11;

        $stack11 = virtualinvoke content.<java.lang.String: char charAt(int)>(index#2);

        ch = $stack11;

        $stack12 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack13 = virtualinvoke $stack12.<jdk.internal.util.xml.impl.XMLWriter: boolean canEncode(char)>(ch);

        if $stack13 != 0 goto label03;

        $stack33 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack32 = index#2 - startWritePos#1;

        virtualinvoke $stack33.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String,int,int)>(content, startWritePos#1, $stack32);

        $stack34 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack34.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&#x");

        $stack35 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $i0 = (int) ch;

        $stack36 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $stack35.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>($stack36);

        $stack37 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack37.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(59);

        startWritePos#1 = index#2 + 1;

        goto label10;

     label03:
        $i1 = (int) ch;

        lookupswitch($i1)
        {
            case 34: goto label07;
            case 38: goto label05;
            case 60: goto label04;
            case 62: goto label06;
            default: goto label10;
        };

     label04:
        $stack20 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack19 = index#2 - startWritePos#1;

        virtualinvoke $stack20.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String,int,int)>(content, startWritePos#1, $stack19);

        $stack21 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack21.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&lt;");

        startWritePos#1 = index#2 + 1;

        goto label10;

     label05:
        $stack23 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack22 = index#2 - startWritePos#1;

        virtualinvoke $stack23.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String,int,int)>(content, startWritePos#1, $stack22);

        $stack24 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack24.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&amp;");

        startWritePos#1 = index#2 + 1;

        goto label10;

     label06:
        $stack15 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack14 = index#2 - startWritePos#1;

        virtualinvoke $stack15.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String,int,int)>(content, startWritePos#1, $stack14);

        $stack16 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack16.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&gt;");

        startWritePos#1 = index#2 + 1;

        goto label10;

     label07:
        $stack26 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack25 = index#2 - startWritePos#1;

        virtualinvoke $stack26.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String,int,int)>(content, startWritePos#1, $stack25);

        if escapeDoubleQuotes == 0 goto label08;

        $stack28 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack28.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("&quot;");

        goto label09;

     label08:
        $stack27 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack27.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(34);

     label09:
        $stack30 = index#2;

        $stack29 = 1;

        $stack31 = $stack30 + $stack29;

        startWritePos#1 = $stack31;

     label10:
        index#2 = index#2 + 1;

        goto label02;

     label11:
        $stack10 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack9 = end - startWritePos#1;

        virtualinvoke $stack10.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String,int,int)>(content, startWritePos#1, $stack9);

        return;

        nop;
    }

    private void openStartTag() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack1;
        jdk.internal.util.xml.impl.XMLWriter $stack2;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        virtualinvoke $stack1.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: void setState(int)>(10);

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack2.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(60);

        return;

        nop;
    }

    private void closeStartTag() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this, $stack7, $stack10;
        jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element $stack1, $stack4, $stack5, $stack6;
        jdk.internal.util.xml.impl.XMLWriter $stack3, $stack9;
        byte $stack8;
        boolean $stack2;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack2 = virtualinvoke $stack1.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: boolean isEmpty()>();

        if $stack2 == 0 goto label1;

        $stack9 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack9.<jdk.internal.util.xml.impl.XMLWriter: void write(java.lang.String)>("/>");

        goto label2;

     label1:
        $stack3 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        virtualinvoke $stack3.<jdk.internal.util.xml.impl.XMLWriter: void write(int)>(62);

     label2:
        $stack10 = this;

        $stack4 = $stack10.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack5 = virtualinvoke $stack4.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element getParent()>();

        if $stack5 != null goto label3;

        virtualinvoke this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: void writeLineSeparator()>();

     label3:
        $stack7 = this;

        $stack6 = $stack7.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element _currentEle>;

        $stack8 = 11;

        virtualinvoke $stack6.<jdk.internal.util.xml.impl.XMLStreamWriterImpl$Element: void setState(int)>($stack8);

        return;

        nop;
    }

    private void writeLineSeparator() throws jdk.internal.util.xml.XMLStreamException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        int $stack3;
        char[] $stack2, $stack4;
        jdk.internal.util.xml.impl.XMLWriter $stack5;
        boolean $stack1;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        $stack1 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: boolean _doIndent>;

        if $stack1 == 0 goto label1;

        $stack5 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: jdk.internal.util.xml.impl.XMLWriter _writer>;

        $stack4 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: char[] _lineSep>;

        $stack2 = this.<jdk.internal.util.xml.impl.XMLStreamWriterImpl: char[] _lineSep>;

        $stack3 = lengthof $stack2;

        virtualinvoke $stack5.<jdk.internal.util.xml.impl.XMLWriter: void write(char[],int,int)>($stack4, 0, $stack3);

     label1:
        return;

        nop;
    }

    private java.nio.charset.Charset getCharset(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.lang.IllegalArgumentException $stack11, ex;
        java.nio.charset.Charset $stack5, cs;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String encoding, $stack10;
        java.io.UnsupportedEncodingException $stack6, $stack12;
        boolean $stack4;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        encoding := @parameter0: java.lang.String;

        $stack4 = virtualinvoke encoding.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF-32");

        if $stack4 == 0 goto label1;

        $stack6 = new java.io.UnsupportedEncodingException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The basic XMLWriter does not support ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(encoding);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>($stack10);

        throw $stack6;

     label1:
        $stack5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(encoding);

        cs = $stack5;

     label2:
        goto label4;

     label3:
        $stack11 := @caughtexception;

        ex = $stack11;

        $stack12 = new java.io.UnsupportedEncodingException;

        specialinvoke $stack12.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(encoding);

        throw $stack12;

     label4:
        return cs;

        nop;

        catch java.nio.charset.IllegalCharsetNameException from label1 to label2 with label3;
        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label3;
    }

    private java.nio.charset.Charset checkCharset(java.nio.charset.Charset) throws java.io.UnsupportedEncodingException
    {
        jdk.internal.util.xml.impl.XMLStreamWriterImpl this;
        java.nio.charset.Charset charset;
        java.lang.StringBuilder $stack5, $stack6, $stack8;
        java.lang.String $stack2, $stack7, $stack9;
        java.io.UnsupportedEncodingException $stack4;
        boolean $stack3;

        this := @this: jdk.internal.util.xml.impl.XMLStreamWriterImpl;

        charset := @parameter0: java.nio.charset.Charset;

        $stack2 = virtualinvoke charset.<java.nio.charset.Charset: java.lang.String name()>();

        $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF-32");

        if $stack3 == 0 goto label1;

        $stack4 = new java.io.UnsupportedEncodingException;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The basic XMLWriter does not support ");

        $stack7 = virtualinvoke charset.<java.nio.charset.Charset: java.lang.String name()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack4.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>($stack9);

        throw $stack4;

     label1:
        return charset;

        nop;
    }

    public static void <clinit>()
    {
        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char SEMICOLON> = 59;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char DOUBLEQUOT> = 34;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char AMPERSAND> = 38;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char SPACE> = 32;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.lang.String ENCODING_PREFIX> = "&#x";

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.lang.String CLOSE_EMPTY_ELEMENT> = "/>";

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.lang.String END_CDATA> = "]]>";

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.lang.String START_CDATA> = "<![CDATA[";

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char CLOSE_END_TAG> = 62;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: java.lang.String OPEN_END_TAG> = "</";

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char OPEN_START_TAG> = 60;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: char CLOSE_START_TAG> = 62;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int ELEMENT_ENDTAG_CLOSE> = 13;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int ELEMENT_ENDTAG_OPEN> = 12;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int ELEMENT_STARTTAG_CLOSE> = 11;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int ELEMENT_STARTTAG_OPEN> = 10;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int STATE_ELEMENT> = 4;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int STATE_DTD_DECL> = 3;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int STATE_PROLOG> = 2;

        <jdk.internal.util.xml.impl.XMLStreamWriterImpl: int STATE_XML_DECL> = 1;

        return;
    }
}
