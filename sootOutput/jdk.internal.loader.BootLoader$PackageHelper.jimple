class jdk.internal.loader.BootLoader$PackageHelper extends java.lang.Object
{
    private static final jdk.internal.misc.JavaLangAccess JLA;

    void <init>()
    {
        jdk.internal.loader.BootLoader$PackageHelper this;

        this := @this: jdk.internal.loader.BootLoader$PackageHelper;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;

        nop;
    }

    static java.lang.Package definePackage(java.lang.String, java.lang.String)
    {
        java.util.jar.Manifest man, $stack11, $stack9#1;
        java.net.URL $stack6, url, $stack12;
        jdk.internal.misc.JavaLangAccess $stack14;
        bottom_type $stack9;
        java.lang.InternalError $stack17;
        java.lang.String location, name, $stack10, $stack21;
        boolean $stack13;
        java.lang.Package $stack8, $stack16;
        jdk.internal.loader.BuiltinClassLoader $stack7, $stack15;
        java.lang.Module $stack5, module;
        java.lang.StringBuilder $stack18, $stack19, $stack20;

        name := @parameter0: java.lang.String;

        location := @parameter1: java.lang.String;

        $stack5 = staticinvoke <jdk.internal.loader.BootLoader$PackageHelper: java.lang.Module findModule(java.lang.String)>(location);

        module = $stack5;

        if module == null goto label2;

        $stack13 = virtualinvoke name.<java.lang.String: boolean isEmpty()>();

        if $stack13 == 0 goto label1;

        $stack17 = new java.lang.InternalError;

        $stack18 = new java.lang.StringBuilder;

        specialinvoke $stack18.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("empty package in ");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack17.<java.lang.InternalError: void <init>(java.lang.String)>($stack21);

        throw $stack17;

     label1:
        $stack14 = <jdk.internal.loader.BootLoader$PackageHelper: jdk.internal.misc.JavaLangAccess JLA>;

        $stack15 = staticinvoke <jdk.internal.loader.ClassLoaders: jdk.internal.loader.BuiltinClassLoader bootLoader()>();

        $stack16 = interfaceinvoke $stack14.<jdk.internal.misc.JavaLangAccess: java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.Module)>($stack15, name, module);

        return $stack16;

     label2:
        $stack6 = staticinvoke <jdk.internal.loader.BootLoader$PackageHelper: java.net.URL toFileURL(java.lang.String)>(location);

        url = $stack6;

        if url == null goto label3;

        $stack9#1 = staticinvoke <jdk.internal.loader.BootLoader$PackageHelper: java.util.jar.Manifest getManifest(java.lang.String)>(location);

        goto label4;

     label3:
        $stack9#1 = null;

     label4:
        man = $stack9#1;

        $stack7 = staticinvoke <jdk.internal.loader.ClassLoaders: jdk.internal.loader.BuiltinClassLoader bootLoader()>();

        $stack10 = name;

        $stack11 = man;

        $stack12 = url;

        $stack8 = virtualinvoke $stack7.<jdk.internal.loader.BuiltinClassLoader: java.lang.Package defineOrCheckPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>($stack10, $stack11, $stack12);

        return $stack8;

        nop;
    }

    private static java.lang.Module findModule(java.lang.String)
    {
        java.lang.String[] $stack12;
        java.util.function.Supplier $stack7;
        byte $stack19;
        bottom_type mn, path, $stack16;
        int $stack20;
        java.lang.String location, $stack13, $stack18, $stack21, mn#1, $stack16#3, $stack16#4, path#5;
        java.net.URI $stack10;
        java.nio.file.Path $stack11, $stack14, modulesDir, $stack17, path#2;
        boolean $stack4, $stack5, $stack15;
        java.lang.Module $stack9;
        java.util.Optional $stack6;
        java.lang.Object $stack8;

        location := @parameter0: java.lang.String;

        mn#1 = null;

        $stack4 = virtualinvoke location.<java.lang.String: boolean startsWith(java.lang.String)>("jrt:/");

        if $stack4 == 0 goto label1;

        $stack19 = 5;

        $stack20 = virtualinvoke location.<java.lang.String: int length()>();

        $stack21 = virtualinvoke location.<java.lang.String: java.lang.String substring(int,int)>($stack19, $stack20);

        mn#1 = $stack21;

        goto label2;

     label1:
        $stack5 = virtualinvoke location.<java.lang.String: boolean startsWith(java.lang.String)>("file:/");

        if $stack5 == 0 goto label2;

        $stack10 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(location);

        $stack11 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.net.URI)>($stack10);

        path#2 = $stack11;

        $stack13 = <jdk.internal.loader.BootLoader: java.lang.String JAVA_HOME>;

        $stack12 = newarray (java.lang.String)[1];

        $stack12[0] = "modules";

        $stack14 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.lang.String,java.lang.String[])>($stack13, $stack12);

        modulesDir = $stack14;

        $stack15 = interfaceinvoke path#2.<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>(modulesDir);

        if $stack15 == 0 goto label2;

        $stack17 = interfaceinvoke path#2.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $stack18 = interfaceinvoke $stack17.<java.nio.file.Path: java.lang.String toString()>();

        mn#1 = $stack18;

     label2:
        $stack16#3 = mn#1;

        $stack16#4 = $stack16#3;

        if $stack16#4 == null goto label3;

        path#5 = mn#1;

        $stack6 = staticinvoke <jdk.internal.module.Modules: java.util.Optional findLoadedModule(java.lang.String)>(mn#1);

        $stack7 = staticinvoke <jdk.internal.loader.BootLoader$PackageHelper$lambda_findModule_0__192: java.util.function.Supplier bootstrap$(java.lang.String)>(path#5);

        $stack8 = virtualinvoke $stack6.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>($stack7);

        $stack9 = (java.lang.Module) $stack8;

        return $stack9;

     label3:
        return null;

        nop;
    }

    private static java.net.URL toFileURL(java.lang.String)
    {
        java.net.URL $stack3;
        jdk.internal.loader.BootLoader$PackageHelper$1 $stack1;
        java.lang.Object $stack2;
        java.lang.String location;

        location := @parameter0: java.lang.String;

        $stack1 = new jdk.internal.loader.BootLoader$PackageHelper$1;

        specialinvoke $stack1.<jdk.internal.loader.BootLoader$PackageHelper$1: void <init>(java.lang.String)>(location);

        $stack2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($stack1);

        $stack3 = (java.net.URL) $stack2;

        return $stack3;

        nop;
    }

    private static java.util.jar.Manifest getManifest(java.lang.String)
    {
        java.util.jar.Manifest $stack3;
        jdk.internal.loader.BootLoader$PackageHelper$2 $stack1;
        java.lang.Object $stack2;
        java.lang.String location;

        location := @parameter0: java.lang.String;

        $stack1 = new jdk.internal.loader.BootLoader$PackageHelper$2;

        specialinvoke $stack1.<jdk.internal.loader.BootLoader$PackageHelper$2: void <init>(java.lang.String)>(location);

        $stack2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($stack1);

        $stack3 = (java.util.jar.Manifest) $stack2;

        return $stack3;

        nop;
    }

    public static java.lang.InternalError lambda$findModule$0(java.lang.String)
    {
        java.lang.InternalError $stack1;
        java.lang.StringBuilder $stack2, $stack3, $stack4;
        java.lang.String name, $stack5;

        name := @parameter0: java.lang.String;

        $stack1 = new java.lang.InternalError;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not loaded");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack1.<java.lang.InternalError: void <init>(java.lang.String)>($stack5);

        return $stack1;

        nop;
    }

    static void <clinit>()
    {
        jdk.internal.misc.JavaLangAccess $stack0;

        $stack0 = staticinvoke <jdk.internal.misc.SharedSecrets: jdk.internal.misc.JavaLangAccess getJavaLangAccess()>();

        <jdk.internal.loader.BootLoader$PackageHelper: jdk.internal.misc.JavaLangAccess JLA> = $stack0;

        return;
    }
}
