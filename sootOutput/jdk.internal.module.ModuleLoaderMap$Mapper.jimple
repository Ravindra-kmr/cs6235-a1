public final class jdk.internal.module.ModuleLoaderMap$Mapper extends java.lang.Object implements java.util.function.Function
{
    private final java.util.Map map;

    void <init>(java.util.Map)
    {
        jdk.internal.module.ModuleLoaderMap$Mapper this;
        java.util.Map map;

        this := @this: jdk.internal.module.ModuleLoaderMap$Mapper;

        map := @parameter0: java.util.Map;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.module.ModuleLoaderMap$Mapper: java.util.Map map> = map;

        return;

        nop;
    }

    public java.lang.ClassLoader apply(java.lang.String)
    {
        java.util.Map $stack2;
        java.lang.Object $stack3;
        java.lang.String name;
        java.lang.ClassLoader $stack4;
        jdk.internal.module.ModuleLoaderMap$Mapper this;

        this := @this: jdk.internal.module.ModuleLoaderMap$Mapper;

        name := @parameter0: java.lang.String;

        $stack2 = this.<jdk.internal.module.ModuleLoaderMap$Mapper: java.util.Map map>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(name);

        $stack4 = (java.lang.ClassLoader) $stack3;

        return $stack4;

        nop;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        java.lang.Object l1;
        java.lang.String $stack2;
        java.lang.ClassLoader $stack3;
        jdk.internal.module.ModuleLoaderMap$Mapper this;

        this := @this: jdk.internal.module.ModuleLoaderMap$Mapper;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (java.lang.String) l1;

        $stack3 = virtualinvoke this.<jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.ClassLoader apply(java.lang.String)>($stack2);

        return $stack3;

        nop;
    }
}
