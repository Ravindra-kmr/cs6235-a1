public class jdk.internal.org.objectweb.asm.ByteVector extends java.lang.Object
{
    byte[] data;
    int length;

    public void <init>()
    {
        byte[] $stack1;
        jdk.internal.org.objectweb.asm.ByteVector this;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = newarray (byte)[64];

        this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data> = $stack1;

        return;

        nop;
    }

    public void <init>(int)
    {
        int initialSize;
        byte[] $stack2;
        jdk.internal.org.objectweb.asm.ByteVector this;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        initialSize := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = newarray (byte)[initialSize];

        this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data> = $stack2;

        return;

        nop;
    }

    public jdk.internal.org.objectweb.asm.ByteVector putByte(int)
    {
        byte[] $stack3, $stack8;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack9, $stack12, $stack13;
        byte $stack7;
        bottom_type length;
        int $stack4, $stack5, $stack6, b, $stack10, $stack11, length#1, length#2;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        b := @parameter0: int;

        length#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack5 = length#1 + 1;

        $stack3 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack4 = lengthof $stack3;

        if $stack5 <= $stack4 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(1);

     label1:
        $stack9 = this;

        $stack8 = $stack9.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack6 = length#1;

        length#2 = length#1 + 1;

        $stack10 = b;

        $stack7 = (byte) $stack10;

        $stack8[$stack6] = $stack7;

        $stack12 = this;

        $stack11 = length#2;

        $stack12.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack11;

        $stack13 = this;

        return $stack13;

        nop;
    }

    jdk.internal.org.objectweb.asm.ByteVector put11(int, int)
    {
        byte[] $stack5, data, $stack13, $stack15, $stack17;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack12, $stack19, $stack20;
        byte $stack9, $stack11;
        bottom_type length;
        int $stack6, $stack7, $stack8, b1, $stack10, b2, $stack14, $stack16, $stack18, length#1, length#2, length#3;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        b1 := @parameter0: int;

        b2 := @parameter1: int;

        length#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack7 = length#1 + 2;

        $stack5 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack6 = lengthof $stack5;

        if $stack7 <= $stack6 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(2);

     label1:
        $stack12 = this;

        $stack13 = $stack12.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        data = $stack13;

        $stack15 = data;

        $stack8 = length#1;

        length#2 = length#1 + 1;

        $stack14 = b1;

        $stack9 = (byte) $stack14;

        $stack15[$stack8] = $stack9;

        $stack17 = data;

        $stack10 = length#2;

        length#3 = length#2 + 1;

        $stack16 = b2;

        $stack11 = (byte) $stack16;

        $stack17[$stack10] = $stack11;

        $stack19 = this;

        $stack18 = length#3;

        $stack19.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack18;

        $stack20 = this;

        return $stack20;

        nop;
    }

    public jdk.internal.org.objectweb.asm.ByteVector putShort(int)
    {
        byte[] $stack4, data, $stack13, $stack16, $stack18;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack12, $stack20, $stack21;
        byte $stack9, $stack11, $stack14;
        bottom_type length;
        int $stack5, $stack6, $stack7, s, $stack8, $stack10, $stack15, $stack17, $stack19, length#1, length#2, length#3;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        s := @parameter0: int;

        length#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack6 = length#1 + 2;

        $stack4 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack5 = lengthof $stack4;

        if $stack6 <= $stack5 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(2);

     label1:
        $stack12 = this;

        $stack13 = $stack12.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        data = $stack13;

        $stack16 = data;

        $stack7 = length#1;

        length#2 = length#1 + 1;

        $stack15 = s;

        $stack14 = 8;

        $stack8 = $stack15 >>> $stack14;

        $stack9 = (byte) $stack8;

        $stack16[$stack7] = $stack9;

        $stack18 = data;

        $stack10 = length#2;

        length#3 = length#2 + 1;

        $stack17 = s;

        $stack11 = (byte) $stack17;

        $stack18[$stack10] = $stack11;

        $stack20 = this;

        $stack19 = length#3;

        $stack20.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack19;

        $stack21 = this;

        return $stack21;

        nop;
    }

    jdk.internal.org.objectweb.asm.ByteVector put12(int, int)
    {
        byte[] $stack5, data, $stack16, $stack18, $stack21, $stack23;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack15, $stack25, $stack26;
        byte $stack9, $stack12, $stack14, $stack19;
        bottom_type length;
        int $stack6, $stack7, $stack8, b, $stack10, s, $stack11, $stack13, $stack17, $stack20, $stack22, $stack24, length#1, length#2, length#3, length#4;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        b := @parameter0: int;

        s := @parameter1: int;

        length#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack7 = length#1 + 3;

        $stack5 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack6 = lengthof $stack5;

        if $stack7 <= $stack6 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(3);

     label1:
        $stack15 = this;

        $stack16 = $stack15.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        data = $stack16;

        $stack18 = data;

        $stack8 = length#1;

        length#2 = length#1 + 1;

        $stack17 = b;

        $stack9 = (byte) $stack17;

        $stack18[$stack8] = $stack9;

        $stack21 = data;

        $stack10 = length#2;

        length#3 = length#2 + 1;

        $stack20 = s;

        $stack19 = 8;

        $stack11 = $stack20 >>> $stack19;

        $stack12 = (byte) $stack11;

        $stack21[$stack10] = $stack12;

        $stack23 = data;

        $stack13 = length#3;

        length#4 = length#3 + 1;

        $stack22 = s;

        $stack14 = (byte) $stack22;

        $stack23[$stack13] = $stack14;

        $stack25 = this;

        $stack24 = length#4;

        $stack25.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack24;

        $stack26 = this;

        return $stack26;

        nop;
    }

    public jdk.internal.org.objectweb.asm.ByteVector putInt(int)
    {
        byte[] $stack4, data, $stack19, $stack22, $stack25, $stack28, $stack30;
        byte $stack9, $stack12, $stack15, $stack17, $stack20, $stack23, $stack26;
        bottom_type length;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack18, $stack32, $stack33;
        int $stack5, $stack6, $stack7, i, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack21, $stack24, $stack27, $stack29, $stack31, length#1, length#2, length#3, length#4, length#5;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        i := @parameter0: int;

        length#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack6 = length#1 + 4;

        $stack4 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack5 = lengthof $stack4;

        if $stack6 <= $stack5 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(4);

     label1:
        $stack18 = this;

        $stack19 = $stack18.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        data = $stack19;

        $stack22 = data;

        $stack7 = length#1;

        length#2 = length#1 + 1;

        $stack21 = i;

        $stack20 = 24;

        $stack8 = $stack21 >>> $stack20;

        $stack9 = (byte) $stack8;

        $stack22[$stack7] = $stack9;

        $stack25 = data;

        $stack10 = length#2;

        length#3 = length#2 + 1;

        $stack24 = i;

        $stack23 = 16;

        $stack11 = $stack24 >>> $stack23;

        $stack12 = (byte) $stack11;

        $stack25[$stack10] = $stack12;

        $stack28 = data;

        $stack13 = length#3;

        length#4 = length#3 + 1;

        $stack27 = i;

        $stack26 = 8;

        $stack14 = $stack27 >>> $stack26;

        $stack15 = (byte) $stack14;

        $stack28[$stack13] = $stack15;

        $stack30 = data;

        $stack16 = length#4;

        length#5 = length#4 + 1;

        $stack29 = i;

        $stack17 = (byte) $stack29;

        $stack30[$stack16] = $stack17;

        $stack32 = this;

        $stack31 = length#5;

        $stack32.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack31;

        $stack33 = this;

        return $stack33;

        nop;
    }

    public jdk.internal.org.objectweb.asm.ByteVector putLong(long)
    {
        byte[] $stack6, data, $stack33, $stack39, $stack42, $stack45, $stack47, $stack52, $stack55, $stack58, $stack60;
        byte $stack12, $stack15, $stack18, $stack20, $stack23, $stack26, $stack29, $stack31, $stack34, $stack37, $stack40, $stack43, $stack50, $stack53, $stack56;
        bottom_type length, i;
        long l, $stack9, $stack35, $stack48;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack32, $stack62, $stack63;
        int $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack21, $stack22, $stack24, $stack25, $stack27, $stack28, $stack30, $stack36, $stack38, $stack41, $stack44, $stack46, $stack49, $stack51, $stack54, $stack57, $stack59, $stack61, length#1, i#2, length#3, length#4, length#5, length#6, i#7, length#8, length#9, length#10, length#11;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        l := @parameter0: long;

        length#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack8 = length#1 + 8;

        $stack6 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack7 = lengthof $stack6;

        if $stack8 <= $stack7 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(8);

     label1:
        $stack32 = this;

        $stack33 = $stack32.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        data = $stack33;

        $stack35 = l;

        $stack34 = 32;

        $stack9 = $stack35 >>> $stack34;

        $stack36 = (int) $stack9;

        i#2 = $stack36;

        $stack39 = data;

        $stack10 = length#1;

        length#3 = length#1 + 1;

        $stack38 = i#2;

        $stack37 = 24;

        $stack11 = $stack38 >>> $stack37;

        $stack12 = (byte) $stack11;

        $stack39[$stack10] = $stack12;

        $stack42 = data;

        $stack13 = length#3;

        length#4 = length#3 + 1;

        $stack41 = i#2;

        $stack40 = 16;

        $stack14 = $stack41 >>> $stack40;

        $stack15 = (byte) $stack14;

        $stack42[$stack13] = $stack15;

        $stack45 = data;

        $stack16 = length#4;

        length#5 = length#4 + 1;

        $stack44 = i#2;

        $stack43 = 8;

        $stack17 = $stack44 >>> $stack43;

        $stack18 = (byte) $stack17;

        $stack45[$stack16] = $stack18;

        $stack47 = data;

        $stack19 = length#5;

        length#6 = length#5 + 1;

        $stack46 = i#2;

        $stack20 = (byte) $stack46;

        $stack47[$stack19] = $stack20;

        $stack48 = l;

        $stack49 = (int) $stack48;

        i#7 = $stack49;

        $stack52 = data;

        $stack21 = length#6;

        length#8 = length#6 + 1;

        $stack51 = i#7;

        $stack50 = 24;

        $stack22 = $stack51 >>> $stack50;

        $stack23 = (byte) $stack22;

        $stack52[$stack21] = $stack23;

        $stack55 = data;

        $stack24 = length#8;

        length#9 = length#8 + 1;

        $stack54 = i#7;

        $stack53 = 16;

        $stack25 = $stack54 >>> $stack53;

        $stack26 = (byte) $stack25;

        $stack55[$stack24] = $stack26;

        $stack58 = data;

        $stack27 = length#9;

        length#10 = length#9 + 1;

        $stack57 = i#7;

        $stack56 = 8;

        $stack28 = $stack57 >>> $stack56;

        $stack29 = (byte) $stack28;

        $stack58[$stack27] = $stack29;

        $stack60 = data;

        $stack30 = length#10;

        length#11 = length#10 + 1;

        $stack59 = i#7;

        $stack31 = (byte) $stack59;

        $stack60[$stack30] = $stack31;

        $stack62 = this;

        $stack61 = length#11;

        $stack62.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack61;

        $stack63 = this;

        return $stack63;

        nop;
    }

    public jdk.internal.org.objectweb.asm.ByteVector putUTF8(java.lang.String)
    {
        byte[] $stack9, data, $stack31, $stack34, $stack36;
        byte $stack14, $stack16, $stack26, $stack32, $stack37;
        bottom_type len, i, $stack27, $stack28;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack18, $stack20, $stack24, $stack30;
        int $stack7, charLength, $stack8, $stack10, $stack11, $stack12, $stack13, $stack15, $stack19, $stack22, $stack25, $stack29, $stack33, $stack35, len#1, len#2, len#3, i#4, $stack28#5, $stack28#6, $stack27#7, $stack27#8, $i0, $i1, $i2, $i3;
        java.lang.String s, $stack21;
        char $stack17, c, $stack23, $c0;
        java.lang.IllegalArgumentException $stack38, $u0;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        s := @parameter0: java.lang.String;

        $stack7 = virtualinvoke s.<java.lang.String: int length()>();

        charLength = $stack7;

        $c0 = 65535;

        $i0 = (int) $c0;

        if charLength <= $i0 goto label1;

        $u0 = new java.lang.IllegalArgumentException;

        $stack38 = $u0;

        specialinvoke $u0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $stack38;

     label1:
        len#1 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack8 = len#1 + 2;

        $stack11 = $stack8 + charLength;

        $stack9 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack10 = lengthof $stack9;

        if $stack11 <= $stack10 goto label2;

        $stack29 = 2 + charLength;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>($stack29);

     label2:
        $stack30 = this;

        $stack31 = $stack30.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        data = $stack31;

        $stack34 = data;

        $stack12 = len#1;

        len#2 = len#1 + 1;

        $stack33 = charLength;

        $stack32 = 8;

        $stack13 = $stack33 >>> $stack32;

        $stack14 = (byte) $stack13;

        $stack34[$stack12] = $stack14;

        $stack36 = data;

        $stack15 = len#2;

        len#3 = len#2 + 1;

        $stack35 = charLength;

        $stack16 = (byte) $stack35;

        $stack36[$stack15] = $stack16;

        $stack37 = 0;

        i#4 = $stack37;

     label3:
        $stack28#5 = i#4;

        $stack28#6 = $stack28#5;

        $stack27#7 = charLength;

        $stack27#8 = $stack27#7;

        if $stack28#6 >= $stack27#8 goto label6;

        $stack17 = virtualinvoke s.<java.lang.String: char charAt(int)>(i#4);

        c = $stack17;

        $i1 = (int) c;

        if $i1 < 1 goto label4;

        $i2 = (int) c;

        if $i2 > 127 goto label4;

        $stack25 = len#3;

        len#3 = len#3 + 1;

        $stack26 = (byte) c;

        data[$stack25] = $stack26;

        goto label5;

     label4:
        $stack20 = this;

        $stack19 = len#3;

        $stack20.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack19;

        $stack24 = this;

        $stack21 = s;

        $stack22 = i#4;

        $stack23 = 65535;

        $i3 = (int) $stack23;

        $stack18 = virtualinvoke $stack24.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector encodeUTF8(java.lang.String,int,int)>($stack21, $stack22, $i3);

        return $stack18;

     label5:
        i#4 = i#4 + 1;

        goto label3;

     label6:
        this.<jdk.internal.org.objectweb.asm.ByteVector: int length> = len#3;

        return this;

        nop;
    }

    jdk.internal.org.objectweb.asm.ByteVector encodeUTF8(java.lang.String, int, int)
    {
        byte[] $stack15, $stack24, $stack29, $stack37, $stack43, $stack48, $stack53, $stack60, $stack63;
        byte $stack23, $stack28, $stack36, $stack42, $stack47, $stack52, $stack59, $stack61;
        bottom_type byteLength, j_1, len, j_2, c, $stack30, $stack31;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack55, $stack64, $stack67;
        short $stack27, $stack46, $stack49, $stack72;
        java.lang.String s;
        int $stack10, charLength, i, maxByteLength, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack21, $stack22, $stack25, $stack32, $stack33, $stack34, $stack35, $stack38, $stack39, $stack40, $stack41, $stack44, $stack51, $stack54, $stack56, $stack57, $stack58, $stack62, $stack65, $stack66, $stack70, $stack71, byteLength#1, j_1#2, j_1#4, len#5, j_2#6, $stack31#7, $stack31#8, $stack30#9, $stack30#10, len#12, len#13, len#14, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        char $stack18, $stack26, $stack45, $stack50, $stack69, $stack73, c#3, c#11;
        java.lang.IllegalArgumentException $stack68, $u0;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        s := @parameter0: java.lang.String;

        i := @parameter1: int;

        maxByteLength := @parameter2: int;

        $stack10 = virtualinvoke s.<java.lang.String: int length()>();

        charLength = $stack10;

        byteLength#1 = i;

        j_1#2 = i;

     label01:
        $stack71 = j_1#2;

        $stack70 = charLength;

        if $stack71 >= $stack70 goto label05;

        $stack69 = virtualinvoke s.<java.lang.String: char charAt(int)>(j_1#2);

        c#3 = $stack69;

        $i0 = (int) c#3;

        if $i0 < 1 goto label02;

        $i1 = (int) c#3;

        if $i1 > 127 goto label02;

        byteLength#1 = byteLength#1 + 1;

        goto label04;

     label02:
        $stack73 = c#3;

        $stack72 = 2047;

        $i2 = (int) $stack73;

        if $i2 <= $stack72 goto label03;

        byteLength#1 = byteLength#1 + 3;

        goto label04;

     label03:
        byteLength#1 = byteLength#1 + 2;

     label04:
        j_1#2 = j_1#2 + 1;

        goto label01;

     label05:
        if byteLength#1 <= maxByteLength goto label06;

        $u0 = new java.lang.IllegalArgumentException;

        $stack68 = $u0;

        specialinvoke $u0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $stack68;

     label06:
        $stack11 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack12 = $stack11 - i;

        j_1#4 = $stack12 - 2;

        if j_1#4 < 0 goto label07;

        $stack60 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack58 = byteLength#1 >>> 8;

        $stack59 = (byte) $stack58;

        $stack60[j_1#4] = $stack59;

        $stack63 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack62 = j_1#4 + 1;

        $stack61 = (byte) byteLength#1;

        $stack63[$stack62] = $stack61;

     label07:
        $stack64 = this;

        $stack13 = $stack64.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack65 = byteLength#1;

        $stack14 = $stack13 + $stack65;

        $stack66 = i;

        $stack17 = $stack14 - $stack66;

        $stack67 = this;

        $stack15 = $stack67.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack16 = lengthof $stack15;

        if $stack17 <= $stack16 goto label08;

        $stack54 = byteLength#1 - i;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>($stack54);

     label08:
        $stack55 = this;

        $stack56 = $stack55.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        len#5 = $stack56;

        $stack57 = i;

        j_2#6 = $stack57;

     label09:
        $stack31#7 = j_2#6;

        $stack31#8 = $stack31#7;

        $stack30#9 = charLength;

        $stack30#10 = $stack30#9;

        if $stack31#8 >= $stack30#10 goto label13;

        $stack18 = virtualinvoke s.<java.lang.String: char charAt(int)>(j_2#6);

        c#11 = $stack18;

        $i3 = (int) c#11;

        if $i3 < 1 goto label10;

        $i4 = (int) c#11;

        if $i4 > 127 goto label10;

        $stack53 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack51 = len#5;

        len#5 = len#5 + 1;

        $stack52 = (byte) c#11;

        $stack53[$stack51] = $stack52;

        goto label12;

     label10:
        $stack50 = c#11;

        $stack49 = 2047;

        $i5 = (int) $stack50;

        if $i5 <= $stack49 goto label11;

        $stack37 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack32 = len#5;

        len#12 = len#5 + 1;

        $i6 = (int) c#11;

        $stack33 = $i6 >> 12;

        $stack34 = $stack33 & 15;

        $stack35 = 224 | $stack34;

        $stack36 = (byte) $stack35;

        $stack37[$stack32] = $stack36;

        $stack43 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack38 = len#12;

        len#13 = len#12 + 1;

        $i7 = (int) c#11;

        $stack39 = $i7 >> 6;

        $stack40 = $stack39 & 63;

        $stack41 = 128 | $stack40;

        $stack42 = (byte) $stack41;

        $stack43[$stack38] = $stack42;

        $stack48 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack44 = len#13;

        len#5 = len#13 + 1;

        $stack45 = c#11 & 63;

        $stack46 = 128 | $stack45;

        $stack47 = (byte) $stack46;

        $stack48[$stack44] = $stack47;

        goto label12;

     label11:
        $stack24 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack19 = len#5;

        len#14 = len#5 + 1;

        $i8 = (int) c#11;

        $stack20 = $i8 >> 6;

        $stack21 = $stack20 & 31;

        $stack22 = 192 | $stack21;

        $stack23 = (byte) $stack22;

        $stack24[$stack19] = $stack23;

        $stack29 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack25 = len#14;

        len#5 = len#14 + 1;

        $stack26 = c#11 & 63;

        $stack27 = 128 | $stack26;

        $stack28 = (byte) $stack27;

        $stack29[$stack25] = $stack28;

     label12:
        j_2#6 = j_2#6 + 1;

        goto label09;

     label13:
        this.<jdk.internal.org.objectweb.asm.ByteVector: int length> = len#5;

        return this;

        nop;
    }

    public jdk.internal.org.objectweb.asm.ByteVector putByteArray(byte[], int, int)
    {
        byte[] $stack5, b, $stack11, $stack15;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack12, $stack14;
        int len, $stack4, $stack6, $stack7, $stack8, $stack9, off, $stack10, $stack13;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        b := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $stack4 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack7 = $stack4 + len;

        $stack5 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack6 = lengthof $stack5;

        if $stack7 <= $stack6 goto label1;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.ByteVector: void enlarge(int)>(len);

     label1:
        $stack15 = b;

        if $stack15 == null goto label2;

        $stack11 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack10 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(b, off, $stack11, $stack10, len);

     label2:
        $stack12 = this;

        $stack8 = $stack12.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        $stack13 = len;

        $stack9 = $stack8 + $stack13;

        $stack12.<jdk.internal.org.objectweb.asm.ByteVector: int length> = $stack9;

        $stack14 = this;

        return $stack14;

        nop;
    }

    private void enlarge(int)
    {
        byte[] $stack5, newData, $stack9, $stack11, $stack15, $stack17;
        jdk.internal.org.objectweb.asm.ByteVector this, $stack12, $stack13, $stack18;
        byte $stack14, $stack16;
        bottom_type $stack10;
        int $stack6, length1, size, $stack7, length2, $stack8, $stack10#1;

        this := @this: jdk.internal.org.objectweb.asm.ByteVector;

        size := @parameter0: int;

        $stack5 = this.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack6 = lengthof $stack5;

        length1 = 2 * $stack6;

        $stack7 = this.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        length2 = $stack7 + size;

        if length1 <= length2 goto label1;

        $stack10#1 = length1;

        goto label2;

     label1:
        $stack10#1 = length2;

     label2:
        $stack11 = newarray (byte)[$stack10#1];

        newData = $stack11;

        $stack12 = this;

        $stack9 = $stack12.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data>;

        $stack14 = 0;

        $stack15 = newData;

        $stack16 = 0;

        $stack13 = this;

        $stack8 = $stack13.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack9, $stack14, $stack15, $stack16, $stack8);

        $stack18 = this;

        $stack17 = newData;

        $stack18.<jdk.internal.org.objectweb.asm.ByteVector: byte[] data> = $stack17;

        return;

        nop;
    }
}
