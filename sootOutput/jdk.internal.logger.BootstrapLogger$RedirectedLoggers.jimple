final class jdk.internal.logger.BootstrapLogger$RedirectedLoggers extends java.lang.Object implements java.util.function.Function
{
    final java.util.Map redirectedLoggers;
    boolean cleared;
    static final jdk.internal.logger.BootstrapLogger$RedirectedLoggers INSTANCE;

    void <init>()
    {
        java.util.HashMap $stack1;
        jdk.internal.logger.BootstrapLogger$RedirectedLoggers this;

        this := @this: jdk.internal.logger.BootstrapLogger$RedirectedLoggers;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.util.Map redirectedLoggers> = $stack1;

        return;

        nop;
    }

    public jdk.internal.logger.SurrogateLogger apply(jdk.internal.logger.LazyLoggers$LazyLoggerAccessor)
    {
        java.lang.IllegalStateException $stack5;
        jdk.internal.logger.BootstrapLogger$RedirectedLoggers this;
        jdk.internal.logger.LazyLoggers$LazyLoggerAccessor t;
        java.lang.String $stack3;
        jdk.internal.logger.SurrogateLogger $stack4;
        boolean $stack2;

        this := @this: jdk.internal.logger.BootstrapLogger$RedirectedLoggers;

        t := @parameter0: jdk.internal.logger.LazyLoggers$LazyLoggerAccessor;

        $stack2 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: boolean cleared>;

        if $stack2 == 0 goto label1;

        $stack5 = new java.lang.IllegalStateException;

        specialinvoke $stack5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("LoggerFinder already initialized");

        throw $stack5;

     label1:
        $stack3 = virtualinvoke t.<jdk.internal.logger.LazyLoggers$LazyLoggerAccessor: java.lang.String getLoggerName()>();

        $stack4 = staticinvoke <jdk.internal.logger.SurrogateLogger: jdk.internal.logger.SurrogateLogger makeSurrogateLogger(java.lang.String)>($stack3);

        return $stack4;

        nop;
    }

    jdk.internal.logger.SurrogateLogger get(jdk.internal.logger.LazyLoggers$LazyLoggerAccessor)
    {
        java.lang.IllegalStateException $stack6;
        jdk.internal.logger.BootstrapLogger$RedirectedLoggers this;
        java.util.Map $stack3;
        java.lang.Object $stack4;
        jdk.internal.logger.LazyLoggers$LazyLoggerAccessor a;
        jdk.internal.logger.SurrogateLogger $stack5;
        boolean $stack2;

        this := @this: jdk.internal.logger.BootstrapLogger$RedirectedLoggers;

        a := @parameter0: jdk.internal.logger.LazyLoggers$LazyLoggerAccessor;

        $stack2 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: boolean cleared>;

        if $stack2 == 0 goto label1;

        $stack6 = new java.lang.IllegalStateException;

        specialinvoke $stack6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("LoggerFinder already initialized");

        throw $stack6;

     label1:
        $stack3 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.util.Map redirectedLoggers>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(a, this);

        $stack5 = (jdk.internal.logger.SurrogateLogger) $stack4;

        return $stack5;

        nop;
    }

    java.util.Map drainLoggersMap()
    {
        java.lang.IllegalStateException $stack8;
        java.util.HashMap $stack5, accessors;
        jdk.internal.logger.BootstrapLogger$RedirectedLoggers this;
        java.util.Map $stack2, $stack6, $stack7;
        boolean $stack3, $stack4;

        this := @this: jdk.internal.logger.BootstrapLogger$RedirectedLoggers;

        $stack2 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.util.Map redirectedLoggers>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean isEmpty()>();

        if $stack3 == 0 goto label1;

        return null;

     label1:
        $stack4 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: boolean cleared>;

        if $stack4 == 0 goto label2;

        $stack8 = new java.lang.IllegalStateException;

        specialinvoke $stack8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("LoggerFinder already initialized");

        throw $stack8;

     label2:
        $stack5 = new java.util.HashMap;

        $stack6 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.util.Map redirectedLoggers>;

        specialinvoke $stack5.<java.util.HashMap: void <init>(java.util.Map)>($stack6);

        accessors = $stack5;

        $stack7 = this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.util.Map redirectedLoggers>;

        interfaceinvoke $stack7.<java.util.Map: void clear()>();

        this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: boolean cleared> = 1;

        return accessors;

        nop;
    }

    static void replaceSurrogateLoggers(java.util.Map)
    {
        jdk.internal.logger.LazyLoggers$LazyLoggerAccessor $stack11;
        jdk.internal.logger.BootstrapLogger$LoggingBackend detectedBackend, $stack5, $stack16;
        bottom_type $stack6, $stack7, $stack8, $stack14, $stack15, $stack17, $stack18;
        java.util.Map accessors, $stack18#2, $stack18#3;
        boolean lazy, $stack17#1, $stack8#10, $stack8#11, $stack15#12;
        java.util.Map$Entry a;
        jdk.internal.logger.SimpleConsoleLogger $stack13;
        java.util.Iterator l3, $stack7#6, $stack7#7, $stack14#8, $stack14#9;
        java.util.Set $stack6#4, $stack6#5;
        java.lang.Object $stack9, $stack10, $stack12;

        accessors := @parameter0: java.util.Map;

        detectedBackend = <jdk.internal.logger.BootstrapLogger$DetectBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend detectedBackend>;

        $stack5 = <jdk.internal.logger.BootstrapLogger$LoggingBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend JUL_DEFAULT>;

        if detectedBackend == $stack5 goto label1;

        $stack16 = <jdk.internal.logger.BootstrapLogger$LoggingBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend JUL_WITH_CONFIG>;

        if detectedBackend == $stack16 goto label1;

        $stack17#1 = 1;

        goto label2;

     label1:
        $stack17#1 = 0;

     label2:
        lazy = $stack17#1;

        $stack18#2 = accessors;

        $stack18#3 = $stack18#2;

        $stack6#4 = interfaceinvoke $stack18#3.<java.util.Map: java.util.Set entrySet()>();

        $stack6#5 = $stack6#4;

        $stack7#6 = interfaceinvoke $stack6#5.<java.util.Set: java.util.Iterator iterator()>();

        $stack7#7 = $stack7#6;

        l3 = $stack7#7;

     label3:
        $stack14#8 = l3;

        $stack14#9 = $stack14#8;

        $stack8#10 = interfaceinvoke $stack14#9.<java.util.Iterator: boolean hasNext()>();

        $stack8#11 = $stack8#10;

        if $stack8#11 == 0 goto label6;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        a = (java.util.Map$Entry) $stack9;

        $stack10 = interfaceinvoke a.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack11 = (jdk.internal.logger.LazyLoggers$LazyLoggerAccessor) $stack10;

        $stack12 = interfaceinvoke a.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack13 = (jdk.internal.logger.SimpleConsoleLogger) $stack12;

        if lazy != 0 goto label4;

        $stack15#12 = 1;

        goto label5;

     label4:
        $stack15#12 = 0;

     label5:
        virtualinvoke $stack11.<jdk.internal.logger.LazyLoggers$LazyLoggerAccessor: void release(jdk.internal.logger.SimpleConsoleLogger,boolean)>($stack13, $stack15#12);

        goto label3;

     label6:
        return;

        nop;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        jdk.internal.logger.BootstrapLogger$RedirectedLoggers this;
        java.lang.Object l1;
        jdk.internal.logger.LazyLoggers$LazyLoggerAccessor $stack2;
        jdk.internal.logger.SurrogateLogger $stack3;

        this := @this: jdk.internal.logger.BootstrapLogger$RedirectedLoggers;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (jdk.internal.logger.LazyLoggers$LazyLoggerAccessor) l1;

        $stack3 = virtualinvoke this.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: jdk.internal.logger.SurrogateLogger apply(jdk.internal.logger.LazyLoggers$LazyLoggerAccessor)>($stack2);

        return $stack3;

        nop;
    }

    static void <clinit>()
    {
        jdk.internal.logger.BootstrapLogger$RedirectedLoggers $stack0;

        $stack0 = new jdk.internal.logger.BootstrapLogger$RedirectedLoggers;

        specialinvoke $stack0.<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: void <init>()>();

        <jdk.internal.logger.BootstrapLogger$RedirectedLoggers: jdk.internal.logger.BootstrapLogger$RedirectedLoggers INSTANCE> = $stack0;

        return;
    }
}
