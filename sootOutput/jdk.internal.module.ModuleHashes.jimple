public final class jdk.internal.module.ModuleHashes extends java.lang.Object
{
    private final java.lang.String algorithm;
    private final java.util.Map nameToHash;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, java.util.Map)
    {
        java.util.Map nameToHash, $stack3;
        jdk.internal.module.ModuleHashes this;
        java.lang.String algorithm;

        this := @this: jdk.internal.module.ModuleHashes;

        algorithm := @parameter0: java.lang.String;

        nameToHash := @parameter1: java.util.Map;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.module.ModuleHashes: java.lang.String algorithm> = algorithm;

        $stack3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(nameToHash);

        this.<jdk.internal.module.ModuleHashes: java.util.Map nameToHash> = $stack3;

        return;

        nop;
    }

    public java.lang.String algorithm()
    {
        jdk.internal.module.ModuleHashes this;
        java.lang.String $stack1;

        this := @this: jdk.internal.module.ModuleHashes;

        $stack1 = this.<jdk.internal.module.ModuleHashes: java.lang.String algorithm>;

        return $stack1;

        nop;
    }

    public java.util.Set names()
    {
        java.util.Set $stack2;
        jdk.internal.module.ModuleHashes this;
        java.util.Map $stack1;

        this := @this: jdk.internal.module.ModuleHashes;

        $stack1 = this.<jdk.internal.module.ModuleHashes: java.util.Map nameToHash>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: java.util.Set keySet()>();

        return $stack2;

        nop;
    }

    public byte[] hashFor(java.lang.String)
    {
        byte[] $stack4;
        java.util.Map $stack2;
        java.lang.Object $stack3;
        jdk.internal.module.ModuleHashes this;
        java.lang.String mn;

        this := @this: jdk.internal.module.ModuleHashes;

        mn := @parameter0: java.lang.String;

        $stack2 = this.<jdk.internal.module.ModuleHashes: java.util.Map nameToHash>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(mn);

        $stack4 = (byte[]) $stack3;

        return $stack4;

        nop;
    }

    public java.util.Map hashes()
    {
        jdk.internal.module.ModuleHashes this;
        java.util.Map $stack1;

        this := @this: jdk.internal.module.ModuleHashes;

        $stack1 = this.<jdk.internal.module.ModuleHashes: java.util.Map nameToHash>;

        return $stack1;

        nop;
    }

    public static byte[] computeHash(java.nio.file.Path, java.lang.String)
    {
        byte[] $stack11;
        java.nio.ByteBuffer $stack9, $stack13, $stack15, $stack16, $stack19, bb#2;
        bottom_type md, bb, $stack27;
        java.nio.file.Path file;
        boolean $stack14;
        java.io.UncheckedIOException $stack22, $u2;
        java.security.NoSuchAlgorithmException $stack23, md#6;
        java.lang.Throwable $stack25, l5, $stack26, bb#3, $stack27#4, $stack27#5;
        java.security.MessageDigest $stack6, $stack12, md#1;
        java.lang.AssertionError $stack20, $u0;
        java.nio.file.OpenOption[] $stack7;
        int $stack10, $stack18, $i0;
        java.lang.String algorithm;
        java.io.IOException $stack21, md#7;
        char $c0;
        java.lang.RuntimeException $stack24, $u1;
        java.nio.channels.FileChannel $stack8, fc, $stack17;

        file := @parameter0: java.nio.file.Path;

        algorithm := @parameter1: java.lang.String;

     label01:
        $stack6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(algorithm);

        md#1 = $stack6;

        $stack7 = newarray (java.nio.file.OpenOption)[0];

        $stack8 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>(file, $stack7);

        fc = $stack8;

     label02:
        $c0 = 32768;

        $i0 = (int) $c0;

        $stack9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        bb#2 = $stack9;

     label03:
        $stack17 = fc;

        $stack16 = bb#2;

        $stack10 = virtualinvoke $stack17.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>($stack16);

        if $stack10 <= 0 goto label05;

        $stack13 = virtualinvoke bb#2.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();

        virtualinvoke md#1.<java.security.MessageDigest: void update(java.nio.ByteBuffer)>(bb#2);

        $stack14 = <jdk.internal.module.ModuleHashes: boolean $assertionsDisabled>;

        if $stack14 != 0 goto label04;

        $stack18 = virtualinvoke bb#2.<java.nio.ByteBuffer: int remaining()>();

        if $stack18 == 0 goto label04;

        $u0 = new java.lang.AssertionError;

        $stack20 = $u0;

        specialinvoke $u0.<java.lang.AssertionError: void <init>()>();

        throw $stack20;

     label04:
        $stack19 = bb#2;

        $stack15 = virtualinvoke $stack19.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();

        goto label03;

     label05:
        if fc == null goto label11;

        virtualinvoke fc.<java.nio.channels.FileChannel: void close()>();

        goto label11;

     label06:
        $stack26 := @caughtexception;

        bb#3 = $stack26;

        if fc == null goto label10;

     label07:
        virtualinvoke fc.<java.nio.channels.FileChannel: void close()>();

     label08:
        goto label10;

     label09:
        $stack25 := @caughtexception;

        l5 = $stack25;

        virtualinvoke bb#3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l5);

     label10:
        $stack27#4 = bb#3;

        $stack27#5 = $stack27#4;

        throw $stack27#5;

     label11:
        $stack12 = md#1;

        $stack11 = virtualinvoke $stack12.<java.security.MessageDigest: byte[] digest()>();

     label12:
        return $stack11;

     label13:
        $stack23 := @caughtexception;

        md#6 = $stack23;

        $u1 = new java.lang.RuntimeException;

        $stack24 = $u1;

        specialinvoke $u1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(md#6);

        throw $stack24;

     label14:
        $stack21 := @caughtexception;

        md#7 = $stack21;

        $u2 = new java.io.UncheckedIOException;

        $stack22 = $u2;

        specialinvoke $u2.<java.io.UncheckedIOException: void <init>(java.io.IOException)>(md#7);

        throw $stack22;

        nop;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label12 with label13;
        catch java.io.IOException from label01 to label12 with label14;
    }

    public static jdk.internal.module.ModuleHashes generate(java.util.Map, java.lang.String)
    {
        byte[] $stack15;
        java.util.HashMap $stack7, nameToHash;
        java.util.Map map;
        jdk.internal.module.ModuleHashes $stack11;
        java.lang.String algorithm, name;
        java.nio.file.Path path;
        boolean $stack10;
        java.util.Map$Entry entry;
        java.util.Iterator $stack9, l3, $stack17;
        java.util.Set $stack8;
        java.lang.Object $stack12, $stack13, $stack14, $stack16;

        map := @parameter0: java.util.Map;

        algorithm := @parameter1: java.lang.String;

        $stack7 = new java.util.HashMap;

        specialinvoke $stack7.<java.util.HashMap: void <init>()>();

        nameToHash = $stack7;

        $stack8 = interfaceinvoke map.<java.util.Map: java.util.Set entrySet()>();

        $stack9 = interfaceinvoke $stack8.<java.util.Set: java.util.Iterator iterator()>();

        l3 = $stack9;

     label1:
        $stack17 = l3;

        $stack10 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label2;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack12;

        $stack13 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        name = (java.lang.String) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        path = (java.nio.file.Path) $stack14;

        $stack15 = staticinvoke <jdk.internal.module.ModuleHashes: byte[] computeHash(java.nio.file.Path,java.lang.String)>(path, algorithm);

        $stack16 = interfaceinvoke nameToHash.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, $stack15);

        goto label1;

     label2:
        $stack11 = new jdk.internal.module.ModuleHashes;

        specialinvoke $stack11.<jdk.internal.module.ModuleHashes: void <init>(java.lang.String,java.util.Map)>(algorithm, nameToHash);

        return $stack11;

        nop;
    }

    static void <clinit>()
    {
        bottom_type $stack2;
        java.lang.Class $stack0;
        boolean $stack1, $stack2#1;

        $stack0 = class "Ljdk/internal/module/ModuleHashes;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2#1 = 1;

        goto label2;

     label1:
        $stack2#1 = 0;

     label2:
        <jdk.internal.module.ModuleHashes: boolean $assertionsDisabled> = $stack2#1;

        return;
    }
}
