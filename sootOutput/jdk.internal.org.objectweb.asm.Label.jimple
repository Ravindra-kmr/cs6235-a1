public class jdk.internal.org.objectweb.asm.Label extends java.lang.Object
{
    static final int DEBUG;
    static final int RESOLVED;
    static final int RESIZED;
    static final int PUSHED;
    static final int TARGET;
    static final int STORE;
    static final int REACHABLE;
    static final int JSR;
    static final int RET;
    static final int SUBROUTINE;
    static final int VISITED;
    static final int VISITED2;
    public java.lang.Object info;
    int status;
    int line;
    int position;
    private int referenceCount;
    private int[] srcAndRefPositions;
    int inputStackTop;
    int outputStackMax;
    jdk.internal.org.objectweb.asm.Frame frame;
    jdk.internal.org.objectweb.asm.Label successor;
    jdk.internal.org.objectweb.asm.Edge successors;
    jdk.internal.org.objectweb.asm.Label next;

    public void <init>()
    {
        jdk.internal.org.objectweb.asm.Label this;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;

        nop;
    }

    public int getOffset()
    {
        java.lang.IllegalStateException $stack4;
        jdk.internal.org.objectweb.asm.Label this;
        int $stack1, $stack2, $stack3;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        $stack1 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack2 = $stack1 & 2;

        if $stack2 != 0 goto label1;

        $stack4 = new java.lang.IllegalStateException;

        specialinvoke $stack4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Label offset position has not been resolved yet");

        throw $stack4;

     label1:
        $stack3 = this.<jdk.internal.org.objectweb.asm.Label: int position>;

        return $stack3;

        nop;
    }

    void put(jdk.internal.org.objectweb.asm.MethodWriter, jdk.internal.org.objectweb.asm.ByteVector, int, boolean)
    {
        jdk.internal.org.objectweb.asm.MethodWriter owner;
        jdk.internal.org.objectweb.asm.ByteVector out, $stack9, $stack12, $stack14, $stack17;
        byte $b0, $b1, $b2;
        int $stack5, $stack6, source, $stack7, $stack8, $stack10, $stack11, $stack13, $stack15, $stack16, $i0, $i1, $i2;
        boolean wideOffset;
        jdk.internal.org.objectweb.asm.Label this;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        owner := @parameter0: jdk.internal.org.objectweb.asm.MethodWriter;

        out := @parameter1: jdk.internal.org.objectweb.asm.ByteVector;

        source := @parameter2: int;

        wideOffset := @parameter3: boolean;

        $stack5 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack6 = $stack5 & 2;

        if $stack6 != 0 goto label2;

        if wideOffset == 0 goto label1;

        $b0 = -1;

        $i0 = (int) $b0;

        $stack16 = $i0 - source;

        $stack15 = out.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.Label: void addReference(int,int)>($stack16, $stack15);

        $b1 = -1;

        $i1 = (int) $b1;

        $stack17 = virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putInt(int)>($i1);

        goto label4;

     label1:
        $stack13 = out.<jdk.internal.org.objectweb.asm.ByteVector: int length>;

        virtualinvoke this.<jdk.internal.org.objectweb.asm.Label: void addReference(int,int)>(source, $stack13);

        $b2 = -1;

        $i2 = (int) $b2;

        $stack14 = virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putShort(int)>($i2);

        goto label4;

     label2:
        if wideOffset == 0 goto label3;

        $stack10 = this.<jdk.internal.org.objectweb.asm.Label: int position>;

        $stack11 = $stack10 - source;

        $stack12 = virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putInt(int)>($stack11);

        goto label4;

     label3:
        $stack7 = this.<jdk.internal.org.objectweb.asm.Label: int position>;

        $stack8 = $stack7 - source;

        $stack9 = virtualinvoke out.<jdk.internal.org.objectweb.asm.ByteVector: jdk.internal.org.objectweb.asm.ByteVector putShort(int)>($stack8);

     label4:
        return;

        nop;
    }

    private void addReference(int, int)
    {
        int[] $stack4, $stack5, $stack10, $stack13, $stack14, a, $stack17, $stack19, $stack28;
        int $stack6, $stack7, $stack8, $stack9, sourcePosition, $stack11, $stack12, referencePosition, $stack15, $stack16, $stack18, $stack23, $stack27;
        boolean $stack22, $stack26;
        jdk.internal.org.objectweb.asm.Label this, $stack20, $stack21, $stack24, $stack25, $stack29, $stack30;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        sourcePosition := @parameter0: int;

        referencePosition := @parameter1: int;

        $stack4 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        if $stack4 != null goto label1;

        $stack28 = newarray (int)[6];

        this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions> = $stack28;

     label1:
        $stack29 = this;

        $stack7 = $stack29.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        $stack30 = this;

        $stack5 = $stack30.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack6 = lengthof $stack5;

        if $stack7 < $stack6 goto label2;

        $stack14 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack15 = lengthof $stack14;

        $stack16 = $stack15 + 6;

        a = newarray (int)[$stack16];

        $stack19 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack17 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack18 = lengthof $stack17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack19, 0, a, 0, $stack18);

        this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions> = a;

     label2:
        $stack20 = this;

        $stack10 = $stack20.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack21 = this;

        $stack8 = $stack21.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        $stack22 = 1;

        $stack9 = $stack8 + $stack22;

        $stack21.<jdk.internal.org.objectweb.asm.Label: int referenceCount> = $stack9;

        $stack23 = sourcePosition;

        $stack10[$stack8] = $stack23;

        $stack24 = this;

        $stack13 = $stack24.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack25 = this;

        $stack11 = $stack25.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        $stack26 = 1;

        $stack12 = $stack11 + $stack26;

        $stack25.<jdk.internal.org.objectweb.asm.Label: int referenceCount> = $stack12;

        $stack27 = referencePosition;

        $stack13[$stack11] = $stack27;

        return;

        nop;
    }

    boolean resolve(jdk.internal.org.objectweb.asm.MethodWriter, int, byte[])
    {
        byte[] data, $stack51, $stack45#6, $stack45#7, $stack48#19, $stack48#20;
        byte $stack20, $stack23, $stack26, $stack27, $stack31, $stack33, $stack40, $stack43#13, $stack43#14, $stack37#17, $stack37#18, $stack38#25, $stack38#26;
        bottom_type needUpdate, i, reference, offset, $stack35, $stack36, $stack37, $stack38, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48;
        jdk.internal.org.objectweb.asm.MethodWriter owner;
        short opcode, $stack52, $stack53, $stack54, $stack55, $s0, $s1;
        int[] $stack14, $stack16;
        boolean $stack42, $stack49, needUpdate#1;
        int $stack10, $stack11, position, $stack12, $stack13, source, $stack15, $stack17, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack29, $stack30, $stack32, $stack34, $stack39, $stack41, $stack50, i#2, i#3, reference#4, offset#5, $stack35#8, $stack35#9, reference#10, $stack44#11, $stack44#12, $stack36#15, $stack36#16, $stack47#21, $stack47#22, $stack46#23, $stack46#24, offset#27, reference#28, reference#29, reference#30, $i0, $i1, $i2, $i3;
        jdk.internal.org.objectweb.asm.Label this, $stack28;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        owner := @parameter0: jdk.internal.org.objectweb.asm.MethodWriter;

        position := @parameter1: int;

        data := @parameter2: byte[];

        needUpdate#1 = 0;

        $stack10 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack11 = $stack10 | 2;

        this.<jdk.internal.org.objectweb.asm.Label: int status> = $stack11;

        this.<jdk.internal.org.objectweb.asm.Label: int position> = position;

        i#2 = 0;

     label1:
        $stack29 = i#2;

        $stack28 = this;

        $stack12 = $stack28.<jdk.internal.org.objectweb.asm.Label: int referenceCount>;

        if $stack29 >= $stack12 goto label8;

        $stack14 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack13 = i#2;

        i#3 = i#2 + 1;

        source = $stack14[$stack13];

        $stack16 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack15 = i#3;

        i#2 = i#3 + 1;

        reference#4 = $stack16[$stack15];

        if source < 0 goto label6;

        offset#5 = position - source;

        $s0 = -32768;

        $i0 = (int) $s0;

        if offset#5 < $i0 goto label2;

        if offset#5 <= 32767 goto label5;

     label2:
        $stack51 = data;

        $stack50 = reference#4;

        $stack49 = 1;

        $stack30 = $stack50 - $stack49;

        $stack31 = $stack51[$stack30];

        $stack52 = 255;

        $s1 = (short) $stack31;

        $stack53 = $s1 & $stack52;

        opcode = $stack53;

        $stack55 = opcode;

        $stack54 = 168;

        $i1 = (int) $stack55;

        if $i1 > $stack54 goto label3;

        $stack41 = reference#4 - 1;

        $i2 = (int) opcode;

        $stack39 = $i2 + 49;

        $stack40 = (byte) $stack39;

        data[$stack41] = $stack40;

        goto label4;

     label3:
        $stack34 = reference#4 - 1;

        $i3 = (int) opcode;

        $stack32 = $i3 + 20;

        $stack33 = (byte) $stack32;

        data[$stack34] = $stack33;

     label4:
        $stack42 = 1;

        needUpdate#1 = $stack42;

     label5:
        $stack45#6 = data;

        $stack45#7 = $stack45#6;

        $stack35#8 = reference#4;

        $stack35#9 = $stack35#8;

        reference#10 = reference#4 + 1;

        $stack44#11 = offset#5;

        $stack44#12 = $stack44#11;

        $stack43#13 = 8;

        $stack43#14 = $stack43#13;

        $stack36#15 = $stack44#12 >>> $stack43#14;

        $stack36#16 = $stack36#15;

        $stack37#17 = (byte) $stack36#16;

        $stack37#18 = $stack37#17;

        $stack45#7[$stack35#9] = $stack37#18;

        $stack48#19 = data;

        $stack48#20 = $stack48#19;

        $stack47#21 = reference#10;

        $stack47#22 = $stack47#21;

        $stack46#23 = offset#5;

        $stack46#24 = $stack46#23;

        $stack38#25 = (byte) $stack46#24;

        $stack38#26 = $stack38#25;

        $stack48#20[$stack47#22] = $stack38#26;

        goto label7;

     label6:
        $stack17 = position + source;

        offset#27 = $stack17 + 1;

        $stack18 = reference#4;

        reference#28 = reference#4 + 1;

        $stack19 = offset#27 >>> 24;

        $stack20 = (byte) $stack19;

        data[$stack18] = $stack20;

        $stack21 = reference#28;

        reference#29 = reference#28 + 1;

        $stack22 = offset#27 >>> 16;

        $stack23 = (byte) $stack22;

        data[$stack21] = $stack23;

        $stack24 = reference#29;

        reference#30 = reference#29 + 1;

        $stack25 = offset#27 >>> 8;

        $stack26 = (byte) $stack25;

        data[$stack24] = $stack26;

        $stack27 = (byte) offset#27;

        data[reference#30] = $stack27;

     label7:
        goto label1;

     label8:
        return needUpdate#1;

        nop;
    }

    jdk.internal.org.objectweb.asm.Label getFirst()
    {
        jdk.internal.org.objectweb.asm.Label this, $stack3#1;
        bottom_type $stack3;
        jdk.internal.org.objectweb.asm.Frame $stack1, $stack2;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        $stack1 = this.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Frame frame>;

        if $stack1 != null goto label1;

        $stack3#1 = this;

        goto label2;

     label1:
        $stack2 = this.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Frame frame>;

        $stack3#1 = $stack2.<jdk.internal.org.objectweb.asm.Frame: jdk.internal.org.objectweb.asm.Label owner>;

     label2:
        return $stack3#1;

        nop;
    }

    boolean inSubroutine(long)
    {
        long id, $stack5;
        jdk.internal.org.objectweb.asm.Label this;
        int[] $stack7;
        bottom_type $stack11;
        int $stack3, $stack4, $stack6, $stack8, $stack9, $stack10;
        boolean $stack11#1;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        id := @parameter0: long;

        $stack3 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack4 = $stack3 & 1024;

        if $stack4 == 0 goto label3;

        $stack7 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack5 = id >>> 32;

        $stack6 = (int) $stack5;

        $stack9 = $stack7[$stack6];

        $stack8 = (int) id;

        $stack10 = $stack9 & $stack8;

        if $stack10 == 0 goto label1;

        $stack11#1 = 1;

        goto label2;

     label1:
        $stack11#1 = 0;

     label2:
        return $stack11#1;

     label3:
        return 0;

        nop;
    }

    boolean inSameSubroutine(jdk.internal.org.objectweb.asm.Label)
    {
        bottom_type i;
        int[] $stack7, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack8, $stack11, $stack12, $stack13, $stack15, i#1;
        boolean $stack16;
        jdk.internal.org.objectweb.asm.Label this, block, $stack14;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        block := @parameter0: jdk.internal.org.objectweb.asm.Label;

        $stack3 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack4 = $stack3 & 1024;

        if $stack4 == 0 goto label1;

        $stack5 = block.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack6 = $stack5 & 1024;

        if $stack6 != 0 goto label2;

     label1:
        $stack16 = 0;

        return $stack16;

     label2:
        i#1 = 0;

     label3:
        $stack15 = i#1;

        $stack14 = this;

        $stack7 = $stack14.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack8 = lengthof $stack7;

        if $stack15 >= $stack8 goto label5;

        $stack9 = this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack12 = $stack9[i#1];

        $stack10 = block.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack11 = $stack10[i#1];

        $stack13 = $stack12 & $stack11;

        if $stack13 == 0 goto label4;

        return 1;

     label4:
        i#1 = i#1 + 1;

        goto label3;

     label5:
        return 0;

        nop;
    }

    void addToSubroutine(long, int)
    {
        long id, $stack6, $stack19, $stack20;
        byte $stack18;
        int[] $stack8, $stack16;
        int $stack4, $stack5, $stack7, $stack9, $stack10, $stack11, $stack12, $stack13, nbSubroutines, $stack14, $stack15;
        jdk.internal.org.objectweb.asm.Label this, $stack17;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        id := @parameter0: long;

        nbSubroutines := @parameter1: int;

        $stack4 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack5 = $stack4 & 1024;

        if $stack5 != 0 goto label1;

        $stack12 = this.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack13 = $stack12 | 1024;

        this.<jdk.internal.org.objectweb.asm.Label: int status> = $stack13;

        $stack14 = nbSubroutines / 32;

        $stack15 = $stack14 + 1;

        $stack16 = newarray (int)[$stack15];

        this.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions> = $stack16;

     label1:
        $stack17 = this;

        $stack8 = $stack17.<jdk.internal.org.objectweb.asm.Label: int[] srcAndRefPositions>;

        $stack19 = id;

        $stack18 = 32;

        $stack6 = $stack19 >>> $stack18;

        $stack7 = (int) $stack6;

        $stack10 = $stack8[$stack7];

        $stack20 = id;

        $stack9 = (int) $stack20;

        $stack11 = $stack10 | $stack9;

        $stack8[$stack7] = $stack11;

        return;

        nop;
    }

    void visitSubroutine(jdk.internal.org.objectweb.asm.Label, long, int)
    {
        bottom_type stack, e, $stack9, $stack14, $stack16, $stack17, $stack27, $stack28;
        boolean $stack8, $stack29;
        jdk.internal.org.objectweb.asm.Edge $stack18, $stack19, $stack20, $stack30, $stack32, $stack34, e#4, $stack28#7, $stack28#8, e#9, $stack14#10, $stack14#11, $stack16#12, $stack16#13, $stack17#14, $stack17#15;
        long id;
        int nbSubroutines, $stack10, $stack11, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack31;
        jdk.internal.org.objectweb.asm.Label this, l, JSR, $stack12, $stack13, $stack15, $stack33, stack#1, $stack9#2, $stack9#3, $stack27#5, $stack27#6;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        JSR := @parameter0: jdk.internal.org.objectweb.asm.Label;

        id := @parameter1: long;

        nbSubroutines := @parameter2: int;

        stack#1 = this;

     label01:
        $stack9#2 = stack#1;

        $stack9#3 = $stack9#2;

        if $stack9#3 == null goto label10;

        l = stack#1;

        stack#1 = l.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next>;

        l.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next> = null;

        if JSR == null goto label03;

        $stack21 = l.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack22 = $stack21 & 2048;

        if $stack22 == 0 goto label02;

        goto label01;

     label02:
        $stack23 = l.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack24 = $stack23 | 2048;

        l.<jdk.internal.org.objectweb.asm.Label: int status> = $stack24;

        $stack25 = l.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack26 = $stack25 & 256;

        if $stack26 == 0 goto label05;

        $stack29 = virtualinvoke l.<jdk.internal.org.objectweb.asm.Label: boolean inSameSubroutine(jdk.internal.org.objectweb.asm.Label)>(JSR);

        if $stack29 != 0 goto label05;

        $stack30 = new jdk.internal.org.objectweb.asm.Edge;

        specialinvoke $stack30.<jdk.internal.org.objectweb.asm.Edge: void <init>()>();

        e#4 = $stack30;

        $stack31 = l.<jdk.internal.org.objectweb.asm.Label: int inputStackTop>;

        e#4.<jdk.internal.org.objectweb.asm.Edge: int info> = $stack31;

        $stack32 = JSR.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        $stack33 = $stack32.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

        e#4.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor> = $stack33;

        $stack34 = l.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        e#4.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Edge next> = $stack34;

        l.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors> = e#4;

        goto label05;

     label03:
        $stack8 = virtualinvoke l.<jdk.internal.org.objectweb.asm.Label: boolean inSubroutine(long)>(id);

        if $stack8 == 0 goto label04;

        goto label01;

     label04:
        virtualinvoke l.<jdk.internal.org.objectweb.asm.Label: void addToSubroutine(long,int)>(id, nbSubroutines);

     label05:
        $stack27#5 = l;

        $stack27#6 = $stack27#5;

        $stack28#7 = $stack27#6.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        $stack28#8 = $stack28#7;

        e#9 = $stack28#8;

     label06:
        $stack14#10 = e#9;

        $stack14#11 = $stack14#10;

        if $stack14#11 == null goto label09;

        $stack10 = l.<jdk.internal.org.objectweb.asm.Label: int status>;

        $stack11 = $stack10 & 128;

        if $stack11 == 0 goto label07;

        $stack18 = l.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Edge successors>;

        $stack19 = $stack18.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Edge next>;

        if e#9 == $stack19 goto label08;

     label07:
        $stack20 = e#9;

        $stack12 = $stack20.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

        $stack13 = $stack12.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next>;

        if $stack13 != null goto label08;

        $stack15 = e#9.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

        $stack15.<jdk.internal.org.objectweb.asm.Label: jdk.internal.org.objectweb.asm.Label next> = stack#1;

        stack#1 = e#9.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Label successor>;

     label08:
        $stack16#12 = e#9;

        $stack16#13 = $stack16#12;

        $stack17#14 = $stack16#13.<jdk.internal.org.objectweb.asm.Edge: jdk.internal.org.objectweb.asm.Edge next>;

        $stack17#15 = $stack17#14;

        e#9 = $stack17#15;

        goto label06;

     label09:
        goto label01;

     label10:
        return;

        nop;
    }

    public java.lang.String toString()
    {
        jdk.internal.org.objectweb.asm.Label this;
        int $stack3;
        java.lang.StringBuilder $stack1, $stack2, $stack4;
        java.lang.String $stack5;

        this := @this: jdk.internal.org.objectweb.asm.Label;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $stack3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(this);

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;

        nop;
    }

    public static void <clinit>()
    {
        <jdk.internal.org.objectweb.asm.Label: int VISITED2> = 2048;

        <jdk.internal.org.objectweb.asm.Label: int VISITED> = 1024;

        <jdk.internal.org.objectweb.asm.Label: int SUBROUTINE> = 512;

        <jdk.internal.org.objectweb.asm.Label: int RET> = 256;

        <jdk.internal.org.objectweb.asm.Label: int JSR> = 128;

        <jdk.internal.org.objectweb.asm.Label: int REACHABLE> = 64;

        <jdk.internal.org.objectweb.asm.Label: int STORE> = 32;

        <jdk.internal.org.objectweb.asm.Label: int TARGET> = 16;

        <jdk.internal.org.objectweb.asm.Label: int PUSHED> = 8;

        <jdk.internal.org.objectweb.asm.Label: int RESIZED> = 4;

        <jdk.internal.org.objectweb.asm.Label: int RESOLVED> = 2;

        <jdk.internal.org.objectweb.asm.Label: int DEBUG> = 1;

        return;
    }
}
