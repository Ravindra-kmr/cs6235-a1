abstract class jdk.internal.module.ModuleReferences$SafeCloseModuleReader extends java.lang.Object implements java.lang.module.ModuleReader
{
    private final java.util.concurrent.locks.ReadWriteLock lock;
    private final java.util.concurrent.locks.Lock readLock;
    private final java.util.concurrent.locks.Lock writeLock;
    private boolean closed;

    void <init>()
    {
        java.util.concurrent.locks.Lock $stack3, $stack5;
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader this;
        java.util.concurrent.locks.ReentrantReadWriteLock $stack1;
        java.util.concurrent.locks.ReadWriteLock $stack2, $stack4;

        this := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $stack1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.ReadWriteLock lock> = $stack1;

        $stack2 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.ReadWriteLock lock>;

        $stack3 = interfaceinvoke $stack2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock> = $stack3;

        $stack4 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.ReadWriteLock lock>;

        $stack5 = interfaceinvoke $stack4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock> = $stack5;

        return;

        nop;
    }

    abstract java.util.Optional implFind(java.lang.String) throws java.io.IOException;

    abstract java.util.Optional implOpen(java.lang.String) throws java.io.IOException;

    abstract java.util.stream.Stream implList() throws java.io.IOException;

    abstract void implClose() throws java.io.IOException;

    public final java.util.Optional find(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $stack9, l3;
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader this;
        java.io.IOException $stack6;
        java.util.concurrent.locks.Lock $stack4, $stack8, $stack10;
        java.util.Optional $stack7, l2;
        java.lang.String name;
        boolean $stack5;

        this := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        name := @parameter0: java.lang.String;

        $stack4 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $stack5 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $stack5 != 0 goto label3;

        $stack7 = virtualinvoke this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.Optional implFind(java.lang.String)>(name);

        l2 = $stack7;

     label2:
        $stack8 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack8.<java.util.concurrent.locks.Lock: void unlock()>();

        return l2;

     label3:
        $stack6 = new java.io.IOException;

        specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $stack6;

     label4:
        $stack9 := @caughtexception;

        l3 = $stack9;

     label5:
        $stack10 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw l3;

        nop;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final java.util.Optional open(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $stack9, l3;
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader this;
        java.io.IOException $stack6;
        java.util.concurrent.locks.Lock $stack4, $stack8, $stack10;
        java.util.Optional $stack7, l2;
        java.lang.String name;
        boolean $stack5;

        this := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        name := @parameter0: java.lang.String;

        $stack4 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $stack5 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $stack5 != 0 goto label3;

        $stack7 = virtualinvoke this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.Optional implOpen(java.lang.String)>(name);

        l2 = $stack7;

     label2:
        $stack8 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack8.<java.util.concurrent.locks.Lock: void unlock()>();

        return l2;

     label3:
        $stack6 = new java.io.IOException;

        specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $stack6;

     label4:
        $stack9 := @caughtexception;

        l3 = $stack9;

     label5:
        $stack10 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw l3;

        nop;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final java.util.stream.Stream list() throws java.io.IOException
    {
        java.lang.Throwable $stack8, l2;
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader this;
        java.io.IOException $stack5;
        java.util.concurrent.locks.Lock $stack3, $stack7, $stack9;
        java.util.stream.Stream $stack6, l1;
        boolean $stack4;

        this := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        $stack3 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $stack4 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $stack4 != 0 goto label3;

        $stack6 = virtualinvoke this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.stream.Stream implList()>();

        l1 = $stack6;

     label2:
        $stack7 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack7.<java.util.concurrent.locks.Lock: void unlock()>();

        return l1;

     label3:
        $stack5 = new java.io.IOException;

        specialinvoke $stack5.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $stack5;

     label4:
        $stack8 := @caughtexception;

        l2 = $stack8;

     label5:
        $stack9 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $stack9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw l2;

        nop;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final void close() throws java.io.IOException
    {
        java.lang.Throwable $stack6, l1;
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader this, $stack5;
        java.util.concurrent.locks.Lock $stack2, $stack4, $stack7;
        boolean $stack3;

        this := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        $stack2 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $stack2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $stack3 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $stack3 != 0 goto label2;

        this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed> = 1;

        virtualinvoke this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: void implClose()>();

     label2:
        $stack5 = this;

        $stack4 = $stack5.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $stack4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $stack6 := @caughtexception;

        l1 = $stack6;

        $stack7 = this.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $stack7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw l1;

     label4:
        return;

        nop;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
