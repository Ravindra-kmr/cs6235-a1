public class jdk.internal.loader.FileURLMapper extends java.lang.Object
{
    java.net.URL url;
    java.lang.String path;

    public void <init>(java.net.URL)
    {
        jdk.internal.loader.FileURLMapper this;
        java.net.URL url;

        this := @this: jdk.internal.loader.FileURLMapper;

        url := @parameter0: java.net.URL;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<jdk.internal.loader.FileURLMapper: java.net.URL url> = url;

        return;

        nop;
    }

    public java.lang.String getPath()
    {
        java.net.URL $stack3, $stack5#5, $stack5#6;
        bottom_type $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack12, $stack13, $stack14, $stack15;
        jdk.internal.loader.FileURLMapper this, $stack12#1, $stack12#2, $stack11#3, $stack11#4, $stack14#9, $stack14#10, $stack13#11, $stack13#12, $stack15#17, $stack15#18;
        boolean $stack10, $stack17;
        java.lang.String $stack2, $stack4, host, $stack16, $stack18, $stack6#7, $stack6#8, $stack7#13, $stack7#14, $stack8#15, $stack8#16, $stack9#19, $stack9#20;

        this := @this: jdk.internal.loader.FileURLMapper;

        $stack2 = this.<jdk.internal.loader.FileURLMapper: java.lang.String path>;

        if $stack2 == null goto label1;

        $stack18 = this.<jdk.internal.loader.FileURLMapper: java.lang.String path>;

        return $stack18;

     label1:
        $stack3 = this.<jdk.internal.loader.FileURLMapper: java.net.URL url>;

        $stack4 = virtualinvoke $stack3.<java.net.URL: java.lang.String getHost()>();

        host = $stack4;

        if host == null goto label2;

        $stack10 = virtualinvoke host.<java.lang.String: boolean isEmpty()>();

        if $stack10 != 0 goto label2;

        $stack16 = "localhost";

        $stack17 = virtualinvoke $stack16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(host);

        if $stack17 == 0 goto label3;

     label2:
        $stack12#1 = this;

        $stack12#2 = $stack12#1;

        $stack11#3 = this;

        $stack11#4 = $stack11#3;

        $stack5#5 = $stack11#4.<jdk.internal.loader.FileURLMapper: java.net.URL url>;

        $stack5#6 = $stack5#5;

        $stack6#7 = virtualinvoke $stack5#6.<java.net.URL: java.lang.String getFile()>();

        $stack6#8 = $stack6#7;

        $stack12#2.<jdk.internal.loader.FileURLMapper: java.lang.String path> = $stack6#8;

        $stack14#9 = this;

        $stack14#10 = $stack14#9;

        $stack13#11 = this;

        $stack13#12 = $stack13#11;

        $stack7#13 = $stack13#12.<jdk.internal.loader.FileURLMapper: java.lang.String path>;

        $stack7#14 = $stack7#13;

        $stack8#15 = staticinvoke <sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>($stack7#14);

        $stack8#16 = $stack8#15;

        $stack14#10.<jdk.internal.loader.FileURLMapper: java.lang.String path> = $stack8#16;

     label3:
        $stack15#17 = this;

        $stack15#18 = $stack15#17;

        $stack9#19 = $stack15#18.<jdk.internal.loader.FileURLMapper: java.lang.String path>;

        $stack9#20 = $stack9#19;

        return $stack9#20;

        nop;
    }

    public boolean exists()
    {
        jdk.internal.loader.FileURLMapper this;
        java.lang.String $stack3, s;
        java.io.File $stack4, f;
        boolean $stack5;

        this := @this: jdk.internal.loader.FileURLMapper;

        $stack3 = virtualinvoke this.<jdk.internal.loader.FileURLMapper: java.lang.String getPath()>();

        s = $stack3;

        if s != null goto label1;

        return 0;

     label1:
        $stack4 = new java.io.File;

        specialinvoke $stack4.<java.io.File: void <init>(java.lang.String)>(s);

        f = $stack4;

        $stack5 = virtualinvoke f.<java.io.File: boolean exists()>();

        return $stack5;

        nop;
    }
}
