final class jdk.internal.logger.BootstrapLogger$DetectBackend extends java.lang.Object
{
    static final jdk.internal.logger.BootstrapLogger$LoggingBackend detectedBackend;

    private void <init>()
    {
        jdk.internal.logger.BootstrapLogger$DetectBackend this;

        this := @this: jdk.internal.logger.BootstrapLogger$DetectBackend;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;

        nop;
    }

    static void <clinit>()
    {
        java.lang.Object $stack1;
        jdk.internal.logger.BootstrapLogger$DetectBackend$1 $stack0;
        jdk.internal.logger.BootstrapLogger$LoggingBackend $stack2;

        $stack0 = new jdk.internal.logger.BootstrapLogger$DetectBackend$1;

        specialinvoke $stack0.<jdk.internal.logger.BootstrapLogger$DetectBackend$1: void <init>()>();

        $stack1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($stack0);

        $stack2 = (jdk.internal.logger.BootstrapLogger$LoggingBackend) $stack1;

        <jdk.internal.logger.BootstrapLogger$DetectBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend detectedBackend> = $stack2;

        return;
    }
}
