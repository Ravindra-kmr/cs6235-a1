public final class jdk.internal.misc.Signal extends java.lang.Object
{
    private static java.util.Hashtable handlers;
    private static java.util.Hashtable signals;
    private int number;
    private java.lang.String name;

    public int getNumber()
    {
        int $stack1;
        jdk.internal.misc.Signal this;

        this := @this: jdk.internal.misc.Signal;

        $stack1 = this.<jdk.internal.misc.Signal: int number>;

        return $stack1;

        nop;
    }

    public java.lang.String getName()
    {
        jdk.internal.misc.Signal this;
        java.lang.String $stack1;

        this := @this: jdk.internal.misc.Signal;

        $stack1 = this.<jdk.internal.misc.Signal: java.lang.String name>;

        return $stack1;

        nop;
    }

    public boolean equals(java.lang.Object)
    {
        jdk.internal.misc.Signal this, other1;
        bottom_type $stack9;
        int $stack7, $stack8;
        java.lang.Object other;
        java.lang.String $stack4, $stack5;
        boolean $stack3, $stack6, $stack10, $stack9#1;

        this := @this: jdk.internal.misc.Signal;

        other := @parameter0: java.lang.Object;

        if this != other goto label1;

        return 1;

     label1:
        if other == null goto label2;

        $stack3 = other instanceof jdk.internal.misc.Signal;

        if $stack3 != 0 goto label3;

     label2:
        $stack10 = 0;

        return $stack10;

     label3:
        other1 = (jdk.internal.misc.Signal) other;

        $stack5 = this.<jdk.internal.misc.Signal: java.lang.String name>;

        $stack4 = other1.<jdk.internal.misc.Signal: java.lang.String name>;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack4);

        if $stack6 == 0 goto label4;

        $stack8 = this.<jdk.internal.misc.Signal: int number>;

        $stack7 = other1.<jdk.internal.misc.Signal: int number>;

        if $stack8 != $stack7 goto label4;

        $stack9#1 = 1;

        goto label5;

     label4:
        $stack9#1 = 0;

     label5:
        return $stack9#1;

        nop;
    }

    public int hashCode()
    {
        int $stack1;
        jdk.internal.misc.Signal this;

        this := @this: jdk.internal.misc.Signal;

        $stack1 = this.<jdk.internal.misc.Signal: int number>;

        return $stack1;

        nop;
    }

    public java.lang.String toString()
    {
        jdk.internal.misc.Signal this;
        java.lang.StringBuilder $stack1, $stack2, $stack4;
        java.lang.String $stack3, $stack5;

        this := @this: jdk.internal.misc.Signal;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIG");

        $stack3 = this.<jdk.internal.misc.Signal: java.lang.String name>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack5;

        nop;
    }

    public void <init>(java.lang.String)
    {
        int $stack4, $stack5;
        java.lang.String name, $stack10, $stack15;
        boolean $stack3;
        jdk.internal.misc.Signal this;
        java.lang.IllegalArgumentException $stack6, $stack11;
        java.lang.Object $stack2;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack12, $stack13, $stack14;

        this := @this: jdk.internal.misc.Signal;

        name := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(name, "name");

        $stack3 = virtualinvoke name.<java.lang.String: boolean startsWith(java.lang.String)>("SIG");

        if $stack3 == 0 goto label1;

        $stack11 = new java.lang.IllegalArgumentException;

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signal: ");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack15);

        throw $stack11;

     label1:
        this.<jdk.internal.misc.Signal: java.lang.String name> = name;

        $stack4 = staticinvoke <jdk.internal.misc.Signal: int findSignal0(java.lang.String)>(name);

        this.<jdk.internal.misc.Signal: int number> = $stack4;

        $stack5 = this.<jdk.internal.misc.Signal: int number>;

        if $stack5 >= 0 goto label2;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signal: ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack10);

        throw $stack6;

     label2:
        return;

        nop;
    }

    public static synchronized jdk.internal.misc.Signal$Handler handle(jdk.internal.misc.Signal, jdk.internal.misc.Signal$Handler) throws java.lang.IllegalArgumentException
    {
        java.lang.Integer $stack17;
        byte $stack14, $stack24, $stack25, $stack26, $stack27;
        bottom_type $stack45;
        boolean $stack11;
        jdk.internal.misc.Signal$Handler handler, oldHandler, $stack32, $stack34;
        java.lang.StringBuilder $stack40, $stack41, $stack42;
        java.lang.Throwable $stack50, l8;
        long newH, $stack13, oldH, $stack37, $stack38, $stack47, $stack48, $stack49, $stack45#1;
        int $stack12, $stack15;
        java.lang.String $stack43;
        java.util.Hashtable $stack16, $stack19, l6, $stack20, $stack22, $stack29, $stack30, $stack31, $stack33, $stack35, $stack51;
        jdk.internal.misc.Signal sig, $stack46;
        java.lang.IllegalArgumentException $stack39;
        java.lang.Object $stack9, $stack10, $stack18, $stack21, $stack23, $stack36;
        jdk.internal.misc.Signal$NativeHandler $stack28, $stack44;

        sig := @parameter0: jdk.internal.misc.Signal;

        handler := @parameter1: jdk.internal.misc.Signal$Handler;

        $stack9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(sig, "sig");

        $stack10 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(handler, "handler");

        $stack11 = handler instanceof jdk.internal.misc.Signal$NativeHandler;

        if $stack11 == 0 goto label01;

        $stack44 = (jdk.internal.misc.Signal$NativeHandler) handler;

        $stack45#1 = virtualinvoke $stack44.<jdk.internal.misc.Signal$NativeHandler: long getHandler()>();

        goto label02;

     label01:
        $stack45#1 = 2L;

     label02:
        newH = $stack45#1;

        $stack46 = sig;

        $stack12 = $stack46.<jdk.internal.misc.Signal: int number>;

        $stack47 = newH;

        $stack13 = staticinvoke <jdk.internal.misc.Signal: long handle0(int,long)>($stack12, $stack47);

        oldH = $stack13;

        $stack49 = oldH;

        $stack48 = -1L;

        $stack14 = $stack49 cmp $stack48;

        if $stack14 != 0 goto label03;

        $stack39 = new java.lang.IllegalArgumentException;

        $stack40 = new java.lang.StringBuilder;

        specialinvoke $stack40.<java.lang.StringBuilder: void <init>()>();

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signal already used by VM or OS: ");

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(sig);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack43);

        throw $stack39;

     label03:
        $stack16 = <jdk.internal.misc.Signal: java.util.Hashtable signals>;

        $stack15 = sig.<jdk.internal.misc.Signal: int number>;

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack15);

        $stack18 = virtualinvoke $stack16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack17, sig);

        $stack19 = <jdk.internal.misc.Signal: java.util.Hashtable handlers>;

        l6 = $stack19;

        entermonitor $stack19;

     label04:
        $stack20 = <jdk.internal.misc.Signal: java.util.Hashtable handlers>;

        $stack21 = virtualinvoke $stack20.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(sig);

        oldHandler = (jdk.internal.misc.Signal$Handler) $stack21;

        $stack22 = <jdk.internal.misc.Signal: java.util.Hashtable handlers>;

        $stack23 = virtualinvoke $stack22.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(sig);

        $stack24 = newH cmp 2L;

        if $stack24 != 0 goto label05;

        $stack35 = <jdk.internal.misc.Signal: java.util.Hashtable handlers>;

        $stack36 = virtualinvoke $stack35.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(sig, handler);

     label05:
        $stack38 = oldH;

        $stack37 = 0L;

        $stack25 = $stack38 cmp $stack37;

        if $stack25 != 0 goto label07;

        $stack34 = <jdk.internal.misc.Signal$Handler: jdk.internal.misc.Signal$Handler SIG_DFL>;

        $stack33 = l6;

        exitmonitor $stack33;

     label06:
        return $stack34;

     label07:
        $stack26 = oldH cmp 1L;

        if $stack26 != 0 goto label09;

        $stack32 = <jdk.internal.misc.Signal$Handler: jdk.internal.misc.Signal$Handler SIG_IGN>;

        $stack31 = l6;

        exitmonitor $stack31;

     label08:
        return $stack32;

     label09:
        $stack27 = oldH cmp 2L;

        if $stack27 != 0 goto label11;

        $stack30 = l6;

        exitmonitor $stack30;

     label10:
        return oldHandler;

     label11:
        $stack28 = new jdk.internal.misc.Signal$NativeHandler;

        specialinvoke $stack28.<jdk.internal.misc.Signal$NativeHandler: void <init>(long)>(oldH);

        $stack29 = l6;

        exitmonitor $stack29;

     label12:
        return $stack28;

     label13:
        $stack50 := @caughtexception;

        l8 = $stack50;

        $stack51 = l6;

        exitmonitor $stack51;

     label14:
        throw l8;

        nop;

        catch java.lang.Throwable from label04 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static void raise(jdk.internal.misc.Signal) throws java.lang.IllegalArgumentException
    {
        jdk.internal.misc.Signal sig;
        java.lang.IllegalArgumentException $stack5;
        int $stack4;
        java.lang.Object $stack1, $stack3;
        java.lang.StringBuilder $stack6, $stack7, $stack8;
        java.lang.String $stack9;
        java.util.Hashtable $stack2;

        sig := @parameter0: jdk.internal.misc.Signal;

        $stack1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(sig, "sig");

        $stack2 = <jdk.internal.misc.Signal: java.util.Hashtable handlers>;

        $stack3 = virtualinvoke $stack2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(sig);

        if $stack3 != null goto label1;

        $stack5 = new java.lang.IllegalArgumentException;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled signal: ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(sig);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9);

        throw $stack5;

     label1:
        $stack4 = sig.<jdk.internal.misc.Signal: int number>;

        staticinvoke <jdk.internal.misc.Signal: void raise0(int)>($stack4);

        return;

        nop;
    }

    private static void dispatch(int)
    {
        jdk.internal.misc.Signal$Handler handler;
        jdk.internal.misc.Signal sig;
        java.lang.Integer $stack5;
        jdk.internal.misc.Signal$1 $stack9, runnable;
        java.lang.Thread $stack10;
        int number;
        java.lang.Object $stack6, $stack8;
        java.lang.StringBuilder $stack11, $stack13, $stack14;
        java.lang.String $stack15;
        java.util.Hashtable $stack4, $stack7;

        number := @parameter0: int;

        $stack4 = <jdk.internal.misc.Signal: java.util.Hashtable signals>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(number);

        $stack6 = virtualinvoke $stack4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($stack5);

        sig = (jdk.internal.misc.Signal) $stack6;

        $stack7 = <jdk.internal.misc.Signal: java.util.Hashtable handlers>;

        $stack8 = virtualinvoke $stack7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(sig);

        handler = (jdk.internal.misc.Signal$Handler) $stack8;

        $stack9 = new jdk.internal.misc.Signal$1;

        specialinvoke $stack9.<jdk.internal.misc.Signal$1: void <init>(jdk.internal.misc.Signal$Handler,jdk.internal.misc.Signal)>(handler, sig);

        runnable = $stack9;

        if handler == null goto label1;

        $stack10 = new java.lang.Thread;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(sig);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handler");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack10.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean)>(null, runnable, $stack15, 0L, 0);

        virtualinvoke $stack10.<java.lang.Thread: void start()>();

     label1:
        return;
    }

    private static native int findSignal0(java.lang.String);

    private static native long handle0(int, long);

    private static native void raise0(int);

    static void <clinit>()
    {
        java.util.Hashtable $stack0, $stack1;

        $stack0 = new java.util.Hashtable;

        specialinvoke $stack0.<java.util.Hashtable: void <init>(int)>(4);

        <jdk.internal.misc.Signal: java.util.Hashtable handlers> = $stack0;

        $stack1 = new java.util.Hashtable;

        specialinvoke $stack1.<java.util.Hashtable: void <init>(int)>(4);

        <jdk.internal.misc.Signal: java.util.Hashtable signals> = $stack1;

        return;
    }
}
