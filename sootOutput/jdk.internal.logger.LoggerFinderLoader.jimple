public final class jdk.internal.logger.LoggerFinderLoader extends java.lang.Object
{
    private static volatile java.lang.System$LoggerFinder service;
    private static final java.lang.Object lock;
    static final java.security.Permission CLASSLOADER_PERMISSION;
    static final java.security.Permission READ_PERMISSION;
    public static final java.lang.RuntimePermission LOGGERFINDER_PERMISSION;

    private void <init>()
    {
        java.lang.InternalError $stack1;
        jdk.internal.logger.LoggerFinderLoader this;

        this := @this: jdk.internal.logger.LoggerFinderLoader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.lang.InternalError;

        specialinvoke $stack1.<java.lang.InternalError: void <init>(java.lang.String)>("LoggerFinderLoader cannot be instantiated");

        throw $stack1;

        nop;
    }

    private static java.lang.System$LoggerFinder service()
    {
        java.lang.Throwable $stack11, l1;
        java.lang.System$LoggerFinder $stack2, $stack4, $stack5, $stack7, $stack9, $stack10;
        java.lang.Object $stack3, l0, $stack6, $stack8, $stack12;

        $stack2 = <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service>;

        if $stack2 == null goto label1;

        $stack10 = <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service>;

        return $stack10;

     label1:
        $stack3 = <jdk.internal.logger.LoggerFinderLoader: java.lang.Object lock>;

        l0 = $stack3;

        entermonitor $stack3;

     label2:
        $stack4 = <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service>;

        if $stack4 == null goto label4;

        $stack9 = <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service>;

        $stack8 = l0;

        exitmonitor $stack8;

     label3:
        return $stack9;

     label4:
        $stack5 = staticinvoke <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder loadLoggerFinder()>();

        <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service> = $stack5;

        $stack6 = l0;

        exitmonitor $stack6;

     label5:
        goto label8;

     label6:
        $stack11 := @caughtexception;

        l1 = $stack11;

        $stack12 = l0;

        exitmonitor $stack12;

     label7:
        throw l1;

     label8:
        staticinvoke <jdk.internal.logger.BootstrapLogger: void redirectTemporaryLoggers()>();

        $stack7 = <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service>;

        return $stack7;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static jdk.internal.logger.LoggerFinderLoader$ErrorPolicy configurationErrorPolicy()
    {
        java.lang.IllegalArgumentException $stack8, x;
        java.util.Locale $stack5;
        java.lang.String $stack2, errorPolicy, $stack6;
        jdk.internal.logger.LoggerFinderLoader$ErrorPolicy $stack3, $stack7, $stack9;
        boolean $stack4;

        $stack2 = staticinvoke <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>("jdk.logger.finder.error");

        errorPolicy = $stack2;

        if errorPolicy == null goto label1;

        $stack4 = virtualinvoke errorPolicy.<java.lang.String: boolean isEmpty()>();

        if $stack4 == 0 goto label2;

     label1:
        $stack3 = <jdk.internal.logger.LoggerFinderLoader$ErrorPolicy: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy WARNING>;

        return $stack3;

     label2:
        $stack5 = <java.util.Locale: java.util.Locale ROOT>;

        $stack6 = virtualinvoke errorPolicy.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack5);

        $stack7 = staticinvoke <jdk.internal.logger.LoggerFinderLoader$ErrorPolicy: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy valueOf(java.lang.String)>($stack6);

     label3:
        return $stack7;

     label4:
        $stack8 := @caughtexception;

        x = $stack8;

        $stack9 = <jdk.internal.logger.LoggerFinderLoader$ErrorPolicy: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy WARNING>;

        return $stack9;

        nop;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private static boolean ensureSingletonProvider()
    {
        java.lang.String $stack0;
        boolean $stack1;

        $stack0 = staticinvoke <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>("jdk.logger.finder.singleton");

        $stack1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack0);

        return $stack1;
    }

    private static java.util.Iterator findLoggerFinderProviders()
    {
        java.security.Permission[] $stack4;
        java.util.Iterator $stack12, $stack13, iterator#1;
        java.util.ServiceLoader $stack11;
        java.security.PrivilegedAction $stack3, pa;
        java.lang.SecurityManager $stack2;
        java.security.Permission $stack6, $stack7;
        bottom_type iterator;
        java.lang.RuntimePermission $stack5;
        java.lang.Object $stack8;
        java.lang.Class $stack9;
        java.lang.ClassLoader $stack10;

        $stack2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $stack2 != null goto label1;

        $stack9 = class "Ljava/lang/System$LoggerFinder;";

        $stack10 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $stack11 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>($stack9, $stack10);

        $stack12 = virtualinvoke $stack11.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        iterator#1 = $stack12;

        goto label2;

     label1:
        $stack3 = staticinvoke <jdk.internal.logger.LoggerFinderLoader$lambda_findLoggerFinderProviders_0__52: java.security.PrivilegedAction bootstrap$()>();

        pa = $stack3;

        $stack4 = newarray (java.security.Permission)[3];

        $stack5 = <jdk.internal.logger.LoggerFinderLoader: java.lang.RuntimePermission LOGGERFINDER_PERMISSION>;

        $stack4[0] = $stack5;

        $stack6 = <jdk.internal.logger.LoggerFinderLoader: java.security.Permission CLASSLOADER_PERMISSION>;

        $stack4[1] = $stack6;

        $stack7 = <jdk.internal.logger.LoggerFinderLoader: java.security.Permission READ_PERMISSION>;

        $stack4[2] = $stack7;

        $stack8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.security.Permission[])>(pa, null, $stack4);

        iterator#1 = (java.util.Iterator) $stack8;

     label2:
        $stack13 = iterator#1;

        return $stack13;

        nop;
    }

    private static java.lang.System$LoggerFinder loadLoggerFinder()
    {
        java.lang.Throwable $stack11, iterator#3;
        java.lang.System$Logger$Level $stack18, $stack20;
        bottom_type iterator, result, $stack16;
        java.util.ServiceConfigurationError $stack10, $stack22;
        jdk.internal.logger.DefaultLoggerFinder $stack12;
        boolean $stack5, $stack8, $stack9, $stack21;
        jdk.internal.logger.SimpleConsoleLogger $stack17, logger;
        java.util.Iterator $stack4, iterator#1;
        java.lang.System$LoggerFinder $stack6, result#2, $stack16#4, $stack16#5;
        java.lang.Object $stack7;
        jdk.internal.logger.LoggerFinderLoader$ErrorPolicy $stack13, errorPolicy, $stack14, $stack15, $stack19;

     label1:
        $stack4 = staticinvoke <jdk.internal.logger.LoggerFinderLoader: java.util.Iterator findLoggerFinderProviders()>();

        iterator#1 = $stack4;

        $stack5 = interfaceinvoke iterator#1.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack7 = interfaceinvoke iterator#1.<java.util.Iterator: java.lang.Object next()>();

        result#2 = (java.lang.System$LoggerFinder) $stack7;

        $stack8 = interfaceinvoke iterator#1.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        $stack9 = staticinvoke <jdk.internal.logger.LoggerFinderLoader: boolean ensureSingletonProvider()>();

        if $stack9 == 0 goto label3;

        $stack10 = new java.util.ServiceConfigurationError;

        specialinvoke $stack10.<java.util.ServiceConfigurationError: void <init>(java.lang.String)>("More than on LoggerFinder implementation");

        throw $stack10;

     label2:
        $stack6 = staticinvoke <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder loadDefaultImplementation()>();

        result#2 = $stack6;

     label3:
        goto label7;

     label4:
        $stack11 := @caughtexception;

        iterator#3 = $stack11;

        $stack12 = new jdk.internal.logger.DefaultLoggerFinder;

        specialinvoke $stack12.<jdk.internal.logger.DefaultLoggerFinder: void <init>()>();

        result#2 = $stack12;

        <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service> = $stack12;

        $stack13 = staticinvoke <jdk.internal.logger.LoggerFinderLoader: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy configurationErrorPolicy()>();

        errorPolicy = $stack13;

        $stack14 = <jdk.internal.logger.LoggerFinderLoader$ErrorPolicy: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy ERROR>;

        if errorPolicy != $stack14 goto label6;

        $stack21 = iterator#3 instanceof java.lang.Error;

        if $stack21 == 0 goto label5;

        throw iterator#3;

     label5:
        $stack22 = new java.util.ServiceConfigurationError;

        specialinvoke $stack22.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>("Failed to instantiate LoggerFinder provider; Using default.", iterator#3);

        throw $stack22;

     label6:
        $stack15 = <jdk.internal.logger.LoggerFinderLoader$ErrorPolicy: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy QUIET>;

        if errorPolicy == $stack15 goto label7;

        $stack17 = new jdk.internal.logger.SimpleConsoleLogger;

        specialinvoke $stack17.<jdk.internal.logger.SimpleConsoleLogger: void <init>(java.lang.String,boolean)>("jdk.internal.logger", 0);

        logger = $stack17;

        $stack18 = <java.lang.System$Logger$Level: java.lang.System$Logger$Level WARNING>;

        virtualinvoke logger.<jdk.internal.logger.SimpleConsoleLogger: void log(java.lang.System$Logger$Level,java.lang.String)>($stack18, "Failed to instantiate LoggerFinder provider; Using default.");

        $stack19 = <jdk.internal.logger.LoggerFinderLoader$ErrorPolicy: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy DEBUG>;

        if errorPolicy != $stack19 goto label7;

        $stack20 = <java.lang.System$Logger$Level: java.lang.System$Logger$Level WARNING>;

        virtualinvoke logger.<jdk.internal.logger.SimpleConsoleLogger: void log(java.lang.System$Logger$Level,java.lang.String,java.lang.Throwable)>($stack20, "Exception raised trying to instantiate LoggerFinder", iterator#3);

     label7:
        $stack16#4 = result#2;

        $stack16#5 = $stack16#4;

        return $stack16#5;

        nop;

        catch java.lang.Error from label1 to label3 with label4;
        catch java.lang.RuntimeException from label1 to label3 with label4;
    }

    private static java.lang.System$LoggerFinder loadDefaultImplementation()
    {
        java.security.Permission[] $stack6;
        java.util.ServiceConfigurationError $stack20;
        jdk.internal.logger.DefaultLoggerFinder $stack12, $stack13, pa#3;
        boolean $stack11;
        java.util.Iterator $stack16, $stack18, iterator#1;
        java.util.ServiceLoader $stack15;
        java.lang.RuntimeException $stack19, x;
        java.security.PrivilegedAction $stack5, pa#2;
        java.lang.SecurityManager $stack4, sm;
        java.security.Permission $stack8, $stack9;
        java.lang.RuntimePermission $stack7;
        java.lang.Object $stack10, $stack14;

        $stack4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        sm = $stack4;

        if sm != null goto label1;

        $stack15 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>(class "Ljdk/internal/logger/DefaultLoggerFinder;");

        $stack16 = virtualinvoke $stack15.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        iterator#1 = $stack16;

        goto label2;

     label1:
        $stack5 = staticinvoke <jdk.internal.logger.LoggerFinderLoader$lambda_loadDefaultImplementation_1__51: java.security.PrivilegedAction bootstrap$()>();

        pa#2 = $stack5;

        $stack6 = newarray (java.security.Permission)[3];

        $stack7 = <jdk.internal.logger.LoggerFinderLoader: java.lang.RuntimePermission LOGGERFINDER_PERMISSION>;

        $stack6[0] = $stack7;

        $stack8 = <jdk.internal.logger.LoggerFinderLoader: java.security.Permission CLASSLOADER_PERMISSION>;

        $stack6[1] = $stack8;

        $stack9 = <jdk.internal.logger.LoggerFinderLoader: java.security.Permission READ_PERMISSION>;

        $stack6[2] = $stack9;

        $stack10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.security.Permission[])>(pa#2, null, $stack6);

        iterator#1 = (java.util.Iterator) $stack10;

     label2:
        pa#3 = null;

     label3:
        $stack18 = iterator#1;

        $stack11 = interfaceinvoke $stack18.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label4;

        $stack14 = interfaceinvoke iterator#1.<java.util.Iterator: java.lang.Object next()>();

        pa#3 = (jdk.internal.logger.DefaultLoggerFinder) $stack14;

     label4:
        goto label6;

     label5:
        $stack19 := @caughtexception;

        x = $stack19;

        $stack20 = new java.util.ServiceConfigurationError;

        specialinvoke $stack20.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>("Failed to instantiate default LoggerFinder", x);

        throw $stack20;

     label6:
        if pa#3 != null goto label7;

        $stack12 = new jdk.internal.logger.DefaultLoggerFinder;

        specialinvoke $stack12.<jdk.internal.logger.DefaultLoggerFinder: void <init>()>();

        pa#3 = $stack12;

     label7:
        $stack13 = pa#3;

        return $stack13;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }

    public static java.lang.System$LoggerFinder getLoggerFinder()
    {
        java.lang.System$LoggerFinder $stack2;
        java.lang.RuntimePermission $stack3;
        java.lang.SecurityManager $stack1, sm;

        $stack1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        sm = $stack1;

        if sm == null goto label1;

        $stack3 = <jdk.internal.logger.LoggerFinderLoader: java.lang.RuntimePermission LOGGERFINDER_PERMISSION>;

        virtualinvoke sm.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($stack3);

     label1:
        $stack2 = staticinvoke <jdk.internal.logger.LoggerFinderLoader: java.lang.System$LoggerFinder service()>();

        return $stack2;

        nop;
    }

    public static java.util.Iterator lambda$loadDefaultImplementation$1()
    {
        java.util.ServiceLoader $stack0;
        java.util.Iterator $stack1;

        $stack0 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>(class "Ljdk/internal/logger/DefaultLoggerFinder;");

        $stack1 = virtualinvoke $stack0.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        return $stack1;
    }

    public static java.util.Iterator lambda$findLoggerFinderProviders$0()
    {
        java.util.Iterator $stack3;
        java.lang.Class $stack0;
        java.util.ServiceLoader $stack2;
        java.lang.ClassLoader $stack1;

        $stack0 = class "Ljava/lang/System$LoggerFinder;";

        $stack1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $stack2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>($stack0, $stack1);

        $stack3 = virtualinvoke $stack2.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        return $stack3;
    }

    static void <clinit>()
    {
        int[] $stack0;
        java.io.FilePermission $stack2;
        java.lang.RuntimePermission $stack1, $stack3;

        $stack0 = newarray (int)[0];

        <jdk.internal.logger.LoggerFinderLoader: java.lang.Object lock> = $stack0;

        $stack1 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_CLASSLOADER_PERMISSION>;

        <jdk.internal.logger.LoggerFinderLoader: java.security.Permission CLASSLOADER_PERMISSION> = $stack1;

        $stack2 = new java.io.FilePermission;

        specialinvoke $stack2.<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>("<<ALL FILES>>", "read");

        <jdk.internal.logger.LoggerFinderLoader: java.security.Permission READ_PERMISSION> = $stack2;

        $stack3 = new java.lang.RuntimePermission;

        specialinvoke $stack3.<java.lang.RuntimePermission: void <init>(java.lang.String)>("loggerFinder");

        <jdk.internal.logger.LoggerFinderLoader: java.lang.RuntimePermission LOGGERFINDER_PERMISSION> = $stack3;

        return;
    }
}
